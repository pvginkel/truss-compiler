//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4.1.9004
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4.1.9004 Truss.g 2014-06-22 09:05:48

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


    using Truss.Compiler;
    using Truss.Compiler.Syntax;
    using Truss.Compiler.Support;
    using System.Diagnostics;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  Truss.Compiler.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4.1.9004")]
[System.CLSCompliant(false)]
 internal  partial class TrussParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "BLOCK_COMMENT", "CHAR", "DIGIT", "EXPONENT", "FLOAT", "FLOAT_SUFFIX", "HEX_DIGIT", "HEX_INTEGER", "IDENTIFIER", "IDENTIFIER_CHARACTER", "IDENTIFIER_FIRST_CHARACTER", "INPUT_CHARACTER", "INTEGER", "INTEGER_SUFFIX", "KW_ABSTRACT", "KW_AS", "KW_ASSERT", "KW_ASYNC", "KW_AWAIT", "KW_BASE", "KW_BOOL", "KW_BREAK", "KW_BYTE", "KW_CASE", "KW_CATCH", "KW_CHAR", "KW_CLASS", "KW_CONSUMES", "KW_CONTINUE", "KW_DECIMAL", "KW_DEFAULT", "KW_DELEGATE", "KW_DELETE", "KW_DO", "KW_DOUBLE", "KW_ELIF", "KW_ELSE", "KW_ENUM", "KW_EVENT", "KW_EXPLICIT", "KW_EXTERN", "KW_FALSE", "KW_FINALLY", "KW_FLOAT", "KW_FOR", "KW_FOREACH", "KW_IF", "KW_IMPLICIT", "KW_IMPORT", "KW_IN", "KW_INT", "KW_INTERFACE", "KW_INTERNAL", "KW_IS", "KW_LONG", "KW_LOOP", "KW_NAMESPACE", "KW_NEW", "KW_NIL", "KW_OBJECT", "KW_OPERATOR", "KW_OUT", "KW_OVERRIDE", "KW_PARAMS", "KW_PARTIAL", "KW_PRIVATE", "KW_PROTECTED", "KW_PUBLIC", "KW_READONLY", "KW_REF", "KW_RETURN", "KW_SBYTE", "KW_SEALED", "KW_SHORT", "KW_SIZEOF", "KW_STATIC", "KW_STRING", "KW_STRUCT", "KW_SWITCH", "KW_THIS", "KW_THROW", "KW_TRUE", "KW_TRY", "KW_TYPEOF", "KW_UINT", "KW_ULONG", "KW_USHORT", "KW_USING", "KW_VAR", "KW_VIRTUAL", "KW_VOID", "KW_VOLATILE", "KW_WHERE", "KW_WHILE", "LINE_COMMENT", "LITERAL_STRING", "NEW_LINE", "NEW_LINE_CHARACTER", "OP_AMPERSAND", "OP_AMPERSAND_AMPERSAND", "OP_AMPERSAND_EQUALS", "OP_ASTERISK", "OP_ASTERISK_EQUALS", "OP_BAR", "OP_BAR_BAR", "OP_BAR_EQUALS", "OP_BRACE_CLOSE", "OP_BRACE_OPEN", "OP_BRACKET_CLOSE", "OP_BRACKET_OPEN", "OP_CARET", "OP_CARET_EQUALS", "OP_COLON", "OP_COLON_COLON", "OP_COMMA", "OP_DOT", "OP_EQUALS", "OP_EQUALS_EQUALS", "OP_EQUALS_GREATER_THAN", "OP_EXCLAMATION", "OP_EXCLAMATION_EQUALS", "OP_GREATER_THAN", "OP_GREATER_THAN_EQUALS", "OP_GREATER_THAN_GREATER_THAN", "OP_GREATER_THAN_GREATER_THAN_EQUALS", "OP_GREATER_THAN_GREATER_THAN_FIRST", "OP_GREATER_THAN_GREATER_THAN_SECOND", "OP_LESS_THAN", "OP_LESS_THAN_EQUALS", "OP_LESS_THAN_LESS_THAN", "OP_LESS_THAN_LESS_THAN_EQUALS", "OP_MINUS", "OP_MINUS_EQUALS", "OP_MINUS_MINUS", "OP_PAREN_CLOSE", "OP_PAREN_OPEN", "OP_PERCENT", "OP_PERCENT_EQUALS", "OP_PLUS", "OP_PLUS_EQUALS", "OP_PLUS_PLUS", "OP_QUESTION", "OP_QUESTION_QUESTION", "OP_SEMICOLON", "OP_SLASH", "OP_SLASH_EQUALS", "OP_TILDE", "STRING", "VERBATIM_STRING", "WHITESPACE"
	};
	public const int EOF=-1;
	public const int BLOCK_COMMENT=4;
	public const int CHAR=5;
	public const int DIGIT=6;
	public const int EXPONENT=7;
	public const int FLOAT=8;
	public const int FLOAT_SUFFIX=9;
	public const int HEX_DIGIT=10;
	public const int HEX_INTEGER=11;
	public const int IDENTIFIER=12;
	public const int IDENTIFIER_CHARACTER=13;
	public const int IDENTIFIER_FIRST_CHARACTER=14;
	public const int INPUT_CHARACTER=15;
	public const int INTEGER=16;
	public const int INTEGER_SUFFIX=17;
	public const int KW_ABSTRACT=18;
	public const int KW_AS=19;
	public const int KW_ASSERT=20;
	public const int KW_ASYNC=21;
	public const int KW_AWAIT=22;
	public const int KW_BASE=23;
	public const int KW_BOOL=24;
	public const int KW_BREAK=25;
	public const int KW_BYTE=26;
	public const int KW_CASE=27;
	public const int KW_CATCH=28;
	public const int KW_CHAR=29;
	public const int KW_CLASS=30;
	public const int KW_CONSUMES=31;
	public const int KW_CONTINUE=32;
	public const int KW_DECIMAL=33;
	public const int KW_DEFAULT=34;
	public const int KW_DELEGATE=35;
	public const int KW_DELETE=36;
	public const int KW_DO=37;
	public const int KW_DOUBLE=38;
	public const int KW_ELIF=39;
	public const int KW_ELSE=40;
	public const int KW_ENUM=41;
	public const int KW_EVENT=42;
	public const int KW_EXPLICIT=43;
	public const int KW_EXTERN=44;
	public const int KW_FALSE=45;
	public const int KW_FINALLY=46;
	public const int KW_FLOAT=47;
	public const int KW_FOR=48;
	public const int KW_FOREACH=49;
	public const int KW_IF=50;
	public const int KW_IMPLICIT=51;
	public const int KW_IMPORT=52;
	public const int KW_IN=53;
	public const int KW_INT=54;
	public const int KW_INTERFACE=55;
	public const int KW_INTERNAL=56;
	public const int KW_IS=57;
	public const int KW_LONG=58;
	public const int KW_LOOP=59;
	public const int KW_NAMESPACE=60;
	public const int KW_NEW=61;
	public const int KW_NIL=62;
	public const int KW_OBJECT=63;
	public const int KW_OPERATOR=64;
	public const int KW_OUT=65;
	public const int KW_OVERRIDE=66;
	public const int KW_PARAMS=67;
	public const int KW_PARTIAL=68;
	public const int KW_PRIVATE=69;
	public const int KW_PROTECTED=70;
	public const int KW_PUBLIC=71;
	public const int KW_READONLY=72;
	public const int KW_REF=73;
	public const int KW_RETURN=74;
	public const int KW_SBYTE=75;
	public const int KW_SEALED=76;
	public const int KW_SHORT=77;
	public const int KW_SIZEOF=78;
	public const int KW_STATIC=79;
	public const int KW_STRING=80;
	public const int KW_STRUCT=81;
	public const int KW_SWITCH=82;
	public const int KW_THIS=83;
	public const int KW_THROW=84;
	public const int KW_TRUE=85;
	public const int KW_TRY=86;
	public const int KW_TYPEOF=87;
	public const int KW_UINT=88;
	public const int KW_ULONG=89;
	public const int KW_USHORT=90;
	public const int KW_USING=91;
	public const int KW_VAR=92;
	public const int KW_VIRTUAL=93;
	public const int KW_VOID=94;
	public const int KW_VOLATILE=95;
	public const int KW_WHERE=96;
	public const int KW_WHILE=97;
	public const int LINE_COMMENT=98;
	public const int LITERAL_STRING=99;
	public const int NEW_LINE=100;
	public const int NEW_LINE_CHARACTER=101;
	public const int OP_AMPERSAND=102;
	public const int OP_AMPERSAND_AMPERSAND=103;
	public const int OP_AMPERSAND_EQUALS=104;
	public const int OP_ASTERISK=105;
	public const int OP_ASTERISK_EQUALS=106;
	public const int OP_BAR=107;
	public const int OP_BAR_BAR=108;
	public const int OP_BAR_EQUALS=109;
	public const int OP_BRACE_CLOSE=110;
	public const int OP_BRACE_OPEN=111;
	public const int OP_BRACKET_CLOSE=112;
	public const int OP_BRACKET_OPEN=113;
	public const int OP_CARET=114;
	public const int OP_CARET_EQUALS=115;
	public const int OP_COLON=116;
	public const int OP_COLON_COLON=117;
	public const int OP_COMMA=118;
	public const int OP_DOT=119;
	public const int OP_EQUALS=120;
	public const int OP_EQUALS_EQUALS=121;
	public const int OP_EQUALS_GREATER_THAN=122;
	public const int OP_EXCLAMATION=123;
	public const int OP_EXCLAMATION_EQUALS=124;
	public const int OP_GREATER_THAN=125;
	public const int OP_GREATER_THAN_EQUALS=126;
	public const int OP_GREATER_THAN_GREATER_THAN=127;
	public const int OP_GREATER_THAN_GREATER_THAN_EQUALS=128;
	public const int OP_GREATER_THAN_GREATER_THAN_FIRST=129;
	public const int OP_GREATER_THAN_GREATER_THAN_SECOND=130;
	public const int OP_LESS_THAN=131;
	public const int OP_LESS_THAN_EQUALS=132;
	public const int OP_LESS_THAN_LESS_THAN=133;
	public const int OP_LESS_THAN_LESS_THAN_EQUALS=134;
	public const int OP_MINUS=135;
	public const int OP_MINUS_EQUALS=136;
	public const int OP_MINUS_MINUS=137;
	public const int OP_PAREN_CLOSE=138;
	public const int OP_PAREN_OPEN=139;
	public const int OP_PERCENT=140;
	public const int OP_PERCENT_EQUALS=141;
	public const int OP_PLUS=142;
	public const int OP_PLUS_EQUALS=143;
	public const int OP_PLUS_PLUS=144;
	public const int OP_QUESTION=145;
	public const int OP_QUESTION_QUESTION=146;
	public const int OP_SEMICOLON=147;
	public const int OP_SLASH=148;
	public const int OP_SLASH_EQUALS=149;
	public const int OP_TILDE=150;
	public const int STRING=151;
	public const int VERBATIM_STRING=152;
	public const int WHITESPACE=153;

	protected sealed partial class declarationPrefix_scope
	{
		public ImmutableArray<AttributeListSyntax> attributes;
		public ImmutableArray<Modifier> modifiers;
		public TypeSyntax type;

		public declarationPrefix_scope(TrussParser grammar) { OnCreated(grammar); }
		partial void OnCreated(TrussParser grammar);
	}
	partial void declarationPrefix_scopeInit( declarationPrefix_scope scope );
	partial void declarationPrefix_scopeAfter( declarationPrefix_scope scope );
	protected readonly ListStack<declarationPrefix_scope> declarationPrefix_stack = new ListStack<declarationPrefix_scope>();

	public TrussParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public TrussParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		OnCreated();
	}

	public override string[] TokenNames { get { return TrussParser.tokenNames; } }
	public override string GrammarFileName { get { return "Truss.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_compilationUnit();
	partial void LeaveRule_compilationUnit();
	// $ANTLR start "compilationUnit"
	// Truss.g:36:1: compilationUnit returns [CompilationUnitSyntax value] : ( ( assemblyAttributeHeadScan )=>al= attributeList |id= importDirective |nsmd= namespaceScopeMemberDeclaration )* EOF ;
	[GrammarRule("compilationUnit")]
	private CompilationUnitSyntax compilationUnit()
	{
		EnterRule_compilationUnit();
		EnterRule("compilationUnit", 1);
		TraceIn("compilationUnit", 1);
		CompilationUnitSyntax value = default(CompilationUnitSyntax);


		AttributeListSyntax al = default(AttributeListSyntax);
		ImportDirectiveSyntax id = default(ImportDirectiveSyntax);
		MemberDeclarationSyntax nsmd = default(MemberDeclarationSyntax);


		    var start = input.LT(1);
		    var attributeLists = new ImmutableArray<AttributeListSyntax>.Builder();
		    var imports = new ImmutableArray<ImportDirectiveSyntax>.Builder();
		    var members = new ImmutableArray<MemberDeclarationSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "compilationUnit");
		DebugLocation(36, 4);
		try
		{
			// Truss.g:43:5: ( ( ( assemblyAttributeHeadScan )=>al= attributeList |id= importDirective |nsmd= namespaceScopeMemberDeclaration )* EOF )
			DebugEnterAlt(1);
			// Truss.g:44:9: ( ( assemblyAttributeHeadScan )=>al= attributeList |id= importDirective |nsmd= namespaceScopeMemberDeclaration )* EOF
			{
			DebugLocation(44, 9);
			// Truss.g:44:9: ( ( assemblyAttributeHeadScan )=>al= attributeList |id= importDirective |nsmd= namespaceScopeMemberDeclaration )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=4;
				try { DebugEnterDecision(1, false);
				switch (input.LA(1))
				{
				case OP_BRACKET_OPEN:
					{
					int LA1_2 = input.LA(2);

					if ((EvaluatePredicate(synpred1_Truss_fragment)))
					{
						alt1 = 1;
					}
					else if ((true))
					{
						alt1 = 3;
					}


					}
					break;
				case KW_IMPORT:
					{
					alt1 = 2;
					}
					break;
				case KW_ABSTRACT:
				case KW_ASYNC:
				case KW_CLASS:
				case KW_DELEGATE:
				case KW_ENUM:
				case KW_EXTERN:
				case KW_INTERFACE:
				case KW_INTERNAL:
				case KW_NAMESPACE:
				case KW_NEW:
				case KW_OVERRIDE:
				case KW_PARTIAL:
				case KW_PRIVATE:
				case KW_PROTECTED:
				case KW_PUBLIC:
				case KW_READONLY:
				case KW_SEALED:
				case KW_STATIC:
				case KW_STRUCT:
				case KW_VIRTUAL:
				case KW_VOLATILE:
					{
					alt1 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:47:13: ( assemblyAttributeHeadScan )=>al= attributeList
					{
					DebugLocation(47, 47);
					PushFollow(Follow._attributeList_in_compilationUnit152);
					al=attributeList();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(47, 62);
					if (state.backtracking == 0)
					{
						 attributeLists.Add(al); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:49:13: id= importDirective
					{
					DebugLocation(49, 15);
					PushFollow(Follow._importDirective_in_compilationUnit180);
					id=importDirective();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(49, 32);
					if (state.backtracking == 0)
					{
						 imports.Add(id); 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Truss.g:51:13: nsmd= namespaceScopeMemberDeclaration
					{
					DebugLocation(51, 17);
					PushFollow(Follow._namespaceScopeMemberDeclaration_in_compilationUnit208);
					nsmd=namespaceScopeMemberDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(51, 50);
					if (state.backtracking == 0)
					{
						 members.Add(nsmd); 
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(53, 9);
			if (state.backtracking == 0)
			{
				 value = new CompilationUnitSyntax(attributeLists.Build(), imports.Build(), members.Build(), Span(start)); 
			}
			DebugLocation(54, 9);
			Match(input,EOF,Follow._EOF_in_compilationUnit241); if (state.failed) return value;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("compilationUnit", 1);
			LeaveRule("compilationUnit", 1);
			LeaveRule_compilationUnit();
		}
		DebugLocation(55, 4);
		} finally { DebugExitRule(GrammarFileName, "compilationUnit"); }
		return value;

	}
	// $ANTLR end "compilationUnit"

	partial void EnterRule_assemblyAttributeHeadScan();
	partial void LeaveRule_assemblyAttributeHeadScan();
	// $ANTLR start "assemblyAttributeHeadScan"
	// Truss.g:57:1: assemblyAttributeHeadScan : OP_BRACKET_OPEN i= IDENTIFIER {...}? => OP_COLON ;
	[GrammarRule("assemblyAttributeHeadScan")]
	private void assemblyAttributeHeadScan()
	{
		EnterRule_assemblyAttributeHeadScan();
		EnterRule("assemblyAttributeHeadScan", 2);
		TraceIn("assemblyAttributeHeadScan", 2);
		IToken i = default(IToken);

		try { DebugEnterRule(GrammarFileName, "assemblyAttributeHeadScan");
		DebugLocation(57, 4);
		try
		{
			// Truss.g:58:5: ( OP_BRACKET_OPEN i= IDENTIFIER {...}? => OP_COLON )
			DebugEnterAlt(1);
			// Truss.g:59:9: OP_BRACKET_OPEN i= IDENTIFIER {...}? => OP_COLON
			{
			DebugLocation(59, 9);
			Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_assemblyAttributeHeadScan266); if (state.failed) return;
			DebugLocation(60, 10);
			i=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_assemblyAttributeHeadScan278); if (state.failed) return;
			DebugLocation(61, 9);
			if (!(( i.Text == "assembly" )))
			{
				if (state.backtracking>0) {state.failed=true; return;}
				throw new FailedPredicateException(input, "assemblyAttributeHeadScan", " i.Text == \"assembly\" ");
			}
			DebugLocation(61, 37);
			if (state.backtracking == 0)
			{
				 
			}
			DebugLocation(62, 9);
			Match(input,OP_COLON,Follow._OP_COLON_in_assemblyAttributeHeadScan301); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assemblyAttributeHeadScan", 2);
			LeaveRule("assemblyAttributeHeadScan", 2);
			LeaveRule_assemblyAttributeHeadScan();
		}
		DebugLocation(63, 4);
		} finally { DebugExitRule(GrammarFileName, "assemblyAttributeHeadScan"); }
		return;

	}
	// $ANTLR end "assemblyAttributeHeadScan"

	partial void EnterRule_namespaceScopeMemberDeclaration();
	partial void LeaveRule_namespaceScopeMemberDeclaration();
	// $ANTLR start "namespaceScopeMemberDeclaration"
	// Truss.g:65:1: namespaceScopeMemberDeclaration returns [MemberDeclarationSyntax value] : (nd= namespaceDeclaration |all= attributeListList m= modifiers (dd= delegateDeclaration |td= typeDeclaration |ed= enumDeclaration ) );
	[GrammarRule("namespaceScopeMemberDeclaration")]
	private MemberDeclarationSyntax namespaceScopeMemberDeclaration()
	{
		EnterRule_namespaceScopeMemberDeclaration();
		EnterRule("namespaceScopeMemberDeclaration", 3);
		TraceIn("namespaceScopeMemberDeclaration", 3);
		declarationPrefix_stack.Push(new declarationPrefix_scope(this));declarationPrefix_scopeInit(declarationPrefix_stack.Peek());

		MemberDeclarationSyntax value = default(MemberDeclarationSyntax);


		NamespaceDeclarationSyntax nd = default(NamespaceDeclarationSyntax);
		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		ImmutableArray<Modifier> m = default(ImmutableArray<Modifier>);
		DelegateDeclarationSyntax dd = default(DelegateDeclarationSyntax);
		TypeDeclarationSyntax td = default(TypeDeclarationSyntax);
		EnumDeclarationSyntax ed = default(EnumDeclarationSyntax);

		try { DebugEnterRule(GrammarFileName, "namespaceScopeMemberDeclaration");
		DebugLocation(65, 4);
		try
		{
			// Truss.g:67:5: (nd= namespaceDeclaration |all= attributeListList m= modifiers (dd= delegateDeclaration |td= typeDeclaration |ed= enumDeclaration ) )
			int alt3=2;
			try { DebugEnterDecision(3, false);
			int LA3_1 = input.LA(1);

			if ((LA3_1==KW_NAMESPACE))
			{
				alt3 = 1;
			}
			else if ((LA3_1==IDENTIFIER||LA3_1==KW_ABSTRACT||LA3_1==KW_ASYNC||LA3_1==KW_BOOL||LA3_1==KW_BYTE||(LA3_1>=KW_CHAR && LA3_1<=KW_CONSUMES)||LA3_1==KW_DECIMAL||LA3_1==KW_DELEGATE||LA3_1==KW_DOUBLE||(LA3_1>=KW_ENUM && LA3_1<=KW_EXTERN)||LA3_1==KW_FLOAT||LA3_1==KW_IMPLICIT||(LA3_1>=KW_IN && LA3_1<=KW_INTERNAL)||LA3_1==KW_LONG||LA3_1==KW_NEW||LA3_1==KW_OBJECT||(LA3_1>=KW_OUT && LA3_1<=KW_REF)||(LA3_1>=KW_SBYTE && LA3_1<=KW_SHORT)||(LA3_1>=KW_STATIC && LA3_1<=KW_STRUCT)||LA3_1==KW_THIS||(LA3_1>=KW_UINT && LA3_1<=KW_USHORT)||(LA3_1>=KW_VAR && LA3_1<=KW_VOLATILE)||LA3_1==OP_BRACKET_OPEN||LA3_1==OP_TILDE))
			{
				alt3 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(3); }
			switch (alt3)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:68:9: nd= namespaceDeclaration
				{
				DebugLocation(68, 11);
				PushFollow(Follow._namespaceDeclaration_in_namespaceScopeMemberDeclaration337);
				nd=namespaceDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(68, 33);
				if (state.backtracking == 0)
				{
					 value = nd; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:70:9: all= attributeListList m= modifiers (dd= delegateDeclaration |td= typeDeclaration |ed= enumDeclaration )
				{
				DebugLocation(70, 12);
				PushFollow(Follow._attributeListList_in_namespaceScopeMemberDeclaration357);
				all=attributeListList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(70, 31);
				if (state.backtracking == 0)
				{
					 declarationPrefix_stack.Peek().attributes =  all; 
				}
				DebugLocation(71, 10);
				PushFollow(Follow._modifiers_in_namespaceScopeMemberDeclaration371);
				m=modifiers();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(71, 21);
				if (state.backtracking == 0)
				{
					 declarationPrefix_stack.Peek().modifiers =  m; 
				}
				DebugLocation(72, 9);
				// Truss.g:72:9: (dd= delegateDeclaration |td= typeDeclaration |ed= enumDeclaration )
				int alt2=3;
				try { DebugEnterSubRule(2);
				try { DebugEnterDecision(2, false);
				switch (input.LA(1))
				{
				case KW_DELEGATE:
					{
					alt2 = 1;
					}
					break;
				case KW_CLASS:
				case KW_INTERFACE:
				case KW_STRUCT:
					{
					alt2 = 2;
					}
					break;
				case KW_ENUM:
					{
					alt2 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:72:11: dd= delegateDeclaration
					{
					DebugLocation(72, 13);
					PushFollow(Follow._delegateDeclaration_in_namespaceScopeMemberDeclaration387);
					dd=delegateDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(72, 34);
					if (state.backtracking == 0)
					{
						 value = dd; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:73:11: td= typeDeclaration
					{
					DebugLocation(73, 13);
					PushFollow(Follow._typeDeclaration_in_namespaceScopeMemberDeclaration403);
					td=typeDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(73, 30);
					if (state.backtracking == 0)
					{
						 value = td; 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Truss.g:74:11: ed= enumDeclaration
					{
					DebugLocation(74, 13);
					PushFollow(Follow._enumDeclaration_in_namespaceScopeMemberDeclaration419);
					ed=enumDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(74, 30);
					if (state.backtracking == 0)
					{
						 value = ed; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(2); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespaceScopeMemberDeclaration", 3);
			LeaveRule("namespaceScopeMemberDeclaration", 3);
			LeaveRule_namespaceScopeMemberDeclaration();
			declarationPrefix_scopeAfter(declarationPrefix_stack.Peek());declarationPrefix_stack.Pop();

		}
		DebugLocation(76, 4);
		} finally { DebugExitRule(GrammarFileName, "namespaceScopeMemberDeclaration"); }
		return value;

	}
	// $ANTLR end "namespaceScopeMemberDeclaration"

	partial void EnterRule_importDirective();
	partial void LeaveRule_importDirective();
	// $ANTLR start "importDirective"
	// Truss.g:78:1: importDirective returns [ImportDirectiveSyntax value] : KW_IMPORT ( KW_STATIC )? (idn= identifierName OP_EQUALS )? n= name OP_SEMICOLON ;
	[GrammarRule("importDirective")]
	private ImportDirectiveSyntax importDirective()
	{
		EnterRule_importDirective();
		EnterRule("importDirective", 4);
		TraceIn("importDirective", 4);
		ImportDirectiveSyntax value = default(ImportDirectiveSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		NameSyntax n = default(NameSyntax);


		    var start = input.LT(1);
		    bool isStatic = false;

		try { DebugEnterRule(GrammarFileName, "importDirective");
		DebugLocation(78, 4);
		try
		{
			// Truss.g:83:5: ( KW_IMPORT ( KW_STATIC )? (idn= identifierName OP_EQUALS )? n= name OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:84:9: KW_IMPORT ( KW_STATIC )? (idn= identifierName OP_EQUALS )? n= name OP_SEMICOLON
			{
			DebugLocation(84, 9);
			Match(input,KW_IMPORT,Follow._KW_IMPORT_in_importDirective465); if (state.failed) return value;
			DebugLocation(85, 9);
			// Truss.g:85:9: ( KW_STATIC )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if ((LA4_1==KW_STATIC))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:85:11: KW_STATIC
				{
				DebugLocation(85, 11);
				Match(input,KW_STATIC,Follow._KW_STATIC_in_importDirective477); if (state.failed) return value;
				DebugLocation(85, 21);
				if (state.backtracking == 0)
				{
					 isStatic = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(86, 9);
			// Truss.g:86:9: (idn= identifierName OP_EQUALS )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_1 = input.LA(1);

			if ((LA5_1==IDENTIFIER))
			{
				int LA5_2 = input.LA(2);

				if ((LA5_2==OP_EQUALS))
				{
					alt5 = 1;
				}
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:87:13: idn= identifierName OP_EQUALS
				{
				DebugLocation(87, 16);
				PushFollow(Follow._identifierName_in_importDirective508);
				idn=identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(88, 13);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_importDirective522); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(90, 10);
			PushFollow(Follow._name_in_importDirective545);
			n=name();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(91, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_importDirective555); if (state.failed) return value;
			DebugLocation(92, 9);
			if (state.backtracking == 0)
			{
				 value = new ImportDirectiveSyntax(isStatic, idn, n, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("importDirective", 4);
			LeaveRule("importDirective", 4);
			LeaveRule_importDirective();
		}
		DebugLocation(93, 4);
		} finally { DebugExitRule(GrammarFileName, "importDirective"); }
		return value;

	}
	// $ANTLR end "importDirective"

	partial void EnterRule_namespaceDeclaration();
	partial void LeaveRule_namespaceDeclaration();
	// $ANTLR start "namespaceDeclaration"
	// Truss.g:95:1: namespaceDeclaration returns [NamespaceDeclarationSyntax value] : KW_NAMESPACE n= name OP_BRACE_OPEN (id= importDirective |nsmd= namespaceScopeMemberDeclaration )* OP_BRACE_CLOSE ;
	[GrammarRule("namespaceDeclaration")]
	private NamespaceDeclarationSyntax namespaceDeclaration()
	{
		EnterRule_namespaceDeclaration();
		EnterRule("namespaceDeclaration", 5);
		TraceIn("namespaceDeclaration", 5);
		NamespaceDeclarationSyntax value = default(NamespaceDeclarationSyntax);


		NameSyntax n = default(NameSyntax);
		ImportDirectiveSyntax id = default(ImportDirectiveSyntax);
		MemberDeclarationSyntax nsmd = default(MemberDeclarationSyntax);


		    var start = input.LT(1);
		    var imports = new ImmutableArray<ImportDirectiveSyntax>.Builder();
		    var members = new ImmutableArray<MemberDeclarationSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "namespaceDeclaration");
		DebugLocation(95, 4);
		try
		{
			// Truss.g:101:5: ( KW_NAMESPACE n= name OP_BRACE_OPEN (id= importDirective |nsmd= namespaceScopeMemberDeclaration )* OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:102:9: KW_NAMESPACE n= name OP_BRACE_OPEN (id= importDirective |nsmd= namespaceScopeMemberDeclaration )* OP_BRACE_CLOSE
			{
			DebugLocation(102, 9);
			Match(input,KW_NAMESPACE,Follow._KW_NAMESPACE_in_namespaceDeclaration599); if (state.failed) return value;
			DebugLocation(103, 10);
			PushFollow(Follow._name_in_namespaceDeclaration611);
			n=name();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(104, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_namespaceDeclaration621); if (state.failed) return value;
			DebugLocation(105, 9);
			// Truss.g:105:9: (id= importDirective |nsmd= namespaceScopeMemberDeclaration )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=3;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1==KW_IMPORT))
				{
					alt6 = 1;
				}
				else if ((LA6_1==IDENTIFIER||LA6_1==KW_ABSTRACT||LA6_1==KW_ASYNC||LA6_1==KW_BOOL||LA6_1==KW_BYTE||(LA6_1>=KW_CHAR && LA6_1<=KW_CONSUMES)||LA6_1==KW_DECIMAL||LA6_1==KW_DELEGATE||LA6_1==KW_DOUBLE||(LA6_1>=KW_ENUM && LA6_1<=KW_EXTERN)||LA6_1==KW_FLOAT||LA6_1==KW_IMPLICIT||(LA6_1>=KW_IN && LA6_1<=KW_INTERNAL)||LA6_1==KW_LONG||(LA6_1>=KW_NAMESPACE && LA6_1<=KW_NEW)||LA6_1==KW_OBJECT||(LA6_1>=KW_OUT && LA6_1<=KW_REF)||(LA6_1>=KW_SBYTE && LA6_1<=KW_SHORT)||(LA6_1>=KW_STATIC && LA6_1<=KW_STRUCT)||LA6_1==KW_THIS||(LA6_1>=KW_UINT && LA6_1<=KW_USHORT)||(LA6_1>=KW_VAR && LA6_1<=KW_VOLATILE)||LA6_1==OP_BRACKET_OPEN||LA6_1==OP_TILDE))
				{
					alt6 = 2;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:105:11: id= importDirective
					{
					DebugLocation(105, 13);
					PushFollow(Follow._importDirective_in_namespaceDeclaration635);
					id=importDirective();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(105, 30);
					if (state.backtracking == 0)
					{
						 imports.Add(id); 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:106:11: nsmd= namespaceScopeMemberDeclaration
					{
					DebugLocation(106, 15);
					PushFollow(Follow._namespaceScopeMemberDeclaration_in_namespaceDeclaration651);
					nsmd=namespaceScopeMemberDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(106, 48);
					if (state.backtracking == 0)
					{
						 members.Add(nsmd); 
					}

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }

			DebugLocation(108, 9);
			if (state.backtracking == 0)
			{
				 value = new NamespaceDeclarationSyntax(n, imports.Build(), members.Build(), Span(start)); 
			}
			DebugLocation(109, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_namespaceDeclaration684); if (state.failed) return value;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("namespaceDeclaration", 5);
			LeaveRule("namespaceDeclaration", 5);
			LeaveRule_namespaceDeclaration();
		}
		DebugLocation(110, 4);
		} finally { DebugExitRule(GrammarFileName, "namespaceDeclaration"); }
		return value;

	}
	// $ANTLR end "namespaceDeclaration"

	partial void EnterRule_attributeListList();
	partial void LeaveRule_attributeListList();
	// $ANTLR start "attributeListList"
	// Truss.g:114:1: attributeListList returns [ImmutableArray<AttributeListSyntax> value] : (al= attributeList )* ;
	[GrammarRule("attributeListList")]
	private ImmutableArray<AttributeListSyntax> attributeListList()
	{
		EnterRule_attributeListList();
		EnterRule("attributeListList", 6);
		TraceIn("attributeListList", 6);
		ImmutableArray<AttributeListSyntax> value = default(ImmutableArray<AttributeListSyntax>);


		AttributeListSyntax al = default(AttributeListSyntax);


		    var builder = new ImmutableArray<AttributeListSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "attributeListList");
		DebugLocation(114, 4);
		try
		{
			// Truss.g:118:5: ( (al= attributeList )* )
			DebugEnterAlt(1);
			// Truss.g:119:9: (al= attributeList )*
			{
			DebugLocation(119, 9);
			// Truss.g:119:9: (al= attributeList )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=2;
				try { DebugEnterDecision(7, false);
				int LA7_1 = input.LA(1);

				if ((LA7_1==OP_BRACKET_OPEN))
				{
					alt7 = 1;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:120:13: al= attributeList
					{
					DebugLocation(120, 15);
					PushFollow(Follow._attributeList_in_attributeListList736);
					al=attributeList();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(120, 30);
					if (state.backtracking == 0)
					{
						 builder.Add(al); 
					}

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(122, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeListList", 6);
			LeaveRule("attributeListList", 6);
			LeaveRule_attributeListList();
		}
		DebugLocation(123, 4);
		} finally { DebugExitRule(GrammarFileName, "attributeListList"); }
		return value;

	}
	// $ANTLR end "attributeListList"

	partial void EnterRule_attributeList();
	partial void LeaveRule_attributeList();
	// $ANTLR start "attributeList"
	// Truss.g:125:1: attributeList returns [AttributeListSyntax value] : OP_BRACKET_OPEN (at= attributeTarget OP_COLON )? a= attribute ( OP_COMMA a= attribute )* OP_BRACKET_CLOSE ;
	[GrammarRule("attributeList")]
	private AttributeListSyntax attributeList()
	{
		EnterRule_attributeList();
		EnterRule("attributeList", 7);
		TraceIn("attributeList", 7);
		AttributeListSyntax value = default(AttributeListSyntax);


		AttributeTarget at = default(AttributeTarget);
		AttributeSyntax a = default(AttributeSyntax);


		    var start = input.LT(1);
		    var attributes = new ImmutableArray<AttributeSyntax>.Builder();
		    var target = AttributeTarget.None;

		try { DebugEnterRule(GrammarFileName, "attributeList");
		DebugLocation(125, 4);
		try
		{
			// Truss.g:131:5: ( OP_BRACKET_OPEN (at= attributeTarget OP_COLON )? a= attribute ( OP_COMMA a= attribute )* OP_BRACKET_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:132:9: OP_BRACKET_OPEN (at= attributeTarget OP_COLON )? a= attribute ( OP_COMMA a= attribute )* OP_BRACKET_CLOSE
			{
			DebugLocation(132, 9);
			Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_attributeList793); if (state.failed) return value;
			DebugLocation(133, 9);
			// Truss.g:133:9: (at= attributeTarget OP_COLON )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_1 = input.LA(1);

			if ((LA8_1==IDENTIFIER))
			{
				int LA8_2 = input.LA(2);

				if ((LA8_2==OP_COLON))
				{
					alt8 = 1;
				}
			}
			else if ((LA8_1==KW_EVENT||LA8_1==KW_RETURN))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:134:13: at= attributeTarget OP_COLON
				{
				DebugLocation(134, 15);
				PushFollow(Follow._attributeTarget_in_attributeList819);
				at=attributeTarget();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(135, 13);
				if (state.backtracking == 0)
				{
					 target = at; 
				}
				DebugLocation(136, 13);
				Match(input,OP_COLON,Follow._OP_COLON_in_attributeList847); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(138, 10);
			PushFollow(Follow._attribute_in_attributeList870);
			a=attribute();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(139, 9);
			if (state.backtracking == 0)
			{
				 attributes.Add(a); 
			}
			DebugLocation(140, 9);
			// Truss.g:140:9: ( OP_COMMA a= attribute )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_1 = input.LA(1);

				if ((LA9_1==OP_COMMA))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:141:13: OP_COMMA a= attribute
					{
					DebugLocation(141, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_attributeList904); if (state.failed) return value;
					DebugLocation(142, 14);
					PushFollow(Follow._attribute_in_attributeList920);
					a=attribute();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(143, 13);
					if (state.backtracking == 0)
					{
						 attributes.Add(a); 
					}

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(145, 9);
			Match(input,OP_BRACKET_CLOSE,Follow._OP_BRACKET_CLOSE_in_attributeList955); if (state.failed) return value;
			DebugLocation(146, 9);
			if (state.backtracking == 0)
			{
				 value = new AttributeListSyntax(target, attributes.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeList", 7);
			LeaveRule("attributeList", 7);
			LeaveRule_attributeList();
		}
		DebugLocation(147, 4);
		} finally { DebugExitRule(GrammarFileName, "attributeList"); }
		return value;

	}
	// $ANTLR end "attributeList"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();
	// $ANTLR start "attribute"
	// Truss.g:149:1: attribute returns [AttributeSyntax value] : n= name ( OP_PAREN_OPEN (a= attributeArgument ( OP_COMMA a= attributeArgument )* )? OP_PAREN_CLOSE )? ;
	[GrammarRule("attribute")]
	private AttributeSyntax attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 8);
		TraceIn("attribute", 8);
		AttributeSyntax value = default(AttributeSyntax);


		NameSyntax n = default(NameSyntax);
		AttributeArgumentSyntax a = default(AttributeArgumentSyntax);


		    var start = input.LT(1);
		    var arguments = new ImmutableArray<AttributeArgumentSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(149, 4);
		try
		{
			// Truss.g:154:5: (n= name ( OP_PAREN_OPEN (a= attributeArgument ( OP_COMMA a= attributeArgument )* )? OP_PAREN_CLOSE )? )
			DebugEnterAlt(1);
			// Truss.g:155:9: n= name ( OP_PAREN_OPEN (a= attributeArgument ( OP_COMMA a= attributeArgument )* )? OP_PAREN_CLOSE )?
			{
			DebugLocation(155, 10);
			PushFollow(Follow._name_in_attribute1001);
			n=name();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(156, 9);
			// Truss.g:156:9: ( OP_PAREN_OPEN (a= attributeArgument ( OP_COMMA a= attributeArgument )* )? OP_PAREN_CLOSE )?
			int alt12=2;
			try { DebugEnterSubRule(12);
			try { DebugEnterDecision(12, false);
			int LA12_1 = input.LA(1);

			if ((LA12_1==OP_PAREN_OPEN))
			{
				alt12 = 1;
			}
			} finally { DebugExitDecision(12); }
			switch (alt12)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:157:13: OP_PAREN_OPEN (a= attributeArgument ( OP_COMMA a= attributeArgument )* )? OP_PAREN_CLOSE
				{
				DebugLocation(157, 13);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_attribute1025); if (state.failed) return value;
				DebugLocation(158, 13);
				// Truss.g:158:13: (a= attributeArgument ( OP_COMMA a= attributeArgument )* )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1==CHAR||LA11_1==FLOAT||(LA11_1>=HEX_INTEGER && LA11_1<=IDENTIFIER)||LA11_1==INTEGER||(LA11_1>=KW_ASYNC && LA11_1<=KW_BASE)||LA11_1==KW_DEFAULT||LA11_1==KW_FALSE||(LA11_1>=KW_NEW && LA11_1<=KW_NIL)||LA11_1==KW_SIZEOF||LA11_1==KW_THIS||LA11_1==KW_TRUE||LA11_1==KW_TYPEOF||LA11_1==OP_AMPERSAND||LA11_1==OP_EXCLAMATION||LA11_1==OP_MINUS||LA11_1==OP_MINUS_MINUS||LA11_1==OP_PAREN_OPEN||LA11_1==OP_PLUS||LA11_1==OP_PLUS_PLUS||(LA11_1>=OP_TILDE && LA11_1<=STRING)))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:159:17: a= attributeArgument ( OP_COMMA a= attributeArgument )*
					{
					DebugLocation(159, 18);
					PushFollow(Follow._attributeArgument_in_attribute1059);
					a=attributeArgument();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(160, 17);
					if (state.backtracking == 0)
					{
						 arguments.Add(a); 
					}
					DebugLocation(161, 17);
					// Truss.g:161:17: ( OP_COMMA a= attributeArgument )*
					try { DebugEnterSubRule(10);
					while (true)
					{
						int alt10=2;
						try { DebugEnterDecision(10, false);
						int LA10_1 = input.LA(1);

						if ((LA10_1==OP_COMMA))
						{
							alt10 = 1;
						}


						} finally { DebugExitDecision(10); }
						switch ( alt10 )
						{
						case 1:
							DebugEnterAlt(1);
							// Truss.g:162:21: OP_COMMA a= attributeArgument
							{
							DebugLocation(162, 21);
							Match(input,OP_COMMA,Follow._OP_COMMA_in_attribute1117); if (state.failed) return value;
							DebugLocation(163, 22);
							PushFollow(Follow._attributeArgument_in_attribute1141);
							a=attributeArgument();
							PopFollow();
							if (state.failed) return value;
							DebugLocation(164, 21);
							if (state.backtracking == 0)
							{
								 arguments.Add(a); 
							}

							}
							break;

						default:
							goto loop10;
						}
					}

					loop10:
						;

					} finally { DebugExitSubRule(10); }


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(167, 13);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_attribute1211); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(12); }

			DebugLocation(169, 9);
			if (state.backtracking == 0)
			{
				 value = new AttributeSyntax(n, arguments.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attribute", 8);
			LeaveRule("attribute", 8);
			LeaveRule_attribute();
		}
		DebugLocation(170, 4);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return value;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_attributeArgument();
	partial void LeaveRule_attributeArgument();
	// $ANTLR start "attributeArgument"
	// Truss.g:172:1: attributeArgument returns [AttributeArgumentSyntax value] : ( ( identifierName OP_EQUALS )=>idn= identifierName OP_EQUALS )? e= expression ;
	[GrammarRule("attributeArgument")]
	private AttributeArgumentSyntax attributeArgument()
	{
		EnterRule_attributeArgument();
		EnterRule("attributeArgument", 9);
		TraceIn("attributeArgument", 9);
		AttributeArgumentSyntax value = default(AttributeArgumentSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "attributeArgument");
		DebugLocation(172, 4);
		try
		{
			// Truss.g:176:5: ( ( ( identifierName OP_EQUALS )=>idn= identifierName OP_EQUALS )? e= expression )
			DebugEnterAlt(1);
			// Truss.g:177:9: ( ( identifierName OP_EQUALS )=>idn= identifierName OP_EQUALS )? e= expression
			{
			DebugLocation(177, 9);
			// Truss.g:177:9: ( ( identifierName OP_EQUALS )=>idn= identifierName OP_EQUALS )?
			int alt13=2;
			try { DebugEnterSubRule(13);
			try { DebugEnterDecision(13, false);
			int LA13_1 = input.LA(1);

			if ((LA13_1==IDENTIFIER))
			{
				int LA13_2 = input.LA(2);

				if ((EvaluatePredicate(synpred2_Truss_fragment)))
				{
					alt13 = 1;
				}
			}
			} finally { DebugExitDecision(13); }
			switch (alt13)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:178:13: ( identifierName OP_EQUALS )=>idn= identifierName OP_EQUALS
				{
				DebugLocation(179, 16);
				PushFollow(Follow._identifierName_in_attributeArgument1303);
				idn=identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(180, 13);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_attributeArgument1317); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(13); }

			DebugLocation(182, 10);
			PushFollow(Follow._expression_in_attributeArgument1340);
			e=expression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(183, 9);
			if (state.backtracking == 0)
			{
				 value = new AttributeArgumentSyntax(idn, e, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeArgument", 9);
			LeaveRule("attributeArgument", 9);
			LeaveRule_attributeArgument();
		}
		DebugLocation(184, 4);
		} finally { DebugExitRule(GrammarFileName, "attributeArgument"); }
		return value;

	}
	// $ANTLR end "attributeArgument"

	partial void EnterRule_attributeTarget();
	partial void LeaveRule_attributeTarget();
	// $ANTLR start "attributeTarget"
	// Truss.g:186:1: attributeTarget returns [AttributeTarget value] : (idn= identifierName | KW_EVENT | KW_RETURN );
	[GrammarRule("attributeTarget")]
	private AttributeTarget attributeTarget()
	{
		EnterRule_attributeTarget();
		EnterRule("attributeTarget", 10);
		TraceIn("attributeTarget", 10);
		AttributeTarget value = default(AttributeTarget);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "attributeTarget");
		DebugLocation(186, 4);
		try
		{
			// Truss.g:190:5: (idn= identifierName | KW_EVENT | KW_RETURN )
			int alt14=3;
			try { DebugEnterDecision(14, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				alt14 = 1;
				}
				break;
			case KW_EVENT:
				{
				alt14 = 2;
				}
				break;
			case KW_RETURN:
				{
				alt14 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 14, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:191:9: idn= identifierName
				{
				DebugLocation(191, 12);
				PushFollow(Follow._identifierName_in_attributeTarget1386);
				idn=identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(192, 9);
				if (state.backtracking == 0)
				{
					 value = ParseAttributeTarget(idn.Identifier, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:194:9: KW_EVENT
				{
				DebugLocation(194, 9);
				Match(input,KW_EVENT,Follow._KW_EVENT_in_attributeTarget1412); if (state.failed) return value;
				DebugLocation(195, 9);
				if (state.backtracking == 0)
				{
					 value = ParseAttributeTarget("event", Span(start)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:197:9: KW_RETURN
				{
				DebugLocation(197, 9);
				Match(input,KW_RETURN,Follow._KW_RETURN_in_attributeTarget1438); if (state.failed) return value;
				DebugLocation(198, 9);
				if (state.backtracking == 0)
				{
					 value = ParseAttributeTarget("return", Span(start)); 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("attributeTarget", 10);
			LeaveRule("attributeTarget", 10);
			LeaveRule_attributeTarget();
		}
		DebugLocation(199, 4);
		} finally { DebugExitRule(GrammarFileName, "attributeTarget"); }
		return value;

	}
	// $ANTLR end "attributeTarget"

	partial void EnterRule_parameterList();
	partial void LeaveRule_parameterList();
	// $ANTLR start "parameterList"
	// Truss.g:201:1: parameterList returns [ImmutableArray<ParameterSyntax> value] : OP_PAREN_OPEN (bpl= bareParameterList |) OP_PAREN_CLOSE ;
	[GrammarRule("parameterList")]
	private ImmutableArray<ParameterSyntax> parameterList()
	{
		EnterRule_parameterList();
		EnterRule("parameterList", 11);
		TraceIn("parameterList", 11);
		ImmutableArray<ParameterSyntax> value = default(ImmutableArray<ParameterSyntax>);


		ImmutableArray<ParameterSyntax> bpl = default(ImmutableArray<ParameterSyntax>);

		try { DebugEnterRule(GrammarFileName, "parameterList");
		DebugLocation(201, 4);
		try
		{
			// Truss.g:202:5: ( OP_PAREN_OPEN (bpl= bareParameterList |) OP_PAREN_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:203:9: OP_PAREN_OPEN (bpl= bareParameterList |) OP_PAREN_CLOSE
			{
			DebugLocation(203, 9);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_parameterList1477); if (state.failed) return value;
			DebugLocation(204, 9);
			// Truss.g:204:9: (bpl= bareParameterList |)
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_1 = input.LA(1);

			if ((LA15_1==IDENTIFIER||LA15_1==KW_ABSTRACT||LA15_1==KW_ASYNC||LA15_1==KW_BOOL||LA15_1==KW_BYTE||(LA15_1>=KW_CHAR && LA15_1<=KW_CONSUMES)||LA15_1==KW_DECIMAL||LA15_1==KW_DELEGATE||LA15_1==KW_DOUBLE||(LA15_1>=KW_ENUM && LA15_1<=KW_EXTERN)||LA15_1==KW_FLOAT||LA15_1==KW_IMPLICIT||(LA15_1>=KW_IN && LA15_1<=KW_INTERNAL)||LA15_1==KW_LONG||LA15_1==KW_NEW||LA15_1==KW_OBJECT||(LA15_1>=KW_OUT && LA15_1<=KW_REF)||(LA15_1>=KW_SBYTE && LA15_1<=KW_SHORT)||(LA15_1>=KW_STATIC && LA15_1<=KW_STRUCT)||LA15_1==KW_THIS||(LA15_1>=KW_UINT && LA15_1<=KW_USHORT)||(LA15_1>=KW_VAR && LA15_1<=KW_VOLATILE)||LA15_1==OP_BRACKET_OPEN||LA15_1==OP_TILDE))
			{
				alt15 = 1;
			}
			else if ((LA15_1==OP_PAREN_CLOSE))
			{
				alt15 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 15, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:205:13: bpl= bareParameterList
				{
				DebugLocation(205, 16);
				PushFollow(Follow._bareParameterList_in_parameterList1503);
				bpl=bareParameterList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(206, 13);
				if (state.backtracking == 0)
				{
					 value = bpl; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:208:13: 
				{
				DebugLocation(208, 13);
				if (state.backtracking == 0)
				{
					 value = ImmutableArray<ParameterSyntax>.Empty; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(210, 9);
			Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_parameterList1561); if (state.failed) return value;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterList", 11);
			LeaveRule("parameterList", 11);
			LeaveRule_parameterList();
		}
		DebugLocation(211, 4);
		} finally { DebugExitRule(GrammarFileName, "parameterList"); }
		return value;

	}
	// $ANTLR end "parameterList"

	partial void EnterRule_bareParameterList();
	partial void LeaveRule_bareParameterList();
	// $ANTLR start "bareParameterList"
	// Truss.g:213:1: bareParameterList returns [ImmutableArray<ParameterSyntax> value] : p= parameter ( OP_COMMA p= parameter )* ;
	[GrammarRule("bareParameterList")]
	private ImmutableArray<ParameterSyntax> bareParameterList()
	{
		EnterRule_bareParameterList();
		EnterRule("bareParameterList", 12);
		TraceIn("bareParameterList", 12);
		ImmutableArray<ParameterSyntax> value = default(ImmutableArray<ParameterSyntax>);


		ParameterSyntax p = default(ParameterSyntax);


		    var parameters = new ImmutableArray<ParameterSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "bareParameterList");
		DebugLocation(213, 4);
		try
		{
			// Truss.g:217:5: (p= parameter ( OP_COMMA p= parameter )* )
			DebugEnterAlt(1);
			// Truss.g:218:9: p= parameter ( OP_COMMA p= parameter )*
			{
			DebugLocation(218, 10);
			PushFollow(Follow._parameter_in_bareParameterList1597);
			p=parameter();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(219, 9);
			if (state.backtracking == 0)
			{
				 parameters.Add(p); 
			}
			DebugLocation(220, 9);
			// Truss.g:220:9: ( OP_COMMA p= parameter )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=2;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if ((LA16_1==OP_COMMA))
				{
					alt16 = 1;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:221:13: OP_COMMA p= parameter
					{
					DebugLocation(221, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_bareParameterList1631); if (state.failed) return value;
					DebugLocation(222, 14);
					PushFollow(Follow._parameter_in_bareParameterList1647);
					p=parameter();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(223, 13);
					if (state.backtracking == 0)
					{
						 parameters.Add(p); 
					}

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(225, 9);
			if (state.backtracking == 0)
			{
				 value = parameters.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bareParameterList", 12);
			LeaveRule("bareParameterList", 12);
			LeaveRule_bareParameterList();
		}
		DebugLocation(226, 4);
		} finally { DebugExitRule(GrammarFileName, "bareParameterList"); }
		return value;

	}
	// $ANTLR end "bareParameterList"

	partial void EnterRule_parameter();
	partial void LeaveRule_parameter();
	// $ANTLR start "parameter"
	// Truss.g:228:1: parameter returns [ParameterSyntax value] : all= attributeListList (pm= parameterModifier )* t= typeSyntax idn= identifierName ;
	[GrammarRule("parameter")]
	private ParameterSyntax parameter()
	{
		EnterRule_parameter();
		EnterRule("parameter", 13);
		TraceIn("parameter", 13);
		ParameterSyntax value = default(ParameterSyntax);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		ParameterModifier pm = default(ParameterModifier);
		TypeSyntax t = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);
		    var modifiers = new ImmutableArray<ParameterModifier>.Builder();

		try { DebugEnterRule(GrammarFileName, "parameter");
		DebugLocation(228, 4);
		try
		{
			// Truss.g:233:5: (all= attributeListList (pm= parameterModifier )* t= typeSyntax idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:234:9: all= attributeListList (pm= parameterModifier )* t= typeSyntax idn= identifierName
			{
			DebugLocation(234, 12);
			PushFollow(Follow._attributeListList_in_parameter1718);
			all=attributeListList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(235, 9);
			// Truss.g:235:9: (pm= parameterModifier )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_1 = input.LA(1);

				if ((LA17_1==KW_CONSUMES||LA17_1==KW_OUT||LA17_1==KW_PARAMS||LA17_1==KW_REF||LA17_1==KW_THIS))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:236:13: pm= parameterModifier
					{
					DebugLocation(236, 15);
					PushFollow(Follow._parameterModifier_in_parameter1744);
					pm=parameterModifier();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(237, 13);
					if (state.backtracking == 0)
					{
						 modifiers.Add(pm); 
					}

					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(239, 10);
			PushFollow(Follow._typeSyntax_in_parameter1781);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(240, 12);
			PushFollow(Follow._identifierName_in_parameter1793);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(241, 9);
			if (state.backtracking == 0)
			{
				 value = new ParameterSyntax(all, modifiers.Build(), t, idn, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameter", 13);
			LeaveRule("parameter", 13);
			LeaveRule_parameter();
		}
		DebugLocation(242, 4);
		} finally { DebugExitRule(GrammarFileName, "parameter"); }
		return value;

	}
	// $ANTLR end "parameter"

	partial void EnterRule_parameterModifier();
	partial void LeaveRule_parameterModifier();
	// $ANTLR start "parameterModifier"
	// Truss.g:244:1: parameterModifier returns [ParameterModifier value] : ( KW_THIS | KW_PARAMS | KW_CONSUMES |am= argumentModifier );
	[GrammarRule("parameterModifier")]
	private ParameterModifier parameterModifier()
	{
		EnterRule_parameterModifier();
		EnterRule("parameterModifier", 14);
		TraceIn("parameterModifier", 14);
		ParameterModifier value = default(ParameterModifier);


		ParameterModifier am = default(ParameterModifier);

		try { DebugEnterRule(GrammarFileName, "parameterModifier");
		DebugLocation(244, 4);
		try
		{
			// Truss.g:245:5: ( KW_THIS | KW_PARAMS | KW_CONSUMES |am= argumentModifier )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case KW_THIS:
				{
				alt18 = 1;
				}
				break;
			case KW_PARAMS:
				{
				alt18 = 2;
				}
				break;
			case KW_CONSUMES:
				{
				alt18 = 3;
				}
				break;
			case KW_OUT:
			case KW_REF:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:245:7: KW_THIS
				{
				DebugLocation(245, 7);
				Match(input,KW_THIS,Follow._KW_THIS_in_parameterModifier1824); if (state.failed) return value;
				DebugLocation(245, 15);
				if (state.backtracking == 0)
				{
					 value = ParameterModifier.This; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:246:7: KW_PARAMS
				{
				DebugLocation(246, 7);
				Match(input,KW_PARAMS,Follow._KW_PARAMS_in_parameterModifier1834); if (state.failed) return value;
				DebugLocation(246, 17);
				if (state.backtracking == 0)
				{
					 value = ParameterModifier.Params; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:247:7: KW_CONSUMES
				{
				DebugLocation(247, 7);
				Match(input,KW_CONSUMES,Follow._KW_CONSUMES_in_parameterModifier1844); if (state.failed) return value;
				DebugLocation(247, 19);
				if (state.backtracking == 0)
				{
					 value = ParameterModifier.Consumes; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:248:7: am= argumentModifier
				{
				DebugLocation(248, 9);
				PushFollow(Follow._argumentModifier_in_parameterModifier1856);
				am=argumentModifier();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(248, 27);
				if (state.backtracking == 0)
				{
					 value = am; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("parameterModifier", 14);
			LeaveRule("parameterModifier", 14);
			LeaveRule_parameterModifier();
		}
		DebugLocation(249, 4);
		} finally { DebugExitRule(GrammarFileName, "parameterModifier"); }
		return value;

	}
	// $ANTLR end "parameterModifier"

	partial void EnterRule_argumentModifier();
	partial void LeaveRule_argumentModifier();
	// $ANTLR start "argumentModifier"
	// Truss.g:251:1: argumentModifier returns [ParameterModifier value] : ( KW_REF | KW_OUT );
	[GrammarRule("argumentModifier")]
	private ParameterModifier argumentModifier()
	{
		EnterRule_argumentModifier();
		EnterRule("argumentModifier", 15);
		TraceIn("argumentModifier", 15);
		ParameterModifier value = default(ParameterModifier);


		try { DebugEnterRule(GrammarFileName, "argumentModifier");
		DebugLocation(251, 4);
		try
		{
			// Truss.g:252:5: ( KW_REF | KW_OUT )
			int alt19=2;
			try { DebugEnterDecision(19, false);
			int LA19_1 = input.LA(1);

			if ((LA19_1==KW_REF))
			{
				alt19 = 1;
			}
			else if ((LA19_1==KW_OUT))
			{
				alt19 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:252:7: KW_REF
				{
				DebugLocation(252, 7);
				Match(input,KW_REF,Follow._KW_REF_in_argumentModifier1879); if (state.failed) return value;
				DebugLocation(252, 14);
				if (state.backtracking == 0)
				{
					 value = ParameterModifier.Ref; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:253:7: KW_OUT
				{
				DebugLocation(253, 7);
				Match(input,KW_OUT,Follow._KW_OUT_in_argumentModifier1889); if (state.failed) return value;
				DebugLocation(253, 14);
				if (state.backtracking == 0)
				{
					 value = ParameterModifier.Out; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argumentModifier", 15);
			LeaveRule("argumentModifier", 15);
			LeaveRule_argumentModifier();
		}
		DebugLocation(254, 4);
		} finally { DebugExitRule(GrammarFileName, "argumentModifier"); }
		return value;

	}
	// $ANTLR end "argumentModifier"

	partial void EnterRule_delegateDeclaration();
	partial void LeaveRule_delegateDeclaration();
	// $ANTLR start "delegateDeclaration"
	// Truss.g:258:1: delegateDeclaration returns [DelegateDeclarationSyntax value] : KW_DELEGATE rt= typeSyntax idn= identifierName tpl= typeParameterList pl= parameterList tpccl= typeParameterConstraintClauseList OP_SEMICOLON ;
	[GrammarRule("delegateDeclaration")]
	private DelegateDeclarationSyntax delegateDeclaration()
	{
		EnterRule_delegateDeclaration();
		EnterRule("delegateDeclaration", 16);
		TraceIn("delegateDeclaration", 16);
		DelegateDeclarationSyntax value = default(DelegateDeclarationSyntax);


		TypeSyntax rt = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ImmutableArray<TypeParameterSyntax> tpl = default(ImmutableArray<TypeParameterSyntax>);
		ImmutableArray<ParameterSyntax> pl = default(ImmutableArray<ParameterSyntax>);
		ImmutableArray<TypeParameterConstraintClauseSyntax> tpccl = default(ImmutableArray<TypeParameterConstraintClauseSyntax>);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "delegateDeclaration");
		DebugLocation(258, 4);
		try
		{
			// Truss.g:262:5: ( KW_DELEGATE rt= typeSyntax idn= identifierName tpl= typeParameterList pl= parameterList tpccl= typeParameterConstraintClauseList OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:263:9: KW_DELEGATE rt= typeSyntax idn= identifierName tpl= typeParameterList pl= parameterList tpccl= typeParameterConstraintClauseList OP_SEMICOLON
			{
			DebugLocation(263, 9);
			Match(input,KW_DELEGATE,Follow._KW_DELEGATE_in_delegateDeclaration1927); if (state.failed) return value;
			DebugLocation(264, 11);
			PushFollow(Follow._typeSyntax_in_delegateDeclaration1939);
			rt=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(265, 12);
			PushFollow(Follow._identifierName_in_delegateDeclaration1951);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(266, 12);
			PushFollow(Follow._typeParameterList_in_delegateDeclaration1963);
			tpl=typeParameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(267, 11);
			PushFollow(Follow._parameterList_in_delegateDeclaration1975);
			pl=parameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(268, 14);
			PushFollow(Follow._typeParameterConstraintClauseList_in_delegateDeclaration1987);
			tpccl=typeParameterConstraintClauseList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(269, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_delegateDeclaration1997); if (state.failed) return value;
			DebugLocation(270, 9);
			if (state.backtracking == 0)
			{
				 value = new DelegateDeclarationSyntax(declarationPrefix_stack.Peek().attributes, declarationPrefix_stack.Peek().modifiers, rt, idn, tpl, pl, tpccl, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("delegateDeclaration", 16);
			LeaveRule("delegateDeclaration", 16);
			LeaveRule_delegateDeclaration();
		}
		DebugLocation(271, 4);
		} finally { DebugExitRule(GrammarFileName, "delegateDeclaration"); }
		return value;

	}
	// $ANTLR end "delegateDeclaration"

	partial void EnterRule_typeParameterList();
	partial void LeaveRule_typeParameterList();
	// $ANTLR start "typeParameterList"
	// Truss.g:273:1: typeParameterList returns [ImmutableArray<TypeParameterSyntax> value] : ( OP_LESS_THAN tp= typeParameter ( OP_COMMA tp= typeParameter )* OP_GREATER_THAN )? ;
	[GrammarRule("typeParameterList")]
	private ImmutableArray<TypeParameterSyntax> typeParameterList()
	{
		EnterRule_typeParameterList();
		EnterRule("typeParameterList", 17);
		TraceIn("typeParameterList", 17);
		ImmutableArray<TypeParameterSyntax> value = default(ImmutableArray<TypeParameterSyntax>);


		TypeParameterSyntax tp = default(TypeParameterSyntax);


		    var start = input.LT(1);
		    var typeParameters = new ImmutableArray<TypeParameterSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "typeParameterList");
		DebugLocation(273, 4);
		try
		{
			// Truss.g:278:5: ( ( OP_LESS_THAN tp= typeParameter ( OP_COMMA tp= typeParameter )* OP_GREATER_THAN )? )
			DebugEnterAlt(1);
			// Truss.g:279:9: ( OP_LESS_THAN tp= typeParameter ( OP_COMMA tp= typeParameter )* OP_GREATER_THAN )?
			{
			DebugLocation(279, 9);
			// Truss.g:279:9: ( OP_LESS_THAN tp= typeParameter ( OP_COMMA tp= typeParameter )* OP_GREATER_THAN )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_1 = input.LA(1);

			if ((LA21_1==OP_LESS_THAN))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:280:13: OP_LESS_THAN tp= typeParameter ( OP_COMMA tp= typeParameter )* OP_GREATER_THAN
				{
				DebugLocation(280, 13);
				Match(input,OP_LESS_THAN,Follow._OP_LESS_THAN_in_typeParameterList2055); if (state.failed) return value;
				DebugLocation(281, 15);
				PushFollow(Follow._typeParameter_in_typeParameterList2071);
				tp=typeParameter();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(282, 13);
				if (state.backtracking == 0)
				{
					 typeParameters.Add(tp); 
				}
				DebugLocation(283, 13);
				// Truss.g:283:13: ( OP_COMMA tp= typeParameter )*
				try { DebugEnterSubRule(20);
				while (true)
				{
					int alt20=2;
					try { DebugEnterDecision(20, false);
					int LA20_1 = input.LA(1);

					if ((LA20_1==OP_COMMA))
					{
						alt20 = 1;
					}


					} finally { DebugExitDecision(20); }
					switch ( alt20 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:284:17: OP_COMMA tp= typeParameter
						{
						DebugLocation(284, 17);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_typeParameterList2117); if (state.failed) return value;
						DebugLocation(285, 19);
						PushFollow(Follow._typeParameter_in_typeParameterList2137);
						tp=typeParameter();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(286, 17);
						if (state.backtracking == 0)
						{
							 typeParameters.Add(tp); 
						}

						}
						break;

					default:
						goto loop20;
					}
				}

				loop20:
					;

				} finally { DebugExitSubRule(20); }

				DebugLocation(288, 13);
				Match(input,OP_GREATER_THAN,Follow._OP_GREATER_THAN_in_typeParameterList2184); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(290, 9);
			if (state.backtracking == 0)
			{
				 value = typeParameters.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameterList", 17);
			LeaveRule("typeParameterList", 17);
			LeaveRule_typeParameterList();
		}
		DebugLocation(291, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameterList"); }
		return value;

	}
	// $ANTLR end "typeParameterList"

	partial void EnterRule_typeParameter();
	partial void LeaveRule_typeParameter();
	// $ANTLR start "typeParameter"
	// Truss.g:293:1: typeParameter returns [TypeParameterSyntax value] : all= attributeListList tpv= typeParameterVariance idn= identifierName ;
	[GrammarRule("typeParameter")]
	private TypeParameterSyntax typeParameter()
	{
		EnterRule_typeParameter();
		EnterRule("typeParameter", 18);
		TraceIn("typeParameter", 18);
		TypeParameterSyntax value = default(TypeParameterSyntax);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		Variance tpv = default(Variance);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeParameter");
		DebugLocation(293, 4);
		try
		{
			// Truss.g:297:5: (all= attributeListList tpv= typeParameterVariance idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:298:9: all= attributeListList tpv= typeParameterVariance idn= identifierName
			{
			DebugLocation(298, 12);
			PushFollow(Follow._attributeListList_in_typeParameter2241);
			all=attributeListList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(299, 12);
			PushFollow(Follow._typeParameterVariance_in_typeParameter2253);
			tpv=typeParameterVariance();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(300, 12);
			PushFollow(Follow._identifierName_in_typeParameter2265);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(301, 9);
			if (state.backtracking == 0)
			{
				 value = new TypeParameterSyntax(all, tpv, idn, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameter", 18);
			LeaveRule("typeParameter", 18);
			LeaveRule_typeParameter();
		}
		DebugLocation(302, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameter"); }
		return value;

	}
	// $ANTLR end "typeParameter"

	partial void EnterRule_typeParameterVariance();
	partial void LeaveRule_typeParameterVariance();
	// $ANTLR start "typeParameterVariance"
	// Truss.g:304:1: typeParameterVariance returns [Variance value] : ( KW_IN | KW_OUT |);
	[GrammarRule("typeParameterVariance")]
	private Variance typeParameterVariance()
	{
		EnterRule_typeParameterVariance();
		EnterRule("typeParameterVariance", 19);
		TraceIn("typeParameterVariance", 19);
		Variance value = default(Variance);


		try { DebugEnterRule(GrammarFileName, "typeParameterVariance");
		DebugLocation(304, 4);
		try
		{
			// Truss.g:305:5: ( KW_IN | KW_OUT |)
			int alt22=3;
			try { DebugEnterDecision(22, false);
			switch (input.LA(1))
			{
			case KW_IN:
				{
				alt22 = 1;
				}
				break;
			case KW_OUT:
				{
				alt22 = 2;
				}
				break;
			case IDENTIFIER:
			case KW_BOOL:
			case KW_BYTE:
			case KW_CHAR:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_LONG:
			case KW_OBJECT:
			case KW_SBYTE:
			case KW_SHORT:
			case KW_STRING:
			case KW_UINT:
			case KW_ULONG:
			case KW_USHORT:
			case KW_VOID:
				{
				alt22 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 22, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:305:7: KW_IN
				{
				DebugLocation(305, 7);
				Match(input,KW_IN,Follow._KW_IN_in_typeParameterVariance2296); if (state.failed) return value;
				DebugLocation(305, 13);
				if (state.backtracking == 0)
				{
					 value = Variance.In; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:306:7: KW_OUT
				{
				DebugLocation(306, 7);
				Match(input,KW_OUT,Follow._KW_OUT_in_typeParameterVariance2306); if (state.failed) return value;
				DebugLocation(306, 14);
				if (state.backtracking == 0)
				{
					 value = Variance.Out; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:307:7: 
				{
				DebugLocation(307, 7);
				if (state.backtracking == 0)
				{
					 value = Variance.None; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameterVariance", 19);
			LeaveRule("typeParameterVariance", 19);
			LeaveRule_typeParameterVariance();
		}
		DebugLocation(308, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameterVariance"); }
		return value;

	}
	// $ANTLR end "typeParameterVariance"

	partial void EnterRule_typeDeclaration();
	partial void LeaveRule_typeDeclaration();
	// $ANTLR start "typeDeclaration"
	// Truss.g:312:1: typeDeclaration returns [TypeDeclarationSyntax value] : ( KW_CLASS | KW_INTERFACE | KW_STRUCT ( OP_CARET )? ) idn= identifierName tpl= typeParameterList ( OP_COLON (t= typeSyntax ( OP_COMMA t= typeSyntax )* ) )? tpccl= typeParameterConstraintClauseList OP_BRACE_OPEN (md= memberDeclaration )* OP_BRACE_CLOSE ;
	[GrammarRule("typeDeclaration")]
	private TypeDeclarationSyntax typeDeclaration()
	{
		EnterRule_typeDeclaration();
		EnterRule("typeDeclaration", 20);
		TraceIn("typeDeclaration", 20);
		TypeDeclarationSyntax value = default(TypeDeclarationSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ImmutableArray<TypeParameterSyntax> tpl = default(ImmutableArray<TypeParameterSyntax>);
		TypeSyntax t = default(TypeSyntax);
		ImmutableArray<TypeParameterConstraintClauseSyntax> tpccl = default(ImmutableArray<TypeParameterConstraintClauseSyntax>);
		MemberDeclarationSyntax md = default(MemberDeclarationSyntax);


		    var start = input.LT(1);
		    TypeDeclarationType? type = null;
		    var baseTypes = new ImmutableArray<TypeSyntax>.Builder();
		    var memberDeclarations = new ImmutableArray<MemberDeclarationSyntax>.Builder();
		    bool tracked = false;

		try { DebugEnterRule(GrammarFileName, "typeDeclaration");
		DebugLocation(312, 4);
		try
		{
			// Truss.g:342:5: ( ( KW_CLASS | KW_INTERFACE | KW_STRUCT ( OP_CARET )? ) idn= identifierName tpl= typeParameterList ( OP_COLON (t= typeSyntax ( OP_COMMA t= typeSyntax )* ) )? tpccl= typeParameterConstraintClauseList OP_BRACE_OPEN (md= memberDeclaration )* OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:343:9: ( KW_CLASS | KW_INTERFACE | KW_STRUCT ( OP_CARET )? ) idn= identifierName tpl= typeParameterList ( OP_COLON (t= typeSyntax ( OP_COMMA t= typeSyntax )* ) )? tpccl= typeParameterConstraintClauseList OP_BRACE_OPEN (md= memberDeclaration )* OP_BRACE_CLOSE
			{
			DebugLocation(343, 9);
			// Truss.g:343:9: ( KW_CLASS | KW_INTERFACE | KW_STRUCT ( OP_CARET )? )
			int alt24=3;
			try { DebugEnterSubRule(24);
			try { DebugEnterDecision(24, false);
			switch (input.LA(1))
			{
			case KW_CLASS:
				{
				alt24 = 1;
				}
				break;
			case KW_INTERFACE:
				{
				alt24 = 2;
				}
				break;
			case KW_STRUCT:
				{
				alt24 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 24, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(24); }
			switch (alt24)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:343:11: KW_CLASS
				{
				DebugLocation(343, 11);
				Match(input,KW_CLASS,Follow._KW_CLASS_in_typeDeclaration2359); if (state.failed) return value;
				DebugLocation(343, 20);
				if (state.backtracking == 0)
				{
					 type = TypeDeclarationType.Class; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:344:11: KW_INTERFACE
				{
				DebugLocation(344, 11);
				Match(input,KW_INTERFACE,Follow._KW_INTERFACE_in_typeDeclaration2373); if (state.failed) return value;
				DebugLocation(344, 24);
				if (state.backtracking == 0)
				{
					 type = TypeDeclarationType.Interface; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:345:11: KW_STRUCT ( OP_CARET )?
				{
				DebugLocation(345, 11);
				Match(input,KW_STRUCT,Follow._KW_STRUCT_in_typeDeclaration2387); if (state.failed) return value;
				DebugLocation(345, 21);
				// Truss.g:345:21: ( OP_CARET )?
				int alt23=2;
				try { DebugEnterSubRule(23);
				try { DebugEnterDecision(23, false);
				int LA23_1 = input.LA(1);

				if ((LA23_1==OP_CARET))
				{
					alt23 = 1;
				}
				} finally { DebugExitDecision(23); }
				switch (alt23)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:345:23: OP_CARET
					{
					DebugLocation(345, 23);
					Match(input,OP_CARET,Follow._OP_CARET_in_typeDeclaration2391); if (state.failed) return value;
					DebugLocation(345, 32);
					if (state.backtracking == 0)
					{
						 tracked = true; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(23); }

				DebugLocation(345, 55);
				if (state.backtracking == 0)
				{
					 type = TypeDeclarationType.Struct; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(24); }

			DebugLocation(347, 12);
			PushFollow(Follow._identifierName_in_typeDeclaration2420);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(348, 12);
			PushFollow(Follow._typeParameterList_in_typeDeclaration2432);
			tpl=typeParameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(349, 9);
			// Truss.g:349:9: ( OP_COLON (t= typeSyntax ( OP_COMMA t= typeSyntax )* ) )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_1 = input.LA(1);

			if ((LA26_1==OP_COLON))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:350:13: OP_COLON (t= typeSyntax ( OP_COMMA t= typeSyntax )* )
				{
				DebugLocation(350, 13);
				Match(input,OP_COLON,Follow._OP_COLON_in_typeDeclaration2456); if (state.failed) return value;
				DebugLocation(351, 13);
				// Truss.g:351:13: (t= typeSyntax ( OP_COMMA t= typeSyntax )* )
				DebugEnterAlt(1);
				// Truss.g:352:17: t= typeSyntax ( OP_COMMA t= typeSyntax )*
				{
				DebugLocation(352, 18);
				PushFollow(Follow._typeSyntax_in_typeDeclaration2490);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(353, 17);
				if (state.backtracking == 0)
				{
					 baseTypes.Add(t); 
				}
				DebugLocation(354, 17);
				// Truss.g:354:17: ( OP_COMMA t= typeSyntax )*
				try { DebugEnterSubRule(25);
				while (true)
				{
					int alt25=2;
					try { DebugEnterDecision(25, false);
					int LA25_1 = input.LA(1);

					if ((LA25_1==OP_COMMA))
					{
						alt25 = 1;
					}


					} finally { DebugExitDecision(25); }
					switch ( alt25 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:355:21: OP_COMMA t= typeSyntax
						{
						DebugLocation(355, 21);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_typeDeclaration2548); if (state.failed) return value;
						DebugLocation(356, 22);
						PushFollow(Follow._typeSyntax_in_typeDeclaration2572);
						t=typeSyntax();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(357, 21);
						if (state.backtracking == 0)
						{
							 baseTypes.Add(t); 
						}

						}
						break;

					default:
						goto loop25;
					}
				}

				loop25:
					;

				} finally { DebugExitSubRule(25); }


				}


				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(361, 14);
			PushFollow(Follow._typeParameterConstraintClauseList_in_typeDeclaration2650);
			tpccl=typeParameterConstraintClauseList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(362, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_typeDeclaration2660); if (state.failed) return value;
			DebugLocation(363, 9);
			// Truss.g:363:9: (md= memberDeclaration )*
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_1 = input.LA(1);

				if ((LA27_1==IDENTIFIER||LA27_1==KW_ABSTRACT||LA27_1==KW_ASYNC||LA27_1==KW_BOOL||LA27_1==KW_BYTE||(LA27_1>=KW_CHAR && LA27_1<=KW_CONSUMES)||LA27_1==KW_DECIMAL||LA27_1==KW_DELEGATE||LA27_1==KW_DOUBLE||(LA27_1>=KW_ENUM && LA27_1<=KW_EXTERN)||LA27_1==KW_FLOAT||LA27_1==KW_IMPLICIT||(LA27_1>=KW_IN && LA27_1<=KW_INTERNAL)||LA27_1==KW_LONG||LA27_1==KW_NEW||LA27_1==KW_OBJECT||(LA27_1>=KW_OUT && LA27_1<=KW_REF)||(LA27_1>=KW_SBYTE && LA27_1<=KW_SHORT)||(LA27_1>=KW_STATIC && LA27_1<=KW_STRUCT)||LA27_1==KW_THIS||(LA27_1>=KW_UINT && LA27_1<=KW_USHORT)||(LA27_1>=KW_VAR && LA27_1<=KW_VOLATILE)||LA27_1==OP_BRACKET_OPEN||LA27_1==OP_TILDE))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch ( alt27 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:364:13: md= memberDeclaration
					{
					DebugLocation(364, 15);
					PushFollow(Follow._memberDeclaration_in_typeDeclaration2686);
					md=memberDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(365, 13);
					if (state.backtracking == 0)
					{
						 memberDeclarations.Add(md); 
					}

					}
					break;

				default:
					goto loop27;
				}
			}

			loop27:
				;

			} finally { DebugExitSubRule(27); }

			DebugLocation(367, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_typeDeclaration2721); if (state.failed) return value;

			}

			if (state.backtracking == 0)
			{

				    ImmutableArray<Modifier> modifiers = declarationPrefix_stack.Peek().modifiers;
				    
				    if (tracked) {
				        var builder = new ImmutableArray<Modifier>.Builder();
				        builder.AddRange(modifiers);
				        builder.Add(Modifier.Tracked);
				        modifiers = builder.Build();
				    }

				    value = new TypeDeclarationSyntax(
				        declarationPrefix_stack.Peek().attributes,
				        modifiers,
				        idn,
				        type.Value,
				        tpl,
				        tpccl,
				        memberDeclarations.Build(),
				        baseTypes.Build(),
				        Span(start)
				    );

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeDeclaration", 20);
			LeaveRule("typeDeclaration", 20);
			LeaveRule_typeDeclaration();
		}
		DebugLocation(368, 4);
		} finally { DebugExitRule(GrammarFileName, "typeDeclaration"); }
		return value;

	}
	// $ANTLR end "typeDeclaration"

	partial void EnterRule_typeParameterConstraintClauseList();
	partial void LeaveRule_typeParameterConstraintClauseList();
	// $ANTLR start "typeParameterConstraintClauseList"
	// Truss.g:370:1: typeParameterConstraintClauseList returns [ImmutableArray<TypeParameterConstraintClauseSyntax> value] : (tpc= typeParameterConstraintClause )* ;
	[GrammarRule("typeParameterConstraintClauseList")]
	private ImmutableArray<TypeParameterConstraintClauseSyntax> typeParameterConstraintClauseList()
	{
		EnterRule_typeParameterConstraintClauseList();
		EnterRule("typeParameterConstraintClauseList", 21);
		TraceIn("typeParameterConstraintClauseList", 21);
		ImmutableArray<TypeParameterConstraintClauseSyntax> value = default(ImmutableArray<TypeParameterConstraintClauseSyntax>);


		TypeParameterConstraintClauseSyntax tpc = default(TypeParameterConstraintClauseSyntax);


		    var builder = new ImmutableArray<TypeParameterConstraintClauseSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "typeParameterConstraintClauseList");
		DebugLocation(370, 4);
		try
		{
			// Truss.g:374:5: ( (tpc= typeParameterConstraintClause )* )
			DebugEnterAlt(1);
			// Truss.g:375:9: (tpc= typeParameterConstraintClause )*
			{
			DebugLocation(375, 9);
			// Truss.g:375:9: (tpc= typeParameterConstraintClause )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_1 = input.LA(1);

				if ((LA28_1==KW_WHERE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:376:13: tpc= typeParameterConstraintClause
					{
					DebugLocation(376, 16);
					PushFollow(Follow._typeParameterConstraintClause_in_typeParameterConstraintClauseList2771);
					tpc=typeParameterConstraintClause();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(377, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(tpc); 
					}

					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(380, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameterConstraintClauseList", 21);
			LeaveRule("typeParameterConstraintClauseList", 21);
			LeaveRule_typeParameterConstraintClauseList();
		}
		DebugLocation(381, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameterConstraintClauseList"); }
		return value;

	}
	// $ANTLR end "typeParameterConstraintClauseList"

	partial void EnterRule_typeParameterConstraintClause();
	partial void LeaveRule_typeParameterConstraintClause();
	// $ANTLR start "typeParameterConstraintClause"
	// Truss.g:383:1: typeParameterConstraintClause returns [TypeParameterConstraintClauseSyntax value] : KW_WHERE idn= identifierName OP_COLON tpc= typeParameterConstraint ( OP_COMMA tpc= typeParameterConstraint )* ;
	[GrammarRule("typeParameterConstraintClause")]
	private TypeParameterConstraintClauseSyntax typeParameterConstraintClause()
	{
		EnterRule_typeParameterConstraintClause();
		EnterRule("typeParameterConstraintClause", 22);
		TraceIn("typeParameterConstraintClause", 22);
		TypeParameterConstraintClauseSyntax value = default(TypeParameterConstraintClauseSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		TypeParameterConstraintSyntax tpc = default(TypeParameterConstraintSyntax);


		    var constraints = new ImmutableArray<TypeParameterConstraintSyntax>.Builder();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeParameterConstraintClause");
		DebugLocation(383, 4);
		try
		{
			// Truss.g:388:5: ( KW_WHERE idn= identifierName OP_COLON tpc= typeParameterConstraint ( OP_COMMA tpc= typeParameterConstraint )* )
			DebugEnterAlt(1);
			// Truss.g:389:9: KW_WHERE idn= identifierName OP_COLON tpc= typeParameterConstraint ( OP_COMMA tpc= typeParameterConstraint )*
			{
			DebugLocation(389, 9);
			Match(input,KW_WHERE,Follow._KW_WHERE_in_typeParameterConstraintClause2853); if (state.failed) return value;
			DebugLocation(390, 12);
			PushFollow(Follow._identifierName_in_typeParameterConstraintClause2865);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(391, 9);
			Match(input,OP_COLON,Follow._OP_COLON_in_typeParameterConstraintClause2875); if (state.failed) return value;
			DebugLocation(392, 12);
			PushFollow(Follow._typeParameterConstraint_in_typeParameterConstraintClause2887);
			tpc=typeParameterConstraint();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(393, 9);
			if (state.backtracking == 0)
			{
				 constraints.Add(tpc); 
			}
			DebugLocation(394, 9);
			// Truss.g:394:9: ( OP_COMMA tpc= typeParameterConstraint )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_1 = input.LA(1);

				if ((LA29_1==OP_COMMA))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:395:13: OP_COMMA tpc= typeParameterConstraint
					{
					DebugLocation(395, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_typeParameterConstraintClause2921); if (state.failed) return value;
					DebugLocation(396, 16);
					PushFollow(Follow._typeParameterConstraint_in_typeParameterConstraintClause2937);
					tpc=typeParameterConstraint();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(397, 13);
					if (state.backtracking == 0)
					{
						 constraints.Add(tpc); 
					}

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(399, 9);
			if (state.backtracking == 0)
			{
				 value = new TypeParameterConstraintClauseSyntax(idn, constraints.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameterConstraintClause", 22);
			LeaveRule("typeParameterConstraintClause", 22);
			LeaveRule_typeParameterConstraintClause();
		}
		DebugLocation(400, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameterConstraintClause"); }
		return value;

	}
	// $ANTLR end "typeParameterConstraintClause"

	partial void EnterRule_typeParameterConstraint();
	partial void LeaveRule_typeParameterConstraint();
	// $ANTLR start "typeParameterConstraint"
	// Truss.g:402:1: typeParameterConstraint returns [TypeParameterConstraintSyntax value] : ( KW_NEW OP_PAREN_OPEN OP_PAREN_CLOSE | (n= nullable | KW_CLASS n= nullable | KW_STRUCT (n= nullable | OP_CARET ) ) |t= typeSyntax );
	[GrammarRule("typeParameterConstraint")]
	private TypeParameterConstraintSyntax typeParameterConstraint()
	{
		EnterRule_typeParameterConstraint();
		EnterRule("typeParameterConstraint", 23);
		TraceIn("typeParameterConstraint", 23);
		TypeParameterConstraintSyntax value = default(TypeParameterConstraintSyntax);


		Nullability n = default(Nullability);
		TypeSyntax t = default(TypeSyntax);


		    var start = input.LT(1);
		    TypeFamily? family = null;

		try { DebugEnterRule(GrammarFileName, "typeParameterConstraint");
		DebugLocation(402, 4);
		try
		{
			// Truss.g:407:5: ( KW_NEW OP_PAREN_OPEN OP_PAREN_CLOSE | (n= nullable | KW_CLASS n= nullable | KW_STRUCT (n= nullable | OP_CARET ) ) |t= typeSyntax )
			int alt32=3;
			try { DebugEnterDecision(32, false);
			switch (input.LA(1))
			{
			case KW_NEW:
				{
				alt32 = 1;
				}
				break;
			case KW_CLASS:
			case KW_STRUCT:
			case OP_EXCLAMATION:
			case OP_QUESTION:
				{
				alt32 = 2;
				}
				break;
			case IDENTIFIER:
			case KW_BOOL:
			case KW_BYTE:
			case KW_CHAR:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_LONG:
			case KW_OBJECT:
			case KW_SBYTE:
			case KW_SHORT:
			case KW_STRING:
			case KW_UINT:
			case KW_ULONG:
			case KW_USHORT:
			case KW_VAR:
			case KW_VOID:
				{
				alt32 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 32, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:408:9: KW_NEW OP_PAREN_OPEN OP_PAREN_CLOSE
				{
				DebugLocation(408, 9);
				Match(input,KW_NEW,Follow._KW_NEW_in_typeParameterConstraint3006); if (state.failed) return value;
				DebugLocation(408, 16);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_typeParameterConstraint3008); if (state.failed) return value;
				DebugLocation(408, 30);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_typeParameterConstraint3010); if (state.failed) return value;
				DebugLocation(409, 9);
				if (state.backtracking == 0)
				{
					 value = new ConstructorConstraintSyntax(Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:411:9: (n= nullable | KW_CLASS n= nullable | KW_STRUCT (n= nullable | OP_CARET ) )
				{
				DebugLocation(411, 9);
				// Truss.g:411:9: (n= nullable | KW_CLASS n= nullable | KW_STRUCT (n= nullable | OP_CARET ) )
				int alt31=3;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				switch (input.LA(1))
				{
				case OP_EXCLAMATION:
				case OP_QUESTION:
					{
					alt31 = 1;
					}
					break;
				case KW_CLASS:
					{
					alt31 = 2;
					}
					break;
				case KW_STRUCT:
					{
					alt31 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 31, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:412:13: n= nullable
					{
					DebugLocation(412, 14);
					PushFollow(Follow._nullable_in_typeParameterConstraint3052);
					n=nullable();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(412, 24);
					if (state.backtracking == 0)
					{
						 family = TypeFamily.Any; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:414:13: KW_CLASS n= nullable
					{
					DebugLocation(414, 13);
					Match(input,KW_CLASS,Follow._KW_CLASS_in_typeParameterConstraint3078); if (state.failed) return value;
					DebugLocation(414, 23);
					PushFollow(Follow._nullable_in_typeParameterConstraint3082);
					n=nullable();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(414, 33);
					if (state.backtracking == 0)
					{
						 family = TypeFamily.Class; 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Truss.g:416:13: KW_STRUCT (n= nullable | OP_CARET )
					{
					DebugLocation(416, 13);
					Match(input,KW_STRUCT,Follow._KW_STRUCT_in_typeParameterConstraint3108); if (state.failed) return value;
					DebugLocation(417, 13);
					// Truss.g:417:13: (n= nullable | OP_CARET )
					int alt30=2;
					try { DebugEnterSubRule(30);
					try { DebugEnterDecision(30, false);
					int LA30_1 = input.LA(1);

					if ((LA30_1==OP_EXCLAMATION||LA30_1==OP_QUESTION))
					{
						alt30 = 1;
					}
					else if ((LA30_1==OP_CARET))
					{
						alt30 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 30, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(30); }
					switch (alt30)
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:417:15: n= nullable
						{
						DebugLocation(417, 16);
						PushFollow(Follow._nullable_in_typeParameterConstraint3126);
						n=nullable();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(417, 26);
						if (state.backtracking == 0)
						{
							 family = TypeFamily.Struct; 
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Truss.g:418:15: OP_CARET
						{
						DebugLocation(418, 15);
						Match(input,OP_CARET,Follow._OP_CARET_in_typeParameterConstraint3144); if (state.failed) return value;
						DebugLocation(418, 24);
						if (state.backtracking == 0)
						{
							 family = TypeFamily.Tracked; 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(30); }


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(421, 9);
				if (state.backtracking == 0)
				{
					 value = new TypeFamilyConstraintSyntax(family.Value, family == TypeFamily.Tracked ? (Nullability?)null : n, Span(start)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:423:9: t= typeSyntax
				{
				DebugLocation(423, 10);
				PushFollow(Follow._typeSyntax_in_typeParameterConstraint3198);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(424, 9);
				if (state.backtracking == 0)
				{
					 value = new TypeConstraintSyntax(t, Span(start)); 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeParameterConstraint", 23);
			LeaveRule("typeParameterConstraint", 23);
			LeaveRule_typeParameterConstraint();
		}
		DebugLocation(425, 4);
		} finally { DebugExitRule(GrammarFileName, "typeParameterConstraint"); }
		return value;

	}
	// $ANTLR end "typeParameterConstraint"

	partial void EnterRule_nullable();
	partial void LeaveRule_nullable();
	// $ANTLR start "nullable"
	// Truss.g:427:1: nullable returns [Nullability value] : ( OP_QUESTION | OP_EXCLAMATION );
	[GrammarRule("nullable")]
	private Nullability nullable()
	{
		EnterRule_nullable();
		EnterRule("nullable", 24);
		TraceIn("nullable", 24);
		Nullability value = default(Nullability);


		try { DebugEnterRule(GrammarFileName, "nullable");
		DebugLocation(427, 4);
		try
		{
			// Truss.g:428:5: ( OP_QUESTION | OP_EXCLAMATION )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_1 = input.LA(1);

			if ((LA33_1==OP_QUESTION))
			{
				alt33 = 1;
			}
			else if ((LA33_1==OP_EXCLAMATION))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:428:7: OP_QUESTION
				{
				DebugLocation(428, 7);
				Match(input,OP_QUESTION,Follow._OP_QUESTION_in_nullable3229); if (state.failed) return value;
				DebugLocation(428, 19);
				if (state.backtracking == 0)
				{
					 value = Nullability.Nullable; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:429:7: OP_EXCLAMATION
				{
				DebugLocation(429, 7);
				Match(input,OP_EXCLAMATION,Follow._OP_EXCLAMATION_in_nullable3239); if (state.failed) return value;
				DebugLocation(429, 22);
				if (state.backtracking == 0)
				{
					 value = Nullability.NotNullable; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nullable", 24);
			LeaveRule("nullable", 24);
			LeaveRule_nullable();
		}
		DebugLocation(430, 4);
		} finally { DebugExitRule(GrammarFileName, "nullable"); }
		return value;

	}
	// $ANTLR end "nullable"

	partial void EnterRule_modifiers();
	partial void LeaveRule_modifiers();
	// $ANTLR start "modifiers"
	// Truss.g:432:1: modifiers returns [ImmutableArray<Modifier> value] : (m= modifier )* ;
	[GrammarRule("modifiers")]
	private ImmutableArray<Modifier> modifiers()
	{
		EnterRule_modifiers();
		EnterRule("modifiers", 25);
		TraceIn("modifiers", 25);
		ImmutableArray<Modifier> value = default(ImmutableArray<Modifier>);


		Modifier m = default(Modifier);


		    var builder = new ImmutableArray<Modifier>.Builder();

		try { DebugEnterRule(GrammarFileName, "modifiers");
		DebugLocation(432, 4);
		try
		{
			// Truss.g:436:5: ( (m= modifier )* )
			DebugEnterAlt(1);
			// Truss.g:437:5: (m= modifier )*
			{
			DebugLocation(437, 5);
			// Truss.g:437:5: (m= modifier )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_1 = input.LA(1);

				if ((LA34_1==KW_ABSTRACT||LA34_1==KW_ASYNC||LA34_1==KW_EXTERN||LA34_1==KW_INTERNAL||LA34_1==KW_NEW||LA34_1==KW_OVERRIDE||(LA34_1>=KW_PARTIAL && LA34_1<=KW_READONLY)||LA34_1==KW_SEALED||LA34_1==KW_STATIC||LA34_1==KW_VIRTUAL||LA34_1==KW_VOLATILE))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:438:9: m= modifier
					{
					DebugLocation(438, 10);
					PushFollow(Follow._modifier_in_modifiers3283);
					m=modifier();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(439, 9);
					if (state.backtracking == 0)
					{
						 builder.Add(m); 
					}

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(441, 5);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifiers", 25);
			LeaveRule("modifiers", 25);
			LeaveRule_modifiers();
		}
		DebugLocation(442, 4);
		} finally { DebugExitRule(GrammarFileName, "modifiers"); }
		return value;

	}
	// $ANTLR end "modifiers"

	partial void EnterRule_modifier();
	partial void LeaveRule_modifier();
	// $ANTLR start "modifier"
	// Truss.g:444:1: modifier returns [Modifier value] : ( KW_ABSTRACT | KW_ASYNC | KW_EXTERN | KW_INTERNAL | KW_NEW | KW_OVERRIDE | KW_PARTIAL | KW_PRIVATE | KW_PROTECTED | KW_PUBLIC | KW_READONLY | KW_SEALED | KW_STATIC | KW_VIRTUAL | KW_VOLATILE );
	[GrammarRule("modifier")]
	private Modifier modifier()
	{
		EnterRule_modifier();
		EnterRule("modifier", 26);
		TraceIn("modifier", 26);
		Modifier value = default(Modifier);


		try { DebugEnterRule(GrammarFileName, "modifier");
		DebugLocation(444, 4);
		try
		{
			// Truss.g:445:5: ( KW_ABSTRACT | KW_ASYNC | KW_EXTERN | KW_INTERNAL | KW_NEW | KW_OVERRIDE | KW_PARTIAL | KW_PRIVATE | KW_PROTECTED | KW_PUBLIC | KW_READONLY | KW_SEALED | KW_STATIC | KW_VIRTUAL | KW_VOLATILE )
			int alt35=15;
			try { DebugEnterDecision(35, false);
			switch (input.LA(1))
			{
			case KW_ABSTRACT:
				{
				alt35 = 1;
				}
				break;
			case KW_ASYNC:
				{
				alt35 = 2;
				}
				break;
			case KW_EXTERN:
				{
				alt35 = 3;
				}
				break;
			case KW_INTERNAL:
				{
				alt35 = 4;
				}
				break;
			case KW_NEW:
				{
				alt35 = 5;
				}
				break;
			case KW_OVERRIDE:
				{
				alt35 = 6;
				}
				break;
			case KW_PARTIAL:
				{
				alt35 = 7;
				}
				break;
			case KW_PRIVATE:
				{
				alt35 = 8;
				}
				break;
			case KW_PROTECTED:
				{
				alt35 = 9;
				}
				break;
			case KW_PUBLIC:
				{
				alt35 = 10;
				}
				break;
			case KW_READONLY:
				{
				alt35 = 11;
				}
				break;
			case KW_SEALED:
				{
				alt35 = 12;
				}
				break;
			case KW_STATIC:
				{
				alt35 = 13;
				}
				break;
			case KW_VIRTUAL:
				{
				alt35 = 14;
				}
				break;
			case KW_VOLATILE:
				{
				alt35 = 15;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 35, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:445:7: KW_ABSTRACT
				{
				DebugLocation(445, 7);
				Match(input,KW_ABSTRACT,Follow._KW_ABSTRACT_in_modifier3327); if (state.failed) return value;
				DebugLocation(445, 19);
				if (state.backtracking == 0)
				{
					 value = Modifier.Abstract; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:446:7: KW_ASYNC
				{
				DebugLocation(446, 7);
				Match(input,KW_ASYNC,Follow._KW_ASYNC_in_modifier3337); if (state.failed) return value;
				DebugLocation(446, 16);
				if (state.backtracking == 0)
				{
					 value = Modifier.Async; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:447:7: KW_EXTERN
				{
				DebugLocation(447, 7);
				Match(input,KW_EXTERN,Follow._KW_EXTERN_in_modifier3347); if (state.failed) return value;
				DebugLocation(447, 17);
				if (state.backtracking == 0)
				{
					 value = Modifier.Extern; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:448:7: KW_INTERNAL
				{
				DebugLocation(448, 7);
				Match(input,KW_INTERNAL,Follow._KW_INTERNAL_in_modifier3357); if (state.failed) return value;
				DebugLocation(448, 19);
				if (state.backtracking == 0)
				{
					 value = Modifier.Internal; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:449:7: KW_NEW
				{
				DebugLocation(449, 7);
				Match(input,KW_NEW,Follow._KW_NEW_in_modifier3367); if (state.failed) return value;
				DebugLocation(449, 14);
				if (state.backtracking == 0)
				{
					 value = Modifier.New; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:450:7: KW_OVERRIDE
				{
				DebugLocation(450, 7);
				Match(input,KW_OVERRIDE,Follow._KW_OVERRIDE_in_modifier3377); if (state.failed) return value;
				DebugLocation(450, 19);
				if (state.backtracking == 0)
				{
					 value = Modifier.Override; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:451:7: KW_PARTIAL
				{
				DebugLocation(451, 7);
				Match(input,KW_PARTIAL,Follow._KW_PARTIAL_in_modifier3387); if (state.failed) return value;
				DebugLocation(451, 18);
				if (state.backtracking == 0)
				{
					 value = Modifier.Partial; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:452:7: KW_PRIVATE
				{
				DebugLocation(452, 7);
				Match(input,KW_PRIVATE,Follow._KW_PRIVATE_in_modifier3397); if (state.failed) return value;
				DebugLocation(452, 18);
				if (state.backtracking == 0)
				{
					 value = Modifier.Private; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:453:7: KW_PROTECTED
				{
				DebugLocation(453, 7);
				Match(input,KW_PROTECTED,Follow._KW_PROTECTED_in_modifier3407); if (state.failed) return value;
				DebugLocation(453, 20);
				if (state.backtracking == 0)
				{
					 value = Modifier.Protected; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Truss.g:454:7: KW_PUBLIC
				{
				DebugLocation(454, 7);
				Match(input,KW_PUBLIC,Follow._KW_PUBLIC_in_modifier3417); if (state.failed) return value;
				DebugLocation(454, 17);
				if (state.backtracking == 0)
				{
					 value = Modifier.Public; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Truss.g:455:7: KW_READONLY
				{
				DebugLocation(455, 7);
				Match(input,KW_READONLY,Follow._KW_READONLY_in_modifier3427); if (state.failed) return value;
				DebugLocation(455, 19);
				if (state.backtracking == 0)
				{
					 value = Modifier.Readonly; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Truss.g:456:7: KW_SEALED
				{
				DebugLocation(456, 7);
				Match(input,KW_SEALED,Follow._KW_SEALED_in_modifier3437); if (state.failed) return value;
				DebugLocation(456, 17);
				if (state.backtracking == 0)
				{
					 value = Modifier.Sealed; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Truss.g:457:7: KW_STATIC
				{
				DebugLocation(457, 7);
				Match(input,KW_STATIC,Follow._KW_STATIC_in_modifier3447); if (state.failed) return value;
				DebugLocation(457, 17);
				if (state.backtracking == 0)
				{
					 value = Modifier.Static; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Truss.g:458:7: KW_VIRTUAL
				{
				DebugLocation(458, 7);
				Match(input,KW_VIRTUAL,Follow._KW_VIRTUAL_in_modifier3457); if (state.failed) return value;
				DebugLocation(458, 18);
				if (state.backtracking == 0)
				{
					 value = Modifier.Virtual; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Truss.g:459:7: KW_VOLATILE
				{
				DebugLocation(459, 7);
				Match(input,KW_VOLATILE,Follow._KW_VOLATILE_in_modifier3467); if (state.failed) return value;
				DebugLocation(459, 19);
				if (state.backtracking == 0)
				{
					 value = Modifier.Volatile; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("modifier", 26);
			LeaveRule("modifier", 26);
			LeaveRule_modifier();
		}
		DebugLocation(460, 4);
		} finally { DebugExitRule(GrammarFileName, "modifier"); }
		return value;

	}
	// $ANTLR end "modifier"

	partial void EnterRule_enumDeclaration();
	partial void LeaveRule_enumDeclaration();
	// $ANTLR start "enumDeclaration"
	// Truss.g:464:1: enumDeclaration returns [EnumDeclarationSyntax value] : KW_ENUM idn= identifierName ( OP_COLON t= typeSyntax )? OP_BRACE_OPEN (emd= enumMemberDeclaration ( OP_COMMA emd= enumMemberDeclaration )* ( OP_COMMA )? )? OP_BRACE_CLOSE ;
	[GrammarRule("enumDeclaration")]
	private EnumDeclarationSyntax enumDeclaration()
	{
		EnterRule_enumDeclaration();
		EnterRule("enumDeclaration", 27);
		TraceIn("enumDeclaration", 27);
		EnumDeclarationSyntax value = default(EnumDeclarationSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		TypeSyntax t = default(TypeSyntax);
		EnumMemberDeclarationSyntax emd = default(EnumMemberDeclarationSyntax);


		    var start = input.LT(1);
		    var members = new ImmutableArray<EnumMemberDeclarationSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "enumDeclaration");
		DebugLocation(464, 4);
		try
		{
			// Truss.g:469:5: ( KW_ENUM idn= identifierName ( OP_COLON t= typeSyntax )? OP_BRACE_OPEN (emd= enumMemberDeclaration ( OP_COMMA emd= enumMemberDeclaration )* ( OP_COMMA )? )? OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:470:9: KW_ENUM idn= identifierName ( OP_COLON t= typeSyntax )? OP_BRACE_OPEN (emd= enumMemberDeclaration ( OP_COMMA emd= enumMemberDeclaration )* ( OP_COMMA )? )? OP_BRACE_CLOSE
			{
			DebugLocation(470, 9);
			Match(input,KW_ENUM,Follow._KW_ENUM_in_enumDeclaration3505); if (state.failed) return value;
			DebugLocation(471, 12);
			PushFollow(Follow._identifierName_in_enumDeclaration3517);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(472, 9);
			// Truss.g:472:9: ( OP_COLON t= typeSyntax )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_1 = input.LA(1);

			if ((LA36_1==OP_COLON))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:473:13: OP_COLON t= typeSyntax
				{
				DebugLocation(473, 13);
				Match(input,OP_COLON,Follow._OP_COLON_in_enumDeclaration3541); if (state.failed) return value;
				DebugLocation(474, 14);
				PushFollow(Follow._typeSyntax_in_enumDeclaration3557);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(476, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_enumDeclaration3578); if (state.failed) return value;
			DebugLocation(477, 9);
			// Truss.g:477:9: (emd= enumMemberDeclaration ( OP_COMMA emd= enumMemberDeclaration )* ( OP_COMMA )? )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_1 = input.LA(1);

			if ((LA39_1==IDENTIFIER||LA39_1==KW_ABSTRACT||LA39_1==KW_ASYNC||LA39_1==KW_BOOL||LA39_1==KW_BYTE||(LA39_1>=KW_CHAR && LA39_1<=KW_CONSUMES)||LA39_1==KW_DECIMAL||LA39_1==KW_DELEGATE||LA39_1==KW_DOUBLE||(LA39_1>=KW_ENUM && LA39_1<=KW_EXTERN)||LA39_1==KW_FLOAT||LA39_1==KW_IMPLICIT||(LA39_1>=KW_IN && LA39_1<=KW_INTERNAL)||LA39_1==KW_LONG||LA39_1==KW_NEW||LA39_1==KW_OBJECT||(LA39_1>=KW_OUT && LA39_1<=KW_REF)||(LA39_1>=KW_SBYTE && LA39_1<=KW_SHORT)||(LA39_1>=KW_STATIC && LA39_1<=KW_STRUCT)||LA39_1==KW_THIS||(LA39_1>=KW_UINT && LA39_1<=KW_USHORT)||(LA39_1>=KW_VAR && LA39_1<=KW_VOLATILE)||LA39_1==OP_BRACKET_OPEN||LA39_1==OP_TILDE))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:478:13: emd= enumMemberDeclaration ( OP_COMMA emd= enumMemberDeclaration )* ( OP_COMMA )?
				{
				DebugLocation(478, 16);
				PushFollow(Follow._enumMemberDeclaration_in_enumDeclaration3604);
				emd=enumMemberDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(479, 13);
				if (state.backtracking == 0)
				{
					 members.Add(emd); 
				}
				DebugLocation(480, 13);
				// Truss.g:480:13: ( OP_COMMA emd= enumMemberDeclaration )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_1 = input.LA(1);

					if ((LA37_1==OP_COMMA))
					{
						int LA37_2 = input.LA(2);

						if ((LA37_2==IDENTIFIER||LA37_2==OP_BRACKET_OPEN))
						{
							alt37 = 1;
						}


					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:481:17: OP_COMMA emd= enumMemberDeclaration
						{
						DebugLocation(481, 17);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_enumDeclaration3650); if (state.failed) return value;
						DebugLocation(482, 20);
						PushFollow(Follow._enumMemberDeclaration_in_enumDeclaration3670);
						emd=enumMemberDeclaration();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(483, 17);
						if (state.backtracking == 0)
						{
							 members.Add(emd); 
						}

						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(485, 13);
				// Truss.g:485:13: ( OP_COMMA )?
				int alt38=2;
				try { DebugEnterSubRule(38);
				try { DebugEnterDecision(38, false);
				int LA38_1 = input.LA(1);

				if ((LA38_1==OP_COMMA))
				{
					alt38 = 1;
				}
				} finally { DebugExitDecision(38); }
				switch (alt38)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:485:13: OP_COMMA
					{
					DebugLocation(485, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_enumDeclaration3717); if (state.failed) return value;

					}
					break;

				}
				} finally { DebugExitSubRule(38); }


				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(487, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_enumDeclaration3739); if (state.failed) return value;
			DebugLocation(488, 9);
			if (state.backtracking == 0)
			{

				            value = new EnumDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                idn,
				                members.Build(),
				                t == null ? ImmutableArray<TypeSyntax>.Empty : ImmutableArray<TypeSyntax>.Create(t),
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumDeclaration", 27);
			LeaveRule("enumDeclaration", 27);
			LeaveRule_enumDeclaration();
		}
		DebugLocation(498, 4);
		} finally { DebugExitRule(GrammarFileName, "enumDeclaration"); }
		return value;

	}
	// $ANTLR end "enumDeclaration"

	partial void EnterRule_enumMemberDeclaration();
	partial void LeaveRule_enumMemberDeclaration();
	// $ANTLR start "enumMemberDeclaration"
	// Truss.g:500:1: enumMemberDeclaration returns [EnumMemberDeclarationSyntax value] : all= attributeListList idn= identifierName ( OP_EQUALS e= expression )? ;
	[GrammarRule("enumMemberDeclaration")]
	private EnumMemberDeclarationSyntax enumMemberDeclaration()
	{
		EnterRule_enumMemberDeclaration();
		EnterRule("enumMemberDeclaration", 28);
		TraceIn("enumMemberDeclaration", 28);
		EnumMemberDeclarationSyntax value = default(EnumMemberDeclarationSyntax);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "enumMemberDeclaration");
		DebugLocation(500, 4);
		try
		{
			// Truss.g:504:5: (all= attributeListList idn= identifierName ( OP_EQUALS e= expression )? )
			DebugEnterAlt(1);
			// Truss.g:505:9: all= attributeListList idn= identifierName ( OP_EQUALS e= expression )?
			{
			DebugLocation(505, 12);
			PushFollow(Follow._attributeListList_in_enumMemberDeclaration3785);
			all=attributeListList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(506, 12);
			PushFollow(Follow._identifierName_in_enumMemberDeclaration3797);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(507, 9);
			// Truss.g:507:9: ( OP_EQUALS e= expression )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_1 = input.LA(1);

			if ((LA40_1==OP_EQUALS))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:508:13: OP_EQUALS e= expression
				{
				DebugLocation(508, 13);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_enumMemberDeclaration3821); if (state.failed) return value;
				DebugLocation(509, 14);
				PushFollow(Follow._expression_in_enumMemberDeclaration3837);
				e=expression();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(511, 9);
			if (state.backtracking == 0)
			{
				 value = new EnumMemberDeclarationSyntax(all, idn, e, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("enumMemberDeclaration", 28);
			LeaveRule("enumMemberDeclaration", 28);
			LeaveRule_enumMemberDeclaration();
		}
		DebugLocation(512, 4);
		} finally { DebugExitRule(GrammarFileName, "enumMemberDeclaration"); }
		return value;

	}
	// $ANTLR end "enumMemberDeclaration"

	partial void EnterRule_memberDeclaration();
	partial void LeaveRule_memberDeclaration();
	// $ANTLR start "memberDeclaration"
	// Truss.g:516:1: memberDeclaration returns [MemberDeclarationSyntax value] : all= attributeListList m= modifiers ( ( constructorDeclarationHeadScan )=>e2= constructorDeclaration |t= typeSyntax e1= typedMemberDeclaration |e3= conversionOperatorDeclaration |e4= destructorDeclaration |e5= eventDeclaration |e7= delegateDeclaration |e8= typeDeclaration |e9= enumDeclaration ) ;
	[GrammarRule("memberDeclaration")]
	private MemberDeclarationSyntax memberDeclaration()
	{
		EnterRule_memberDeclaration();
		EnterRule("memberDeclaration", 29);
		TraceIn("memberDeclaration", 29);
		declarationPrefix_stack.Push(new declarationPrefix_scope(this));declarationPrefix_scopeInit(declarationPrefix_stack.Peek());

		MemberDeclarationSyntax value = default(MemberDeclarationSyntax);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		ImmutableArray<Modifier> m = default(ImmutableArray<Modifier>);
		ConstructorDeclarationSyntax e2 = default(ConstructorDeclarationSyntax);
		TypeSyntax t = default(TypeSyntax);
		MemberDeclarationSyntax e1 = default(MemberDeclarationSyntax);
		ConversionOperatorDeclarationSyntax e3 = default(ConversionOperatorDeclarationSyntax);
		DestructorDeclarationSyntax e4 = default(DestructorDeclarationSyntax);
		MemberDeclarationSyntax e5 = default(MemberDeclarationSyntax);
		DelegateDeclarationSyntax e7 = default(DelegateDeclarationSyntax);
		TypeDeclarationSyntax e8 = default(TypeDeclarationSyntax);
		EnumDeclarationSyntax e9 = default(EnumDeclarationSyntax);

		try { DebugEnterRule(GrammarFileName, "memberDeclaration");
		DebugLocation(516, 4);
		try
		{
			// Truss.g:518:5: (all= attributeListList m= modifiers ( ( constructorDeclarationHeadScan )=>e2= constructorDeclaration |t= typeSyntax e1= typedMemberDeclaration |e3= conversionOperatorDeclaration |e4= destructorDeclaration |e5= eventDeclaration |e7= delegateDeclaration |e8= typeDeclaration |e9= enumDeclaration ) )
			DebugEnterAlt(1);
			// Truss.g:519:5: all= attributeListList m= modifiers ( ( constructorDeclarationHeadScan )=>e2= constructorDeclaration |t= typeSyntax e1= typedMemberDeclaration |e3= conversionOperatorDeclaration |e4= destructorDeclaration |e5= eventDeclaration |e7= delegateDeclaration |e8= typeDeclaration |e9= enumDeclaration )
			{
			DebugLocation(519, 8);
			PushFollow(Follow._attributeListList_in_memberDeclaration3892);
			all=attributeListList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(519, 27);
			if (state.backtracking == 0)
			{
				 declarationPrefix_stack.Peek().attributes =  all; 
			}
			DebugLocation(520, 6);
			PushFollow(Follow._modifiers_in_memberDeclaration3902);
			m=modifiers();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(520, 17);
			if (state.backtracking == 0)
			{
				 declarationPrefix_stack.Peek().modifiers =  m; 
			}
			DebugLocation(521, 5);
			// Truss.g:521:5: ( ( constructorDeclarationHeadScan )=>e2= constructorDeclaration |t= typeSyntax e1= typedMemberDeclaration |e3= conversionOperatorDeclaration |e4= destructorDeclaration |e5= eventDeclaration |e7= delegateDeclaration |e8= typeDeclaration |e9= enumDeclaration )
			int alt41=8;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
				{
				int LA41_2 = input.LA(2);

				if ((LA41_2==OP_PAREN_OPEN) && (EvaluatePredicate(synpred3_Truss_fragment)))
				{
					alt41 = 1;
				}
				else if ((LA41_2==IDENTIFIER||LA41_2==KW_OPERATOR||LA41_2==KW_THIS||(LA41_2>=OP_BRACKET_OPEN && LA41_2<=OP_CARET)||LA41_2==OP_COLON_COLON||LA41_2==OP_DOT||LA41_2==OP_LESS_THAN||LA41_2==OP_QUESTION))
				{
					alt41 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 41, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_BOOL:
			case KW_BYTE:
			case KW_CHAR:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_LONG:
			case KW_OBJECT:
			case KW_SBYTE:
			case KW_SHORT:
			case KW_STRING:
			case KW_UINT:
			case KW_ULONG:
			case KW_USHORT:
			case KW_VAR:
			case KW_VOID:
				{
				alt41 = 2;
				}
				break;
			case KW_EXPLICIT:
			case KW_IMPLICIT:
				{
				alt41 = 3;
				}
				break;
			case OP_TILDE:
				{
				alt41 = 4;
				}
				break;
			case KW_EVENT:
				{
				alt41 = 5;
				}
				break;
			case KW_DELEGATE:
				{
				alt41 = 6;
				}
				break;
			case KW_CLASS:
			case KW_INTERFACE:
			case KW_STRUCT:
				{
				alt41 = 7;
				}
				break;
			case KW_ENUM:
				{
				alt41 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 41, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:522:9: ( constructorDeclarationHeadScan )=>e2= constructorDeclaration
				{
				DebugLocation(522, 48);
				PushFollow(Follow._constructorDeclaration_in_memberDeclaration3929);
				e2=constructorDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(523, 9);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:525:9: t= typeSyntax e1= typedMemberDeclaration
				{
				DebugLocation(525, 10);
				PushFollow(Follow._typeSyntax_in_memberDeclaration3957);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(525, 22);
				if (state.backtracking == 0)
				{
					 declarationPrefix_stack.Peek().type =  t; 
				}
				DebugLocation(526, 11);
				PushFollow(Follow._typedMemberDeclaration_in_memberDeclaration3971);
				e1=typedMemberDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(527, 9);
				if (state.backtracking == 0)
				{
					 value = e1; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:529:9: e3= conversionOperatorDeclaration
				{
				DebugLocation(529, 11);
				PushFollow(Follow._conversionOperatorDeclaration_in_memberDeclaration3999);
				e3=conversionOperatorDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(529, 42);
				if (state.backtracking == 0)
				{
					 value = e3; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:531:9: e4= destructorDeclaration
				{
				DebugLocation(531, 11);
				PushFollow(Follow._destructorDeclaration_in_memberDeclaration4019);
				e4=destructorDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(531, 34);
				if (state.backtracking == 0)
				{
					 value = e4; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:533:9: e5= eventDeclaration
				{
				DebugLocation(533, 11);
				PushFollow(Follow._eventDeclaration_in_memberDeclaration4039);
				e5=eventDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(533, 29);
				if (state.backtracking == 0)
				{
					 value = e5; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:535:9: e7= delegateDeclaration
				{
				DebugLocation(535, 11);
				PushFollow(Follow._delegateDeclaration_in_memberDeclaration4059);
				e7=delegateDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(535, 32);
				if (state.backtracking == 0)
				{
					 value = e7; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:537:9: e8= typeDeclaration
				{
				DebugLocation(537, 11);
				PushFollow(Follow._typeDeclaration_in_memberDeclaration4079);
				e8=typeDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(537, 28);
				if (state.backtracking == 0)
				{
					 value = e8; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:539:9: e9= enumDeclaration
				{
				DebugLocation(539, 11);
				PushFollow(Follow._enumDeclaration_in_memberDeclaration4099);
				e9=enumDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(539, 28);
				if (state.backtracking == 0)
				{
					 value = e9; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(41); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberDeclaration", 29);
			LeaveRule("memberDeclaration", 29);
			LeaveRule_memberDeclaration();
			declarationPrefix_scopeAfter(declarationPrefix_stack.Peek());declarationPrefix_stack.Pop();

		}
		DebugLocation(541, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDeclaration"); }
		return value;

	}
	// $ANTLR end "memberDeclaration"

	partial void EnterRule_typedMemberDeclaration();
	partial void LeaveRule_typedMemberDeclaration();
	// $ANTLR start "typedMemberDeclaration"
	// Truss.g:545:1: typedMemberDeclaration returns [MemberDeclarationSyntax value] : (e1= operatorDeclaration |e2= fieldDeclaration );
	[GrammarRule("typedMemberDeclaration")]
	private MemberDeclarationSyntax typedMemberDeclaration()
	{
		EnterRule_typedMemberDeclaration();
		EnterRule("typedMemberDeclaration", 30);
		TraceIn("typedMemberDeclaration", 30);
		MemberDeclarationSyntax value = default(MemberDeclarationSyntax);


		OperatorDeclarationSyntax e1 = default(OperatorDeclarationSyntax);
		MemberDeclarationSyntax e2 = default(MemberDeclarationSyntax);

		try { DebugEnterRule(GrammarFileName, "typedMemberDeclaration");
		DebugLocation(545, 4);
		try
		{
			// Truss.g:546:5: (e1= operatorDeclaration |e2= fieldDeclaration )
			int alt42=2;
			try { DebugEnterDecision(42, false);
			int LA42_1 = input.LA(1);

			if ((LA42_1==KW_OPERATOR))
			{
				alt42 = 1;
			}
			else if ((LA42_1==IDENTIFIER||LA42_1==KW_THIS))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:547:9: e1= operatorDeclaration
				{
				DebugLocation(547, 11);
				PushFollow(Follow._operatorDeclaration_in_typedMemberDeclaration4140);
				e1=operatorDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(548, 9);
				if (state.backtracking == 0)
				{
					 value = e1; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:550:9: e2= fieldDeclaration
				{
				DebugLocation(550, 11);
				PushFollow(Follow._fieldDeclaration_in_typedMemberDeclaration4168);
				e2=fieldDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(551, 9);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typedMemberDeclaration", 30);
			LeaveRule("typedMemberDeclaration", 30);
			LeaveRule_typedMemberDeclaration();
		}
		DebugLocation(552, 4);
		} finally { DebugExitRule(GrammarFileName, "typedMemberDeclaration"); }
		return value;

	}
	// $ANTLR end "typedMemberDeclaration"

	protected sealed partial class fieldDeclaration_scope
	{
		public MemberName memberName;

		public fieldDeclaration_scope(TrussParser grammar) { OnCreated(grammar); }
		partial void OnCreated(TrussParser grammar);
	}
	partial void fieldDeclaration_scopeInit( fieldDeclaration_scope scope );
	partial void fieldDeclaration_scopeAfter( fieldDeclaration_scope scope );
	protected readonly ListStack<fieldDeclaration_scope> fieldDeclaration_stack = new ListStack<fieldDeclaration_scope>();

	partial void EnterRule_fieldDeclaration();
	partial void LeaveRule_fieldDeclaration();
	// $ANTLR start "fieldDeclaration"
	// Truss.g:557:1: fieldDeclaration returns [MemberDeclarationSyntax value] : ( ( variableDeclarationWithoutType OP_SEMICOLON )=>vdwt= variableDeclarationWithoutType OP_SEMICOLON | ( ( name OP_DOT )? KW_THIS )=> (n= name OP_DOT )? KW_THIS OP_BRACKET_OPEN bpl= bareParameterList OP_BRACKET_CLOSE al= accessorList |mn= memberName (pdt= propertyDeclarationTail |mdt= methodDeclarationTail ) );
	[GrammarRule("fieldDeclaration")]
	private MemberDeclarationSyntax fieldDeclaration()
	{
		EnterRule_fieldDeclaration();
		EnterRule("fieldDeclaration", 31);
		TraceIn("fieldDeclaration", 31);
		fieldDeclaration_stack.Push(new fieldDeclaration_scope(this));fieldDeclaration_scopeInit(fieldDeclaration_stack.Peek());
		MemberDeclarationSyntax value = default(MemberDeclarationSyntax);


		VariableDeclarationSyntax vdwt = default(VariableDeclarationSyntax);
		NameSyntax n = default(NameSyntax);
		ImmutableArray<ParameterSyntax> bpl = default(ImmutableArray<ParameterSyntax>);
		ImmutableArray<AccessorDeclarationSyntax> al = default(ImmutableArray<AccessorDeclarationSyntax>);
		MemberName mn = default(MemberName);
		PropertyDeclarationSyntax pdt = default(PropertyDeclarationSyntax);
		MethodDeclarationSyntax mdt = default(MethodDeclarationSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "fieldDeclaration");
		DebugLocation(557, 4);
		try
		{
			// Truss.g:564:5: ( ( variableDeclarationWithoutType OP_SEMICOLON )=>vdwt= variableDeclarationWithoutType OP_SEMICOLON | ( ( name OP_DOT )? KW_THIS )=> (n= name OP_DOT )? KW_THIS OP_BRACKET_OPEN bpl= bareParameterList OP_BRACKET_CLOSE al= accessorList |mn= memberName (pdt= propertyDeclarationTail |mdt= methodDeclarationTail ) )
			int alt45=3;
			try { DebugEnterDecision(45, false);
			int LA45_1 = input.LA(1);

			if ((LA45_1==IDENTIFIER))
			{
				int LA45_2 = input.LA(2);

				if ((EvaluatePredicate(synpred4_Truss_fragment)))
				{
					alt45 = 1;
				}
				else if ((EvaluatePredicate(synpred5_Truss_fragment)))
				{
					alt45 = 2;
				}
				else if ((true))
				{
					alt45 = 3;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 45, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA45_1==KW_THIS) && (EvaluatePredicate(synpred5_Truss_fragment)))
			{
				alt45 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 45, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(45); }
			switch (alt45)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:565:9: ( variableDeclarationWithoutType OP_SEMICOLON )=>vdwt= variableDeclarationWithoutType OP_SEMICOLON
				{
				DebugLocation(566, 13);
				PushFollow(Follow._variableDeclarationWithoutType_in_fieldDeclaration4238);
				vdwt=variableDeclarationWithoutType();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(567, 9);
				if (state.backtracking == 0)
				{

					            value = new FieldDeclarationSyntax(
					                declarationPrefix_stack.Peek().attributes,
					                declarationPrefix_stack.Peek().modifiers,
					                vdwt,
					                Span(start)
					            );
					        
				}
				DebugLocation(575, 9);
				Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_fieldDeclaration4258); if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:577:9: ( ( name OP_DOT )? KW_THIS )=> (n= name OP_DOT )? KW_THIS OP_BRACKET_OPEN bpl= bareParameterList OP_BRACKET_CLOSE al= accessorList
				{
				DebugLocation(578, 9);
				// Truss.g:578:9: (n= name OP_DOT )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_1 = input.LA(1);

				if ((LA43_1==IDENTIFIER))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:578:11: n= name OP_DOT
					{
					DebugLocation(578, 12);
					PushFollow(Follow._name_in_fieldDeclaration4302);
					n=name();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(578, 18);
					Match(input,OP_DOT,Follow._OP_DOT_in_fieldDeclaration4304); if (state.failed) return value;

					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(579, 9);
				Match(input,KW_THIS,Follow._KW_THIS_in_fieldDeclaration4317); if (state.failed) return value;
				DebugLocation(580, 9);
				Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_fieldDeclaration4327); if (state.failed) return value;
				DebugLocation(581, 12);
				PushFollow(Follow._bareParameterList_in_fieldDeclaration4339);
				bpl=bareParameterList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(582, 9);
				Match(input,OP_BRACKET_CLOSE,Follow._OP_BRACKET_CLOSE_in_fieldDeclaration4349); if (state.failed) return value;
				DebugLocation(583, 11);
				PushFollow(Follow._accessorList_in_fieldDeclaration4361);
				al=accessorList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(584, 9);
				if (state.backtracking == 0)
				{

					            value = new IndexerDeclarationSyntax(
					                declarationPrefix_stack.Peek().attributes,
					                declarationPrefix_stack.Peek().modifiers,
					                declarationPrefix_stack.Peek().type,
					                n,
					                bpl,
					                al,
					                Span(start)
					            );
					        
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:596:9: mn= memberName (pdt= propertyDeclarationTail |mdt= methodDeclarationTail )
				{
				DebugLocation(596, 11);
				PushFollow(Follow._memberName_in_fieldDeclaration4389);
				mn=memberName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(597, 9);
				if (state.backtracking == 0)
				{
					 fieldDeclaration_stack.Peek().memberName =  mn; 
				}
				DebugLocation(598, 9);
				// Truss.g:598:9: (pdt= propertyDeclarationTail |mdt= methodDeclarationTail )
				int alt44=2;
				try { DebugEnterSubRule(44);
				try { DebugEnterDecision(44, false);
				int LA44_1 = input.LA(1);

				if ((LA44_1==OP_BRACE_OPEN))
				{
					alt44 = 1;
				}
				else if ((LA44_1==OP_PAREN_OPEN))
				{
					alt44 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 44, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(44); }
				switch (alt44)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:599:13: pdt= propertyDeclarationTail
					{
					DebugLocation(599, 16);
					PushFollow(Follow._propertyDeclarationTail_in_fieldDeclaration4425);
					pdt=propertyDeclarationTail();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(600, 13);
					if (state.backtracking == 0)
					{
						 value = pdt; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:602:13: mdt= methodDeclarationTail
					{
					DebugLocation(602, 16);
					PushFollow(Follow._methodDeclarationTail_in_fieldDeclaration4465);
					mdt=methodDeclarationTail();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(603, 13);
					if (state.backtracking == 0)
					{
						 value = mdt; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(44); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("fieldDeclaration", 31);
			LeaveRule("fieldDeclaration", 31);
			LeaveRule_fieldDeclaration();
			fieldDeclaration_scopeAfter(fieldDeclaration_stack.Peek());fieldDeclaration_stack.Pop();
		}
		DebugLocation(605, 4);
		} finally { DebugExitRule(GrammarFileName, "fieldDeclaration"); }
		return value;

	}
	// $ANTLR end "fieldDeclaration"

	partial void EnterRule_propertyDeclarationTail();
	partial void LeaveRule_propertyDeclarationTail();
	// $ANTLR start "propertyDeclarationTail"
	// Truss.g:607:1: propertyDeclarationTail returns [PropertyDeclarationSyntax value] : al= accessorList ;
	[GrammarRule("propertyDeclarationTail")]
	private PropertyDeclarationSyntax propertyDeclarationTail()
	{
		EnterRule_propertyDeclarationTail();
		EnterRule("propertyDeclarationTail", 32);
		TraceIn("propertyDeclarationTail", 32);
		PropertyDeclarationSyntax value = default(PropertyDeclarationSyntax);


		ImmutableArray<AccessorDeclarationSyntax> al = default(ImmutableArray<AccessorDeclarationSyntax>);


		    var start = input.LT(1);
		    Debug.Assert(fieldDeclaration_stack.Peek().memberName.TypeParameters.Count == 0);

		try { DebugEnterRule(GrammarFileName, "propertyDeclarationTail");
		DebugLocation(607, 4);
		try
		{
			// Truss.g:612:5: (al= accessorList )
			DebugEnterAlt(1);
			// Truss.g:613:9: al= accessorList
			{
			DebugLocation(613, 11);
			PushFollow(Follow._accessorList_in_propertyDeclarationTail4525);
			al=accessorList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(614, 9);
			if (state.backtracking == 0)
			{

				            value = new PropertyDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                declarationPrefix_stack.Peek().type,
				                fieldDeclaration_stack.Peek().memberName.InterfaceName,
				                fieldDeclaration_stack.Peek().memberName.Identifier,
				                al,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("propertyDeclarationTail", 32);
			LeaveRule("propertyDeclarationTail", 32);
			LeaveRule_propertyDeclarationTail();
		}
		DebugLocation(625, 4);
		} finally { DebugExitRule(GrammarFileName, "propertyDeclarationTail"); }
		return value;

	}
	// $ANTLR end "propertyDeclarationTail"

	partial void EnterRule_methodDeclarationTail();
	partial void LeaveRule_methodDeclarationTail();
	// $ANTLR start "methodDeclarationTail"
	// Truss.g:627:1: methodDeclarationTail returns [MethodDeclarationSyntax value] : pl= parameterList tpccl= typeParameterConstraintClauseList (b= block | OP_SEMICOLON ) ;
	[GrammarRule("methodDeclarationTail")]
	private MethodDeclarationSyntax methodDeclarationTail()
	{
		EnterRule_methodDeclarationTail();
		EnterRule("methodDeclarationTail", 33);
		TraceIn("methodDeclarationTail", 33);
		MethodDeclarationSyntax value = default(MethodDeclarationSyntax);


		ImmutableArray<ParameterSyntax> pl = default(ImmutableArray<ParameterSyntax>);
		ImmutableArray<TypeParameterConstraintClauseSyntax> tpccl = default(ImmutableArray<TypeParameterConstraintClauseSyntax>);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "methodDeclarationTail");
		DebugLocation(627, 4);
		try
		{
			// Truss.g:631:5: (pl= parameterList tpccl= typeParameterConstraintClauseList (b= block | OP_SEMICOLON ) )
			DebugEnterAlt(1);
			// Truss.g:632:9: pl= parameterList tpccl= typeParameterConstraintClauseList (b= block | OP_SEMICOLON )
			{
			DebugLocation(632, 11);
			PushFollow(Follow._parameterList_in_methodDeclarationTail4571);
			pl=parameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(633, 14);
			PushFollow(Follow._typeParameterConstraintClauseList_in_methodDeclarationTail4583);
			tpccl=typeParameterConstraintClauseList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(634, 9);
			// Truss.g:634:9: (b= block | OP_SEMICOLON )
			int alt46=2;
			try { DebugEnterSubRule(46);
			try { DebugEnterDecision(46, false);
			int LA46_1 = input.LA(1);

			if ((LA46_1==OP_BRACE_OPEN))
			{
				alt46 = 1;
			}
			else if ((LA46_1==OP_SEMICOLON))
			{
				alt46 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 46, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:634:11: b= block
				{
				DebugLocation(634, 12);
				PushFollow(Follow._block_in_methodDeclarationTail4597);
				b=block();
				PopFollow();
				if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:634:21: OP_SEMICOLON
				{
				DebugLocation(634, 21);
				Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_methodDeclarationTail4601); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(46); }

			DebugLocation(635, 9);
			if (state.backtracking == 0)
			{

				            value = new MethodDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                declarationPrefix_stack.Peek().type,
				                fieldDeclaration_stack.Peek().memberName.InterfaceName,
				                fieldDeclaration_stack.Peek().memberName.Identifier,
				                fieldDeclaration_stack.Peek().memberName.TypeParameters,
				                tpccl,
				                pl,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("methodDeclarationTail", 33);
			LeaveRule("methodDeclarationTail", 33);
			LeaveRule_methodDeclarationTail();
		}
		DebugLocation(649, 4);
		} finally { DebugExitRule(GrammarFileName, "methodDeclarationTail"); }
		return value;

	}
	// $ANTLR end "methodDeclarationTail"

	partial void EnterRule_eventDeclaration();
	partial void LeaveRule_eventDeclaration();
	// $ANTLR start "eventDeclaration"
	// Truss.g:653:1: eventDeclaration returns [MemberDeclarationSyntax value] : KW_EVENT ( ( variableDeclaration OP_SEMICOLON )=>vd= variableDeclaration OP_SEMICOLON |t= typeSyntax mn= memberName al= accessorList ) ;
	[GrammarRule("eventDeclaration")]
	private MemberDeclarationSyntax eventDeclaration()
	{
		EnterRule_eventDeclaration();
		EnterRule("eventDeclaration", 34);
		TraceIn("eventDeclaration", 34);
		MemberDeclarationSyntax value = default(MemberDeclarationSyntax);


		VariableDeclarationSyntax vd = default(VariableDeclarationSyntax);
		TypeSyntax t = default(TypeSyntax);
		MemberName mn = default(MemberName);
		ImmutableArray<AccessorDeclarationSyntax> al = default(ImmutableArray<AccessorDeclarationSyntax>);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "eventDeclaration");
		DebugLocation(653, 4);
		try
		{
			// Truss.g:657:5: ( KW_EVENT ( ( variableDeclaration OP_SEMICOLON )=>vd= variableDeclaration OP_SEMICOLON |t= typeSyntax mn= memberName al= accessorList ) )
			DebugEnterAlt(1);
			// Truss.g:658:9: KW_EVENT ( ( variableDeclaration OP_SEMICOLON )=>vd= variableDeclaration OP_SEMICOLON |t= typeSyntax mn= memberName al= accessorList )
			{
			DebugLocation(658, 9);
			Match(input,KW_EVENT,Follow._KW_EVENT_in_eventDeclaration4649); if (state.failed) return value;
			DebugLocation(659, 9);
			// Truss.g:659:9: ( ( variableDeclaration OP_SEMICOLON )=>vd= variableDeclaration OP_SEMICOLON |t= typeSyntax mn= memberName al= accessorList )
			int alt47=2;
			try { DebugEnterSubRule(47);
			try { DebugEnterDecision(47, false);
			switch (input.LA(1))
			{
			case KW_VAR:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 1, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_BOOL:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_BYTE:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_CHAR:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 4, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_DECIMAL:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 5, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_DOUBLE:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 6, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_FLOAT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 7, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_INT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_LONG:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 9, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_OBJECT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 10, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_SBYTE:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 11, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_SHORT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 12, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_STRING:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 13, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_UINT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 14, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_ULONG:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 15, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_USHORT:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 16, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_VOID:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 17, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case IDENTIFIER:
				{
				int LA47_2 = input.LA(2);

				if ((EvaluatePredicate(synpred6_Truss_fragment)))
				{
					alt47 = 1;
				}
				else if ((true))
				{
					alt47 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 47, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:660:13: ( variableDeclaration OP_SEMICOLON )=>vd= variableDeclaration OP_SEMICOLON
				{
				DebugLocation(661, 15);
				PushFollow(Follow._variableDeclaration_in_eventDeclaration4696);
				vd=variableDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(662, 13);
				if (state.backtracking == 0)
				{

					                value = new EventFieldDeclarationSyntax(
					                    declarationPrefix_stack.Peek().attributes,
					                    declarationPrefix_stack.Peek().modifiers,
					                    vd,
					                    Span(start)
					                );
					            
				}
				DebugLocation(670, 13);
				Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_eventDeclaration4724); if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:672:13: t= typeSyntax mn= memberName al= accessorList
				{
				DebugLocation(672, 14);
				PushFollow(Follow._typeSyntax_in_eventDeclaration4750);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(673, 15);
				PushFollow(Follow._memberName_in_eventDeclaration4766);
				mn=memberName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(674, 15);
				PushFollow(Follow._accessorList_in_eventDeclaration4782);
				al=accessorList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(675, 13);
				if (state.backtracking == 0)
				{

					                value = new EventDeclarationSyntax(
					                    declarationPrefix_stack.Peek().attributes,
					                    declarationPrefix_stack.Peek().modifiers,
					                    t,
					                    mn.InterfaceName,
					                    mn.Identifier,
					                    al,
					                    Span(start)
					                );
					            
				}

				}
				break;

			}
			} finally { DebugExitSubRule(47); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("eventDeclaration", 34);
			LeaveRule("eventDeclaration", 34);
			LeaveRule_eventDeclaration();
		}
		DebugLocation(687, 4);
		} finally { DebugExitRule(GrammarFileName, "eventDeclaration"); }
		return value;

	}
	// $ANTLR end "eventDeclaration"

	partial void EnterRule_accessorList();
	partial void LeaveRule_accessorList();
	// $ANTLR start "accessorList"
	// Truss.g:689:1: accessorList returns [ImmutableArray<AccessorDeclarationSyntax> value] : OP_BRACE_OPEN (all= attributeListList m= modifiers adt= accessorDeclarationType (b= block | OP_SEMICOLON ) )* OP_BRACE_CLOSE ;
	[GrammarRule("accessorList")]
	private ImmutableArray<AccessorDeclarationSyntax> accessorList()
	{
		EnterRule_accessorList();
		EnterRule("accessorList", 35);
		TraceIn("accessorList", 35);
		ImmutableArray<AccessorDeclarationSyntax> value = default(ImmutableArray<AccessorDeclarationSyntax>);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		ImmutableArray<Modifier> m = default(ImmutableArray<Modifier>);
		AccessorDeclarationType adt = default(AccessorDeclarationType);
		BlockSyntax b = default(BlockSyntax);


		    IToken start = null;
		    var accessors = new ImmutableArray<AccessorDeclarationSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "accessorList");
		DebugLocation(689, 4);
		try
		{
			// Truss.g:694:5: ( OP_BRACE_OPEN (all= attributeListList m= modifiers adt= accessorDeclarationType (b= block | OP_SEMICOLON ) )* OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:695:9: OP_BRACE_OPEN (all= attributeListList m= modifiers adt= accessorDeclarationType (b= block | OP_SEMICOLON ) )* OP_BRACE_CLOSE
			{
			DebugLocation(695, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_accessorList4840); if (state.failed) return value;
			DebugLocation(696, 9);
			// Truss.g:696:9: (all= attributeListList m= modifiers adt= accessorDeclarationType (b= block | OP_SEMICOLON ) )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_1 = input.LA(1);

				if ((LA49_1==IDENTIFIER||LA49_1==KW_ABSTRACT||LA49_1==KW_ASYNC||LA49_1==KW_BOOL||LA49_1==KW_BYTE||(LA49_1>=KW_CHAR && LA49_1<=KW_CONSUMES)||LA49_1==KW_DECIMAL||LA49_1==KW_DELEGATE||LA49_1==KW_DOUBLE||(LA49_1>=KW_ENUM && LA49_1<=KW_EXTERN)||LA49_1==KW_FLOAT||LA49_1==KW_IMPLICIT||(LA49_1>=KW_IN && LA49_1<=KW_INTERNAL)||LA49_1==KW_LONG||LA49_1==KW_NEW||LA49_1==KW_OBJECT||(LA49_1>=KW_OUT && LA49_1<=KW_REF)||(LA49_1>=KW_SBYTE && LA49_1<=KW_SHORT)||(LA49_1>=KW_STATIC && LA49_1<=KW_STRUCT)||LA49_1==KW_THIS||(LA49_1>=KW_UINT && LA49_1<=KW_USHORT)||(LA49_1>=KW_VAR && LA49_1<=KW_VOLATILE)||LA49_1==OP_BRACKET_OPEN||LA49_1==OP_TILDE))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:697:13: all= attributeListList m= modifiers adt= accessorDeclarationType (b= block | OP_SEMICOLON )
					{
					DebugLocation(697, 13);
					if (state.backtracking == 0)
					{
						 start = input.LT(1); 
					}
					DebugLocation(698, 16);
					PushFollow(Follow._attributeListList_in_accessorList4880);
					all=attributeListList();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(699, 14);
					PushFollow(Follow._modifiers_in_accessorList4896);
					m=modifiers();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(700, 16);
					PushFollow(Follow._accessorDeclarationType_in_accessorList4912);
					adt=accessorDeclarationType();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(701, 13);
					// Truss.g:701:13: (b= block | OP_SEMICOLON )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_1 = input.LA(1);

					if ((LA48_1==OP_BRACE_OPEN))
					{
						alt48 = 1;
					}
					else if ((LA48_1==OP_SEMICOLON))
					{
						alt48 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:701:15: b= block
						{
						DebugLocation(701, 16);
						PushFollow(Follow._block_in_accessorList4930);
						b=block();
						PopFollow();
						if (state.failed) return value;

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Truss.g:701:25: OP_SEMICOLON
						{
						DebugLocation(701, 25);
						Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_accessorList4934); if (state.failed) return value;

						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(702, 13);
					if (state.backtracking == 0)
					{
						 accessors.Add(new AccessorDeclarationSyntax(all, m, adt, b, Span(start))); 
					}

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }

			DebugLocation(704, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_accessorList4971); if (state.failed) return value;
			DebugLocation(705, 9);
			if (state.backtracking == 0)
			{
				 value = accessors.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("accessorList", 35);
			LeaveRule("accessorList", 35);
			LeaveRule_accessorList();
		}
		DebugLocation(706, 4);
		} finally { DebugExitRule(GrammarFileName, "accessorList"); }
		return value;

	}
	// $ANTLR end "accessorList"

	partial void EnterRule_accessorDeclarationType();
	partial void LeaveRule_accessorDeclarationType();
	// $ANTLR start "accessorDeclarationType"
	// Truss.g:708:1: accessorDeclarationType returns [AccessorDeclarationType value] : idn= identifierName ;
	[GrammarRule("accessorDeclarationType")]
	private AccessorDeclarationType accessorDeclarationType()
	{
		EnterRule_accessorDeclarationType();
		EnterRule("accessorDeclarationType", 36);
		TraceIn("accessorDeclarationType", 36);
		AccessorDeclarationType value = default(AccessorDeclarationType);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);

		try { DebugEnterRule(GrammarFileName, "accessorDeclarationType");
		DebugLocation(708, 4);
		try
		{
			// Truss.g:709:5: (idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:710:9: idn= identifierName
			{
			DebugLocation(710, 12);
			PushFollow(Follow._identifierName_in_accessorDeclarationType5012);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(711, 9);
			if (state.backtracking == 0)
			{
				 value = ParseAccessorDeclarationType(idn.Identifier, idn.Span); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("accessorDeclarationType", 36);
			LeaveRule("accessorDeclarationType", 36);
			LeaveRule_accessorDeclarationType();
		}
		DebugLocation(712, 4);
		} finally { DebugExitRule(GrammarFileName, "accessorDeclarationType"); }
		return value;

	}
	// $ANTLR end "accessorDeclarationType"

	partial void EnterRule_constructorDeclarationHeadScan();
	partial void LeaveRule_constructorDeclarationHeadScan();
	// $ANTLR start "constructorDeclarationHeadScan"
	// Truss.g:716:1: constructorDeclarationHeadScan : identifierName OP_PAREN_OPEN ;
	[GrammarRule("constructorDeclarationHeadScan")]
	private void constructorDeclarationHeadScan()
	{
		EnterRule_constructorDeclarationHeadScan();
		EnterRule("constructorDeclarationHeadScan", 37);
		TraceIn("constructorDeclarationHeadScan", 37);
		try { DebugEnterRule(GrammarFileName, "constructorDeclarationHeadScan");
		DebugLocation(716, 62);
		try
		{
			// Truss.g:716:32: ( identifierName OP_PAREN_OPEN )
			DebugEnterAlt(1);
			// Truss.g:716:34: identifierName OP_PAREN_OPEN
			{
			DebugLocation(716, 34);
			PushFollow(Follow._identifierName_in_constructorDeclarationHeadScan5037);
			identifierName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(716, 49);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_constructorDeclarationHeadScan5039); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructorDeclarationHeadScan", 37);
			LeaveRule("constructorDeclarationHeadScan", 37);
			LeaveRule_constructorDeclarationHeadScan();
		}
		DebugLocation(716, 62);
		} finally { DebugExitRule(GrammarFileName, "constructorDeclarationHeadScan"); }
		return;

	}
	// $ANTLR end "constructorDeclarationHeadScan"

	partial void EnterRule_constructorDeclaration();
	partial void LeaveRule_constructorDeclaration();
	// $ANTLR start "constructorDeclaration"
	// Truss.g:718:1: constructorDeclaration returns [ConstructorDeclarationSyntax value] : idn= identifierName pl= parameterList (ci= constructorInitializer )? b= block ;
	[GrammarRule("constructorDeclaration")]
	private ConstructorDeclarationSyntax constructorDeclaration()
	{
		EnterRule_constructorDeclaration();
		EnterRule("constructorDeclaration", 38);
		TraceIn("constructorDeclaration", 38);
		ConstructorDeclarationSyntax value = default(ConstructorDeclarationSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ImmutableArray<ParameterSyntax> pl = default(ImmutableArray<ParameterSyntax>);
		ConstructorInitializerSyntax ci = default(ConstructorInitializerSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "constructorDeclaration");
		DebugLocation(718, 4);
		try
		{
			// Truss.g:722:5: (idn= identifierName pl= parameterList (ci= constructorInitializer )? b= block )
			DebugEnterAlt(1);
			// Truss.g:723:9: idn= identifierName pl= parameterList (ci= constructorInitializer )? b= block
			{
			DebugLocation(723, 12);
			PushFollow(Follow._identifierName_in_constructorDeclaration5071);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(724, 11);
			PushFollow(Follow._parameterList_in_constructorDeclaration5083);
			pl=parameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(725, 9);
			// Truss.g:725:9: (ci= constructorInitializer )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_1 = input.LA(1);

			if ((LA50_1==OP_COLON))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:725:11: ci= constructorInitializer
				{
				DebugLocation(725, 13);
				PushFollow(Follow._constructorInitializer_in_constructorDeclaration5097);
				ci=constructorInitializer();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(50); }

			DebugLocation(726, 10);
			PushFollow(Follow._block_in_constructorDeclaration5112);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(727, 9);
			if (state.backtracking == 0)
			{

				            value = new ConstructorDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                idn,
				                ci,
				                pl,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructorDeclaration", 38);
			LeaveRule("constructorDeclaration", 38);
			LeaveRule_constructorDeclaration();
		}
		DebugLocation(738, 4);
		} finally { DebugExitRule(GrammarFileName, "constructorDeclaration"); }
		return value;

	}
	// $ANTLR end "constructorDeclaration"

	partial void EnterRule_constructorInitializer();
	partial void LeaveRule_constructorInitializer();
	// $ANTLR start "constructorInitializer"
	// Truss.g:740:1: constructorInitializer returns [ConstructorInitializerSyntax value] : OP_COLON ( KW_THIS | KW_BASE ) al= argumentList ;
	[GrammarRule("constructorInitializer")]
	private ConstructorInitializerSyntax constructorInitializer()
	{
		EnterRule_constructorInitializer();
		EnterRule("constructorInitializer", 39);
		TraceIn("constructorInitializer", 39);
		ConstructorInitializerSyntax value = default(ConstructorInitializerSyntax);


		ImmutableArray<ArgumentSyntax> al = default(ImmutableArray<ArgumentSyntax>);


		    var start = input.LT(1);
		    ThisOrBase? type = null;

		try { DebugEnterRule(GrammarFileName, "constructorInitializer");
		DebugLocation(740, 4);
		try
		{
			// Truss.g:745:5: ( OP_COLON ( KW_THIS | KW_BASE ) al= argumentList )
			DebugEnterAlt(1);
			// Truss.g:746:9: OP_COLON ( KW_THIS | KW_BASE ) al= argumentList
			{
			DebugLocation(746, 9);
			Match(input,OP_COLON,Follow._OP_COLON_in_constructorInitializer5156); if (state.failed) return value;
			DebugLocation(747, 9);
			// Truss.g:747:9: ( KW_THIS | KW_BASE )
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_1 = input.LA(1);

			if ((LA51_1==KW_THIS))
			{
				alt51 = 1;
			}
			else if ((LA51_1==KW_BASE))
			{
				alt51 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:747:11: KW_THIS
				{
				DebugLocation(747, 11);
				Match(input,KW_THIS,Follow._KW_THIS_in_constructorInitializer5168); if (state.failed) return value;
				DebugLocation(747, 19);
				if (state.backtracking == 0)
				{
					 type = ThisOrBase.This; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:748:11: KW_BASE
				{
				DebugLocation(748, 11);
				Match(input,KW_BASE,Follow._KW_BASE_in_constructorInitializer5182); if (state.failed) return value;
				DebugLocation(748, 19);
				if (state.backtracking == 0)
				{
					 type = ThisOrBase.Base; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(51); }

			DebugLocation(750, 11);
			PushFollow(Follow._argumentList_in_constructorInitializer5206);
			al=argumentList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(751, 9);
			if (state.backtracking == 0)
			{
				 value = new ConstructorInitializerSyntax(type.Value, al, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("constructorInitializer", 39);
			LeaveRule("constructorInitializer", 39);
			LeaveRule_constructorInitializer();
		}
		DebugLocation(752, 4);
		} finally { DebugExitRule(GrammarFileName, "constructorInitializer"); }
		return value;

	}
	// $ANTLR end "constructorInitializer"

	partial void EnterRule_destructorDeclaration();
	partial void LeaveRule_destructorDeclaration();
	// $ANTLR start "destructorDeclaration"
	// Truss.g:756:1: destructorDeclaration returns [DestructorDeclarationSyntax value] : OP_TILDE idn= identifierName OP_PAREN_OPEN OP_PAREN_CLOSE b= block ;
	[GrammarRule("destructorDeclaration")]
	private DestructorDeclarationSyntax destructorDeclaration()
	{
		EnterRule_destructorDeclaration();
		EnterRule("destructorDeclaration", 40);
		TraceIn("destructorDeclaration", 40);
		DestructorDeclarationSyntax value = default(DestructorDeclarationSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);
		    Debug.Assert(declarationPrefix_stack.Peek().modifiers.Count == 0);

		try { DebugEnterRule(GrammarFileName, "destructorDeclaration");
		DebugLocation(756, 4);
		try
		{
			// Truss.g:761:5: ( OP_TILDE idn= identifierName OP_PAREN_OPEN OP_PAREN_CLOSE b= block )
			DebugEnterAlt(1);
			// Truss.g:762:9: OP_TILDE idn= identifierName OP_PAREN_OPEN OP_PAREN_CLOSE b= block
			{
			DebugLocation(762, 9);
			Match(input,OP_TILDE,Follow._OP_TILDE_in_destructorDeclaration5252); if (state.failed) return value;
			DebugLocation(763, 12);
			PushFollow(Follow._identifierName_in_destructorDeclaration5264);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(764, 9);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_destructorDeclaration5274); if (state.failed) return value;
			DebugLocation(765, 9);
			Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_destructorDeclaration5284); if (state.failed) return value;
			DebugLocation(766, 10);
			PushFollow(Follow._block_in_destructorDeclaration5296);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(767, 9);
			if (state.backtracking == 0)
			{

				            value = new DestructorDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                ImmutableArray<Modifier>.Empty,
				                idn,
				                ImmutableArray<ParameterSyntax>.Empty,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("destructorDeclaration", 40);
			LeaveRule("destructorDeclaration", 40);
			LeaveRule_destructorDeclaration();
		}
		DebugLocation(777, 4);
		} finally { DebugExitRule(GrammarFileName, "destructorDeclaration"); }
		return value;

	}
	// $ANTLR end "destructorDeclaration"

	partial void EnterRule_conversionOperatorDeclaration();
	partial void LeaveRule_conversionOperatorDeclaration();
	// $ANTLR start "conversionOperatorDeclaration"
	// Truss.g:781:1: conversionOperatorDeclaration returns [ConversionOperatorDeclarationSyntax value] : ( KW_EXPLICIT | KW_IMPLICIT ) KW_OPERATOR t= typeSyntax pl= parameterList b= block ;
	[GrammarRule("conversionOperatorDeclaration")]
	private ConversionOperatorDeclarationSyntax conversionOperatorDeclaration()
	{
		EnterRule_conversionOperatorDeclaration();
		EnterRule("conversionOperatorDeclaration", 41);
		TraceIn("conversionOperatorDeclaration", 41);
		ConversionOperatorDeclarationSyntax value = default(ConversionOperatorDeclarationSyntax);


		TypeSyntax t = default(TypeSyntax);
		ImmutableArray<ParameterSyntax> pl = default(ImmutableArray<ParameterSyntax>);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);
		    ImplicitOrExplicit? type = null;

		try { DebugEnterRule(GrammarFileName, "conversionOperatorDeclaration");
		DebugLocation(781, 4);
		try
		{
			// Truss.g:786:5: ( ( KW_EXPLICIT | KW_IMPLICIT ) KW_OPERATOR t= typeSyntax pl= parameterList b= block )
			DebugEnterAlt(1);
			// Truss.g:787:9: ( KW_EXPLICIT | KW_IMPLICIT ) KW_OPERATOR t= typeSyntax pl= parameterList b= block
			{
			DebugLocation(787, 9);
			// Truss.g:787:9: ( KW_EXPLICIT | KW_IMPLICIT )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_1 = input.LA(1);

			if ((LA52_1==KW_EXPLICIT))
			{
				alt52 = 1;
			}
			else if ((LA52_1==KW_IMPLICIT))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:787:11: KW_EXPLICIT
				{
				DebugLocation(787, 11);
				Match(input,KW_EXPLICIT,Follow._KW_EXPLICIT_in_conversionOperatorDeclaration5344); if (state.failed) return value;
				DebugLocation(787, 23);
				if (state.backtracking == 0)
				{
					 type = ImplicitOrExplicit.Explicit; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:788:11: KW_IMPLICIT
				{
				DebugLocation(788, 11);
				Match(input,KW_IMPLICIT,Follow._KW_IMPLICIT_in_conversionOperatorDeclaration5358); if (state.failed) return value;
				DebugLocation(788, 23);
				if (state.backtracking == 0)
				{
					 type = ImplicitOrExplicit.Implicit; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(790, 9);
			Match(input,KW_OPERATOR,Follow._KW_OPERATOR_in_conversionOperatorDeclaration5380); if (state.failed) return value;
			DebugLocation(791, 10);
			PushFollow(Follow._typeSyntax_in_conversionOperatorDeclaration5392);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(792, 11);
			PushFollow(Follow._parameterList_in_conversionOperatorDeclaration5404);
			pl=parameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(793, 10);
			PushFollow(Follow._block_in_conversionOperatorDeclaration5416);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(794, 9);
			if (state.backtracking == 0)
			{

				            value = new ConversionOperatorDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                type.Value,
				                t,
				                pl,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conversionOperatorDeclaration", 41);
			LeaveRule("conversionOperatorDeclaration", 41);
			LeaveRule_conversionOperatorDeclaration();
		}
		DebugLocation(805, 4);
		} finally { DebugExitRule(GrammarFileName, "conversionOperatorDeclaration"); }
		return value;

	}
	// $ANTLR end "conversionOperatorDeclaration"

	partial void EnterRule_operatorDeclaration();
	partial void LeaveRule_operatorDeclaration();
	// $ANTLR start "operatorDeclaration"
	// Truss.g:809:1: operatorDeclaration returns [OperatorDeclarationSyntax value] : KW_OPERATOR o= operator pl= parameterList b= block ;
	[GrammarRule("operatorDeclaration")]
	private OperatorDeclarationSyntax operatorDeclaration()
	{
		EnterRule_operatorDeclaration();
		EnterRule("operatorDeclaration", 42);
		TraceIn("operatorDeclaration", 42);
		OperatorDeclarationSyntax value = default(OperatorDeclarationSyntax);


		Operator o = default(Operator);
		ImmutableArray<ParameterSyntax> pl = default(ImmutableArray<ParameterSyntax>);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "operatorDeclaration");
		DebugLocation(809, 4);
		try
		{
			// Truss.g:813:5: ( KW_OPERATOR o= operator pl= parameterList b= block )
			DebugEnterAlt(1);
			// Truss.g:814:9: KW_OPERATOR o= operator pl= parameterList b= block
			{
			DebugLocation(814, 9);
			Match(input,KW_OPERATOR,Follow._KW_OPERATOR_in_operatorDeclaration5462); if (state.failed) return value;
			DebugLocation(815, 10);
			PushFollow(Follow._operator_in_operatorDeclaration5474);
			o=@operator();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(816, 11);
			PushFollow(Follow._parameterList_in_operatorDeclaration5486);
			pl=parameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(817, 10);
			PushFollow(Follow._block_in_operatorDeclaration5498);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(818, 9);
			if (state.backtracking == 0)
			{

				            value = new OperatorDeclarationSyntax(
				                declarationPrefix_stack.Peek().attributes,
				                declarationPrefix_stack.Peek().modifiers,
				                declarationPrefix_stack.Peek().type,
				                o,
				                pl,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operatorDeclaration", 42);
			LeaveRule("operatorDeclaration", 42);
			LeaveRule_operatorDeclaration();
		}
		DebugLocation(829, 4);
		} finally { DebugExitRule(GrammarFileName, "operatorDeclaration"); }
		return value;

	}
	// $ANTLR end "operatorDeclaration"

	partial void EnterRule_operator();
	partial void LeaveRule_operator();
	// $ANTLR start "operator"
	// Truss.g:831:1: operator returns [Operator value] : ( OP_AMPERSAND | OP_ASTERISK | OP_BAR | OP_CARET | OP_EQUALS_EQUALS | OP_EXCLAMATION | OP_EXCLAMATION_EQUALS | KW_FALSE | OP_GREATER_THAN | OP_GREATER_THAN_EQUALS | op_GREATER_THAN_GREATER_THAN | OP_LESS_THAN | OP_LESS_THAN_EQUALS | OP_LESS_THAN_LESS_THAN | OP_MINUS | OP_MINUS_MINUS | OP_PERCENT | OP_PLUS | OP_PLUS_PLUS | OP_SLASH | OP_TILDE | KW_TRUE );
	[GrammarRule("operator")]
	private Operator @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 43);
		TraceIn("operator", 43);
		Operator value = default(Operator);


		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(831, 4);
		try
		{
			// Truss.g:832:5: ( OP_AMPERSAND | OP_ASTERISK | OP_BAR | OP_CARET | OP_EQUALS_EQUALS | OP_EXCLAMATION | OP_EXCLAMATION_EQUALS | KW_FALSE | OP_GREATER_THAN | OP_GREATER_THAN_EQUALS | op_GREATER_THAN_GREATER_THAN | OP_LESS_THAN | OP_LESS_THAN_EQUALS | OP_LESS_THAN_LESS_THAN | OP_MINUS | OP_MINUS_MINUS | OP_PERCENT | OP_PLUS | OP_PLUS_PLUS | OP_SLASH | OP_TILDE | KW_TRUE )
			int alt53=22;
			try { DebugEnterDecision(53, false);
			switch (input.LA(1))
			{
			case OP_AMPERSAND:
				{
				alt53 = 1;
				}
				break;
			case OP_ASTERISK:
				{
				alt53 = 2;
				}
				break;
			case OP_BAR:
				{
				alt53 = 3;
				}
				break;
			case OP_CARET:
				{
				alt53 = 4;
				}
				break;
			case OP_EQUALS_EQUALS:
				{
				alt53 = 5;
				}
				break;
			case OP_EXCLAMATION:
				{
				alt53 = 6;
				}
				break;
			case OP_EXCLAMATION_EQUALS:
				{
				alt53 = 7;
				}
				break;
			case KW_FALSE:
				{
				alt53 = 8;
				}
				break;
			case OP_GREATER_THAN:
				{
				alt53 = 9;
				}
				break;
			case OP_GREATER_THAN_EQUALS:
				{
				alt53 = 10;
				}
				break;
			case OP_GREATER_THAN_GREATER_THAN_FIRST:
				{
				alt53 = 11;
				}
				break;
			case OP_LESS_THAN:
				{
				alt53 = 12;
				}
				break;
			case OP_LESS_THAN_EQUALS:
				{
				alt53 = 13;
				}
				break;
			case OP_LESS_THAN_LESS_THAN:
				{
				alt53 = 14;
				}
				break;
			case OP_MINUS:
				{
				alt53 = 15;
				}
				break;
			case OP_MINUS_MINUS:
				{
				alt53 = 16;
				}
				break;
			case OP_PERCENT:
				{
				alt53 = 17;
				}
				break;
			case OP_PLUS:
				{
				alt53 = 18;
				}
				break;
			case OP_PLUS_PLUS:
				{
				alt53 = 19;
				}
				break;
			case OP_SLASH:
				{
				alt53 = 20;
				}
				break;
			case OP_TILDE:
				{
				alt53 = 21;
				}
				break;
			case KW_TRUE:
				{
				alt53 = 22;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 53, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:832:7: OP_AMPERSAND
				{
				DebugLocation(832, 7);
				Match(input,OP_AMPERSAND,Follow._OP_AMPERSAND_in_operator5529); if (state.failed) return value;
				DebugLocation(832, 20);
				if (state.backtracking == 0)
				{
					 value = Operator.Ampersand; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:833:7: OP_ASTERISK
				{
				DebugLocation(833, 7);
				Match(input,OP_ASTERISK,Follow._OP_ASTERISK_in_operator5539); if (state.failed) return value;
				DebugLocation(833, 19);
				if (state.backtracking == 0)
				{
					 value = Operator.Asterisk; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:834:7: OP_BAR
				{
				DebugLocation(834, 7);
				Match(input,OP_BAR,Follow._OP_BAR_in_operator5549); if (state.failed) return value;
				DebugLocation(834, 14);
				if (state.backtracking == 0)
				{
					 value = Operator.Bar; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:835:7: OP_CARET
				{
				DebugLocation(835, 7);
				Match(input,OP_CARET,Follow._OP_CARET_in_operator5559); if (state.failed) return value;
				DebugLocation(835, 16);
				if (state.backtracking == 0)
				{
					 value = Operator.Caret; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:836:7: OP_EQUALS_EQUALS
				{
				DebugLocation(836, 7);
				Match(input,OP_EQUALS_EQUALS,Follow._OP_EQUALS_EQUALS_in_operator5569); if (state.failed) return value;
				DebugLocation(836, 24);
				if (state.backtracking == 0)
				{
					 value = Operator.EqualsEquals; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:837:7: OP_EXCLAMATION
				{
				DebugLocation(837, 7);
				Match(input,OP_EXCLAMATION,Follow._OP_EXCLAMATION_in_operator5579); if (state.failed) return value;
				DebugLocation(837, 22);
				if (state.backtracking == 0)
				{
					 value = Operator.Exclamation; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:838:7: OP_EXCLAMATION_EQUALS
				{
				DebugLocation(838, 7);
				Match(input,OP_EXCLAMATION_EQUALS,Follow._OP_EXCLAMATION_EQUALS_in_operator5589); if (state.failed) return value;
				DebugLocation(838, 29);
				if (state.backtracking == 0)
				{
					 value = Operator.ExclamationEquals; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:839:7: KW_FALSE
				{
				DebugLocation(839, 7);
				Match(input,KW_FALSE,Follow._KW_FALSE_in_operator5599); if (state.failed) return value;
				DebugLocation(839, 16);
				if (state.backtracking == 0)
				{
					 value = Operator.False; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:840:7: OP_GREATER_THAN
				{
				DebugLocation(840, 7);
				Match(input,OP_GREATER_THAN,Follow._OP_GREATER_THAN_in_operator5609); if (state.failed) return value;
				DebugLocation(840, 23);
				if (state.backtracking == 0)
				{
					 value = Operator.GreaterThan; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Truss.g:841:7: OP_GREATER_THAN_EQUALS
				{
				DebugLocation(841, 7);
				Match(input,OP_GREATER_THAN_EQUALS,Follow._OP_GREATER_THAN_EQUALS_in_operator5619); if (state.failed) return value;
				DebugLocation(841, 30);
				if (state.backtracking == 0)
				{
					 value = Operator.GreaterThanEquals; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Truss.g:842:7: op_GREATER_THAN_GREATER_THAN
				{
				DebugLocation(842, 7);
				PushFollow(Follow._op_GREATER_THAN_GREATER_THAN_in_operator5629);
				op_GREATER_THAN_GREATER_THAN();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(842, 36);
				if (state.backtracking == 0)
				{
					 value = Operator.GreaterThanGreaterThan; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Truss.g:843:7: OP_LESS_THAN
				{
				DebugLocation(843, 7);
				Match(input,OP_LESS_THAN,Follow._OP_LESS_THAN_in_operator5639); if (state.failed) return value;
				DebugLocation(843, 20);
				if (state.backtracking == 0)
				{
					 value = Operator.LessThan; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Truss.g:844:7: OP_LESS_THAN_EQUALS
				{
				DebugLocation(844, 7);
				Match(input,OP_LESS_THAN_EQUALS,Follow._OP_LESS_THAN_EQUALS_in_operator5649); if (state.failed) return value;
				DebugLocation(844, 27);
				if (state.backtracking == 0)
				{
					 value = Operator.LessThanEquals; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Truss.g:845:7: OP_LESS_THAN_LESS_THAN
				{
				DebugLocation(845, 7);
				Match(input,OP_LESS_THAN_LESS_THAN,Follow._OP_LESS_THAN_LESS_THAN_in_operator5659); if (state.failed) return value;
				DebugLocation(845, 30);
				if (state.backtracking == 0)
				{
					 value = Operator.LessThanLessThan; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Truss.g:846:7: OP_MINUS
				{
				DebugLocation(846, 7);
				Match(input,OP_MINUS,Follow._OP_MINUS_in_operator5669); if (state.failed) return value;
				DebugLocation(846, 16);
				if (state.backtracking == 0)
				{
					 value = Operator.Minus; 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Truss.g:847:7: OP_MINUS_MINUS
				{
				DebugLocation(847, 7);
				Match(input,OP_MINUS_MINUS,Follow._OP_MINUS_MINUS_in_operator5679); if (state.failed) return value;
				DebugLocation(847, 22);
				if (state.backtracking == 0)
				{
					 value = Operator.MinusMinus; 
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Truss.g:848:7: OP_PERCENT
				{
				DebugLocation(848, 7);
				Match(input,OP_PERCENT,Follow._OP_PERCENT_in_operator5689); if (state.failed) return value;
				DebugLocation(848, 18);
				if (state.backtracking == 0)
				{
					 value = Operator.Percent; 
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Truss.g:849:7: OP_PLUS
				{
				DebugLocation(849, 7);
				Match(input,OP_PLUS,Follow._OP_PLUS_in_operator5699); if (state.failed) return value;
				DebugLocation(849, 15);
				if (state.backtracking == 0)
				{
					 value = Operator.Plus; 
				}

				}
				break;
			case 19:
				DebugEnterAlt(19);
				// Truss.g:850:7: OP_PLUS_PLUS
				{
				DebugLocation(850, 7);
				Match(input,OP_PLUS_PLUS,Follow._OP_PLUS_PLUS_in_operator5709); if (state.failed) return value;
				DebugLocation(850, 20);
				if (state.backtracking == 0)
				{
					 value = Operator.PlusPlus; 
				}

				}
				break;
			case 20:
				DebugEnterAlt(20);
				// Truss.g:851:7: OP_SLASH
				{
				DebugLocation(851, 7);
				Match(input,OP_SLASH,Follow._OP_SLASH_in_operator5719); if (state.failed) return value;
				DebugLocation(851, 16);
				if (state.backtracking == 0)
				{
					 value = Operator.Slash; 
				}

				}
				break;
			case 21:
				DebugEnterAlt(21);
				// Truss.g:852:7: OP_TILDE
				{
				DebugLocation(852, 7);
				Match(input,OP_TILDE,Follow._OP_TILDE_in_operator5729); if (state.failed) return value;
				DebugLocation(852, 16);
				if (state.backtracking == 0)
				{
					 value = Operator.Tilde; 
				}

				}
				break;
			case 22:
				DebugEnterAlt(22);
				// Truss.g:853:7: KW_TRUE
				{
				DebugLocation(853, 7);
				Match(input,KW_TRUE,Follow._KW_TRUE_in_operator5739); if (state.failed) return value;
				DebugLocation(853, 15);
				if (state.backtracking == 0)
				{
					 value = Operator.True; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("operator", 43);
			LeaveRule("operator", 43);
			LeaveRule_operator();
		}
		DebugLocation(854, 4);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return value;

	}
	// $ANTLR end "operator"

	partial void EnterRule_block();
	partial void LeaveRule_block();
	// $ANTLR start "block"
	// Truss.g:858:1: block returns [BlockSyntax value] : OP_BRACE_OPEN (s= statement )* OP_BRACE_CLOSE ;
	[GrammarRule("block")]
	private BlockSyntax block()
	{
		EnterRule_block();
		EnterRule("block", 44);
		TraceIn("block", 44);
		BlockSyntax value = default(BlockSyntax);


		StatementSyntax s = default(StatementSyntax);


		    var start = input.LT(1);
		    var statements = new ImmutableArray<StatementSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "block");
		DebugLocation(858, 4);
		try
		{
			// Truss.g:863:5: ( OP_BRACE_OPEN (s= statement )* OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:864:9: OP_BRACE_OPEN (s= statement )* OP_BRACE_CLOSE
			{
			DebugLocation(864, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_block5777); if (state.failed) return value;
			DebugLocation(865, 9);
			// Truss.g:865:9: (s= statement )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=2;
				try { DebugEnterDecision(54, false);
				int LA54_1 = input.LA(1);

				if ((LA54_1==CHAR||LA54_1==FLOAT||(LA54_1>=HEX_INTEGER && LA54_1<=IDENTIFIER)||LA54_1==INTEGER||(LA54_1>=KW_ASSERT && LA54_1<=KW_BYTE)||LA54_1==KW_CHAR||(LA54_1>=KW_CONTINUE && LA54_1<=KW_DEFAULT)||(LA54_1>=KW_DELETE && LA54_1<=KW_DOUBLE)||LA54_1==KW_FALSE||(LA54_1>=KW_FLOAT && LA54_1<=KW_IF)||LA54_1==KW_INT||(LA54_1>=KW_LONG && LA54_1<=KW_LOOP)||(LA54_1>=KW_NEW && LA54_1<=KW_OBJECT)||LA54_1==KW_READONLY||(LA54_1>=KW_RETURN && LA54_1<=KW_SBYTE)||(LA54_1>=KW_SHORT && LA54_1<=KW_SIZEOF)||LA54_1==KW_STRING||(LA54_1>=KW_SWITCH && LA54_1<=KW_VAR)||LA54_1==KW_VOID||LA54_1==KW_WHILE||LA54_1==OP_AMPERSAND||LA54_1==OP_BRACE_OPEN||LA54_1==OP_EXCLAMATION||LA54_1==OP_MINUS||LA54_1==OP_MINUS_MINUS||LA54_1==OP_PAREN_OPEN||LA54_1==OP_PLUS||LA54_1==OP_PLUS_PLUS||LA54_1==OP_SEMICOLON||(LA54_1>=OP_TILDE && LA54_1<=STRING)))
				{
					alt54 = 1;
				}


				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:866:13: s= statement
					{
					DebugLocation(866, 14);
					PushFollow(Follow._statement_in_block5803);
					s=statement();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(867, 13);
					if (state.backtracking == 0)
					{
						 statements.Add(s); 
					}

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }

			DebugLocation(869, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_block5838); if (state.failed) return value;
			DebugLocation(870, 9);
			if (state.backtracking == 0)
			{
				 return new BlockSyntax(statements.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("block", 44);
			LeaveRule("block", 44);
			LeaveRule_block();
		}
		DebugLocation(871, 4);
		} finally { DebugExitRule(GrammarFileName, "block"); }
		return value;

	}
	// $ANTLR end "block"

	partial void EnterRule_statement();
	partial void LeaveRule_statement();
	// $ANTLR start "statement"
	// Truss.g:873:1: statement returns [StatementSyntax value] : ( ( ( KW_READONLY )? variableDeclarationHeadScan )=>e1= localDeclarationStatement |e4= assertStatement |e5= block |e6= breakContinueStatement |e7= doStatement |e8= emptyStatement |e9= expressionStatement |e10= forEachStatement |e11= forStatement |e12= ifStatement |e13= returnStatement |e14= switchStatement |e15= throwStatement |e16= tryStatement |e17= usingStatement |e18= loopStatement |e19= whileStatement |e20= deleteStatement );
	[GrammarRule("statement")]
	private StatementSyntax statement()
	{
		EnterRule_statement();
		EnterRule("statement", 45);
		TraceIn("statement", 45);
		StatementSyntax value = default(StatementSyntax);


		LocalDeclarationStatementSyntax e1 = default(LocalDeclarationStatementSyntax);
		AssertStatementSyntax e4 = default(AssertStatementSyntax);
		BlockSyntax e5 = default(BlockSyntax);
		StatementSyntax e6 = default(StatementSyntax);
		DoStatementSyntax e7 = default(DoStatementSyntax);
		EmptyStatementSyntax e8 = default(EmptyStatementSyntax);
		ExpressionStatementSyntax e9 = default(ExpressionStatementSyntax);
		ForEachStatementSyntax e10 = default(ForEachStatementSyntax);
		ForStatementSyntax e11 = default(ForStatementSyntax);
		IfStatementSyntax e12 = default(IfStatementSyntax);
		ReturnStatementSyntax e13 = default(ReturnStatementSyntax);
		SwitchStatementSyntax e14 = default(SwitchStatementSyntax);
		ThrowStatementSyntax e15 = default(ThrowStatementSyntax);
		TryStatementSyntax e16 = default(TryStatementSyntax);
		UsingStatementSyntax e17 = default(UsingStatementSyntax);
		LoopStatementSyntax e18 = default(LoopStatementSyntax);
		WhileStatementSyntax e19 = default(WhileStatementSyntax);
		DeleteStatementSyntax e20 = default(DeleteStatementSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "statement");
		DebugLocation(873, 4);
		try
		{
			// Truss.g:877:5: ( ( ( KW_READONLY )? variableDeclarationHeadScan )=>e1= localDeclarationStatement |e4= assertStatement |e5= block |e6= breakContinueStatement |e7= doStatement |e8= emptyStatement |e9= expressionStatement |e10= forEachStatement |e11= forStatement |e12= ifStatement |e13= returnStatement |e14= switchStatement |e15= throwStatement |e16= tryStatement |e17= usingStatement |e18= loopStatement |e19= whileStatement |e20= deleteStatement )
			int alt55=18;
			try { DebugEnterDecision(55, false);
			try
			{
				alt55 = dfa55.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:877:7: ( ( KW_READONLY )? variableDeclarationHeadScan )=>e1= localDeclarationStatement
				{
				DebugLocation(877, 56);
				PushFollow(Follow._localDeclarationStatement_in_statement5886);
				e1=localDeclarationStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(877, 83);
				if (state.backtracking == 0)
				{
					 value = e1; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:878:7: e4= assertStatement
				{
				DebugLocation(878, 9);
				PushFollow(Follow._assertStatement_in_statement5898);
				e4=assertStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(878, 26);
				if (state.backtracking == 0)
				{
					 value = e4; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:879:7: e5= block
				{
				DebugLocation(879, 9);
				PushFollow(Follow._block_in_statement5910);
				e5=block();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(879, 16);
				if (state.backtracking == 0)
				{
					 value = e5; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:880:7: e6= breakContinueStatement
				{
				DebugLocation(880, 9);
				PushFollow(Follow._breakContinueStatement_in_statement5922);
				e6=breakContinueStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(880, 33);
				if (state.backtracking == 0)
				{
					 value = e6; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:881:7: e7= doStatement
				{
				DebugLocation(881, 9);
				PushFollow(Follow._doStatement_in_statement5934);
				e7=doStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(881, 22);
				if (state.backtracking == 0)
				{
					 value = e7; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:882:7: e8= emptyStatement
				{
				DebugLocation(882, 9);
				PushFollow(Follow._emptyStatement_in_statement5946);
				e8=emptyStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(882, 25);
				if (state.backtracking == 0)
				{
					 value = e8; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:883:7: e9= expressionStatement
				{
				DebugLocation(883, 9);
				PushFollow(Follow._expressionStatement_in_statement5958);
				e9=expressionStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(883, 30);
				if (state.backtracking == 0)
				{
					 value = e9; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:884:7: e10= forEachStatement
				{
				DebugLocation(884, 10);
				PushFollow(Follow._forEachStatement_in_statement5970);
				e10=forEachStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(884, 28);
				if (state.backtracking == 0)
				{
					 value = e10; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:885:7: e11= forStatement
				{
				DebugLocation(885, 10);
				PushFollow(Follow._forStatement_in_statement5982);
				e11=forStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(885, 24);
				if (state.backtracking == 0)
				{
					 value = e11; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Truss.g:886:7: e12= ifStatement
				{
				DebugLocation(886, 10);
				PushFollow(Follow._ifStatement_in_statement5994);
				e12=ifStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(886, 23);
				if (state.backtracking == 0)
				{
					 value = e12; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Truss.g:887:7: e13= returnStatement
				{
				DebugLocation(887, 10);
				PushFollow(Follow._returnStatement_in_statement6006);
				e13=returnStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(887, 27);
				if (state.backtracking == 0)
				{
					 value = e13; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Truss.g:888:7: e14= switchStatement
				{
				DebugLocation(888, 10);
				PushFollow(Follow._switchStatement_in_statement6018);
				e14=switchStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(888, 27);
				if (state.backtracking == 0)
				{
					 value = e14; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Truss.g:889:7: e15= throwStatement
				{
				DebugLocation(889, 10);
				PushFollow(Follow._throwStatement_in_statement6030);
				e15=throwStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(889, 26);
				if (state.backtracking == 0)
				{
					 value = e15; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Truss.g:890:7: e16= tryStatement
				{
				DebugLocation(890, 10);
				PushFollow(Follow._tryStatement_in_statement6042);
				e16=tryStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(890, 24);
				if (state.backtracking == 0)
				{
					 value = e16; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Truss.g:891:7: e17= usingStatement
				{
				DebugLocation(891, 10);
				PushFollow(Follow._usingStatement_in_statement6054);
				e17=usingStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(891, 26);
				if (state.backtracking == 0)
				{
					 value = e17; 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Truss.g:892:7: e18= loopStatement
				{
				DebugLocation(892, 10);
				PushFollow(Follow._loopStatement_in_statement6066);
				e18=loopStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(892, 25);
				if (state.backtracking == 0)
				{
					 value = e18; 
				}

				}
				break;
			case 17:
				DebugEnterAlt(17);
				// Truss.g:893:7: e19= whileStatement
				{
				DebugLocation(893, 10);
				PushFollow(Follow._whileStatement_in_statement6078);
				e19=whileStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(893, 26);
				if (state.backtracking == 0)
				{
					 value = e19; 
				}

				}
				break;
			case 18:
				DebugEnterAlt(18);
				// Truss.g:894:7: e20= deleteStatement
				{
				DebugLocation(894, 10);
				PushFollow(Follow._deleteStatement_in_statement6090);
				e20=deleteStatement();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(894, 27);
				if (state.backtracking == 0)
				{
					 value = e20; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("statement", 45);
			LeaveRule("statement", 45);
			LeaveRule_statement();
		}
		DebugLocation(895, 4);
		} finally { DebugExitRule(GrammarFileName, "statement"); }
		return value;

	}
	// $ANTLR end "statement"

	partial void EnterRule_assertStatement();
	partial void LeaveRule_assertStatement();
	// $ANTLR start "assertStatement"
	// Truss.g:897:1: assertStatement returns [AssertStatementSyntax value] : KW_ASSERT eod= expressionOrDeclaration OP_SEMICOLON ;
	[GrammarRule("assertStatement")]
	private AssertStatementSyntax assertStatement()
	{
		EnterRule_assertStatement();
		EnterRule("assertStatement", 46);
		TraceIn("assertStatement", 46);
		AssertStatementSyntax value = default(AssertStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "assertStatement");
		DebugLocation(897, 4);
		try
		{
			// Truss.g:901:5: ( KW_ASSERT eod= expressionOrDeclaration OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:902:9: KW_ASSERT eod= expressionOrDeclaration OP_SEMICOLON
			{
			DebugLocation(902, 9);
			Match(input,KW_ASSERT,Follow._KW_ASSERT_in_assertStatement6126); if (state.failed) return value;
			DebugLocation(903, 12);
			PushFollow(Follow._expressionOrDeclaration_in_assertStatement6138);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(904, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_assertStatement6148); if (state.failed) return value;
			DebugLocation(905, 9);
			if (state.backtracking == 0)
			{
				 value = new AssertStatementSyntax(eod, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assertStatement", 46);
			LeaveRule("assertStatement", 46);
			LeaveRule_assertStatement();
		}
		DebugLocation(906, 4);
		} finally { DebugExitRule(GrammarFileName, "assertStatement"); }
		return value;

	}
	// $ANTLR end "assertStatement"

	partial void EnterRule_breakContinueStatement();
	partial void LeaveRule_breakContinueStatement();
	// $ANTLR start "breakContinueStatement"
	// Truss.g:908:1: breakContinueStatement returns [StatementSyntax value] : ( KW_BREAK | KW_CONTINUE ) OP_SEMICOLON ;
	[GrammarRule("breakContinueStatement")]
	private StatementSyntax breakContinueStatement()
	{
		EnterRule_breakContinueStatement();
		EnterRule("breakContinueStatement", 47);
		TraceIn("breakContinueStatement", 47);
		StatementSyntax value = default(StatementSyntax);



		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "breakContinueStatement");
		DebugLocation(908, 4);
		try
		{
			// Truss.g:912:5: ( ( KW_BREAK | KW_CONTINUE ) OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:913:5: ( KW_BREAK | KW_CONTINUE ) OP_SEMICOLON
			{
			DebugLocation(913, 5);
			// Truss.g:913:5: ( KW_BREAK | KW_CONTINUE )
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_1 = input.LA(1);

			if ((LA56_1==KW_BREAK))
			{
				alt56 = 1;
			}
			else if ((LA56_1==KW_CONTINUE))
			{
				alt56 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 56, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:913:7: KW_BREAK
				{
				DebugLocation(913, 7);
				Match(input,KW_BREAK,Follow._KW_BREAK_in_breakContinueStatement6190); if (state.failed) return value;
				DebugLocation(913, 16);
				if (state.backtracking == 0)
				{
					 value = new BreakStatementSyntax(Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:914:7: KW_CONTINUE
				{
				DebugLocation(914, 7);
				Match(input,KW_CONTINUE,Follow._KW_CONTINUE_in_breakContinueStatement6200); if (state.failed) return value;
				DebugLocation(914, 19);
				if (state.backtracking == 0)
				{
					 value = new ContinueStatementSyntax(Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(916, 5);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_breakContinueStatement6214); if (state.failed) return value;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("breakContinueStatement", 47);
			LeaveRule("breakContinueStatement", 47);
			LeaveRule_breakContinueStatement();
		}
		DebugLocation(917, 4);
		} finally { DebugExitRule(GrammarFileName, "breakContinueStatement"); }
		return value;

	}
	// $ANTLR end "breakContinueStatement"

	partial void EnterRule_doStatement();
	partial void LeaveRule_doStatement();
	// $ANTLR start "doStatement"
	// Truss.g:919:1: doStatement returns [DoStatementSyntax value] : KW_DO b= block KW_WHILE eod= expressionOrDeclaration OP_SEMICOLON ;
	[GrammarRule("doStatement")]
	private DoStatementSyntax doStatement()
	{
		EnterRule_doStatement();
		EnterRule("doStatement", 48);
		TraceIn("doStatement", 48);
		DoStatementSyntax value = default(DoStatementSyntax);


		BlockSyntax b = default(BlockSyntax);
		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "doStatement");
		DebugLocation(919, 4);
		try
		{
			// Truss.g:923:5: ( KW_DO b= block KW_WHILE eod= expressionOrDeclaration OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:924:9: KW_DO b= block KW_WHILE eod= expressionOrDeclaration OP_SEMICOLON
			{
			DebugLocation(924, 9);
			Match(input,KW_DO,Follow._KW_DO_in_doStatement6248); if (state.failed) return value;
			DebugLocation(925, 10);
			PushFollow(Follow._block_in_doStatement6260);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(926, 9);
			Match(input,KW_WHILE,Follow._KW_WHILE_in_doStatement6270); if (state.failed) return value;
			DebugLocation(927, 12);
			PushFollow(Follow._expressionOrDeclaration_in_doStatement6282);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(928, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_doStatement6292); if (state.failed) return value;
			DebugLocation(929, 9);
			if (state.backtracking == 0)
			{
				 value = new DoStatementSyntax(eod, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("doStatement", 48);
			LeaveRule("doStatement", 48);
			LeaveRule_doStatement();
		}
		DebugLocation(930, 4);
		} finally { DebugExitRule(GrammarFileName, "doStatement"); }
		return value;

	}
	// $ANTLR end "doStatement"

	partial void EnterRule_emptyStatement();
	partial void LeaveRule_emptyStatement();
	// $ANTLR start "emptyStatement"
	// Truss.g:932:1: emptyStatement returns [EmptyStatementSyntax value] : OP_SEMICOLON ;
	[GrammarRule("emptyStatement")]
	private EmptyStatementSyntax emptyStatement()
	{
		EnterRule_emptyStatement();
		EnterRule("emptyStatement", 49);
		TraceIn("emptyStatement", 49);
		EmptyStatementSyntax value = default(EmptyStatementSyntax);



		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "emptyStatement");
		DebugLocation(932, 4);
		try
		{
			// Truss.g:936:5: ( OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:937:9: OP_SEMICOLON
			{
			DebugLocation(937, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_emptyStatement6336); if (state.failed) return value;
			DebugLocation(938, 9);
			if (state.backtracking == 0)
			{
				 value = new EmptyStatementSyntax(Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("emptyStatement", 49);
			LeaveRule("emptyStatement", 49);
			LeaveRule_emptyStatement();
		}
		DebugLocation(939, 4);
		} finally { DebugExitRule(GrammarFileName, "emptyStatement"); }
		return value;

	}
	// $ANTLR end "emptyStatement"

	partial void EnterRule_expressionStatement();
	partial void LeaveRule_expressionStatement();
	// $ANTLR start "expressionStatement"
	// Truss.g:941:1: expressionStatement returns [ExpressionStatementSyntax value] : e= expression OP_SEMICOLON ;
	[GrammarRule("expressionStatement")]
	private ExpressionStatementSyntax expressionStatement()
	{
		EnterRule_expressionStatement();
		EnterRule("expressionStatement", 50);
		TraceIn("expressionStatement", 50);
		ExpressionStatementSyntax value = default(ExpressionStatementSyntax);


		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "expressionStatement");
		DebugLocation(941, 4);
		try
		{
			// Truss.g:945:5: (e= expression OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:946:9: e= expression OP_SEMICOLON
			{
			DebugLocation(946, 10);
			PushFollow(Follow._expression_in_expressionStatement6382);
			e=expression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(947, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_expressionStatement6392); if (state.failed) return value;
			DebugLocation(948, 9);
			if (state.backtracking == 0)
			{
				 value = new ExpressionStatementSyntax(e, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionStatement", 50);
			LeaveRule("expressionStatement", 50);
			LeaveRule_expressionStatement();
		}
		DebugLocation(949, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionStatement"); }
		return value;

	}
	// $ANTLR end "expressionStatement"

	partial void EnterRule_forEachStatement();
	partial void LeaveRule_forEachStatement();
	// $ANTLR start "forEachStatement"
	// Truss.g:951:1: forEachStatement returns [ForEachStatementSyntax value] : KW_FOREACH t= typeSyntax idn= identifierName KW_IN e= expression b= block ;
	[GrammarRule("forEachStatement")]
	private ForEachStatementSyntax forEachStatement()
	{
		EnterRule_forEachStatement();
		EnterRule("forEachStatement", 51);
		TraceIn("forEachStatement", 51);
		ForEachStatementSyntax value = default(ForEachStatementSyntax);


		TypeSyntax t = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forEachStatement");
		DebugLocation(951, 4);
		try
		{
			// Truss.g:955:5: ( KW_FOREACH t= typeSyntax idn= identifierName KW_IN e= expression b= block )
			DebugEnterAlt(1);
			// Truss.g:956:9: KW_FOREACH t= typeSyntax idn= identifierName KW_IN e= expression b= block
			{
			DebugLocation(956, 9);
			Match(input,KW_FOREACH,Follow._KW_FOREACH_in_forEachStatement6436); if (state.failed) return value;
			DebugLocation(957, 10);
			PushFollow(Follow._typeSyntax_in_forEachStatement6448);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(958, 12);
			PushFollow(Follow._identifierName_in_forEachStatement6460);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(959, 9);
			Match(input,KW_IN,Follow._KW_IN_in_forEachStatement6470); if (state.failed) return value;
			DebugLocation(960, 10);
			PushFollow(Follow._expression_in_forEachStatement6482);
			e=expression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(961, 10);
			PushFollow(Follow._block_in_forEachStatement6494);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(962, 9);
			if (state.backtracking == 0)
			{
				 value = new ForEachStatementSyntax(t, idn, e, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forEachStatement", 51);
			LeaveRule("forEachStatement", 51);
			LeaveRule_forEachStatement();
		}
		DebugLocation(963, 4);
		} finally { DebugExitRule(GrammarFileName, "forEachStatement"); }
		return value;

	}
	// $ANTLR end "forEachStatement"

	partial void EnterRule_forStatement();
	partial void LeaveRule_forStatement();
	// $ANTLR start "forStatement"
	// Truss.g:965:1: forStatement returns [ForStatementSyntax value] : KW_FOR ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |el1= expressionList )? OP_SEMICOLON (e= expression )? OP_SEMICOLON (el2= expressionList )? b= block ;
	[GrammarRule("forStatement")]
	private ForStatementSyntax forStatement()
	{
		EnterRule_forStatement();
		EnterRule("forStatement", 52);
		TraceIn("forStatement", 52);
		ForStatementSyntax value = default(ForStatementSyntax);


		VariableDeclarationSyntax vd = default(VariableDeclarationSyntax);
		ImmutableArray<ExpressionSyntax> el1 = default(ImmutableArray<ExpressionSyntax>);
		ExpressionSyntax e = default(ExpressionSyntax);
		ImmutableArray<ExpressionSyntax> el2 = default(ImmutableArray<ExpressionSyntax>);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "forStatement");
		DebugLocation(965, 4);
		try
		{
			// Truss.g:969:5: ( KW_FOR ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |el1= expressionList )? OP_SEMICOLON (e= expression )? OP_SEMICOLON (el2= expressionList )? b= block )
			DebugEnterAlt(1);
			// Truss.g:970:9: KW_FOR ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |el1= expressionList )? OP_SEMICOLON (e= expression )? OP_SEMICOLON (el2= expressionList )? b= block
			{
			DebugLocation(970, 9);
			Match(input,KW_FOR,Follow._KW_FOR_in_forStatement6538); if (state.failed) return value;
			DebugLocation(971, 9);
			// Truss.g:971:9: ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |el1= expressionList )?
			int alt57=3;
			try { DebugEnterSubRule(57);
			try { DebugEnterDecision(57, false);
			int LA57_1 = input.LA(1);

			if ((LA57_1==KW_VAR) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_BOOL) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_BYTE) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_CHAR) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_DECIMAL) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_DOUBLE) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_FLOAT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_INT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_LONG) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_OBJECT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_SBYTE) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_SHORT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_STRING) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_UINT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_ULONG) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_USHORT) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==KW_VOID) && (EvaluatePredicate(synpred8_Truss_fragment)))
			{
				alt57 = 1;
			}
			else if ((LA57_1==IDENTIFIER))
			{
				int LA57_2 = input.LA(2);

				if ((EvaluatePredicate(synpred8_Truss_fragment)))
				{
					alt57 = 1;
				}
				else if ((true))
				{
					alt57 = 2;
				}
			}
			else if ((LA57_1==CHAR||LA57_1==FLOAT||LA57_1==HEX_INTEGER||LA57_1==INTEGER||(LA57_1>=KW_ASYNC && LA57_1<=KW_BASE)||LA57_1==KW_DEFAULT||LA57_1==KW_FALSE||(LA57_1>=KW_NEW && LA57_1<=KW_NIL)||LA57_1==KW_SIZEOF||LA57_1==KW_THIS||LA57_1==KW_TRUE||LA57_1==KW_TYPEOF||LA57_1==OP_AMPERSAND||LA57_1==OP_EXCLAMATION||LA57_1==OP_MINUS||LA57_1==OP_MINUS_MINUS||LA57_1==OP_PAREN_OPEN||LA57_1==OP_PLUS||LA57_1==OP_PLUS_PLUS||(LA57_1>=OP_TILDE && LA57_1<=STRING)))
			{
				alt57 = 2;
			}
			} finally { DebugExitDecision(57); }
			switch (alt57)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:972:13: ( variableDeclarationHeadScan )=>vd= variableDeclaration
				{
				DebugLocation(973, 15);
				PushFollow(Follow._variableDeclaration_in_forStatement6583);
				vd=variableDeclaration();
				PopFollow();
				if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:975:13: el1= expressionList
				{
				DebugLocation(975, 16);
				PushFollow(Follow._expressionList_in_forStatement6609);
				el1=expressionList();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(57); }

			DebugLocation(977, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_forStatement6630); if (state.failed) return value;
			DebugLocation(978, 9);
			// Truss.g:978:9: (e= expression )?
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_1 = input.LA(1);

			if ((LA58_1==CHAR||LA58_1==FLOAT||(LA58_1>=HEX_INTEGER && LA58_1<=IDENTIFIER)||LA58_1==INTEGER||(LA58_1>=KW_ASYNC && LA58_1<=KW_BASE)||LA58_1==KW_DEFAULT||LA58_1==KW_FALSE||(LA58_1>=KW_NEW && LA58_1<=KW_NIL)||LA58_1==KW_SIZEOF||LA58_1==KW_THIS||LA58_1==KW_TRUE||LA58_1==KW_TYPEOF||LA58_1==OP_AMPERSAND||LA58_1==OP_EXCLAMATION||LA58_1==OP_MINUS||LA58_1==OP_MINUS_MINUS||LA58_1==OP_PAREN_OPEN||LA58_1==OP_PLUS||LA58_1==OP_PLUS_PLUS||(LA58_1>=OP_TILDE && LA58_1<=STRING)))
			{
				alt58 = 1;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:978:11: e= expression
				{
				DebugLocation(978, 12);
				PushFollow(Follow._expression_in_forStatement6644);
				e=expression();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(58); }

			DebugLocation(979, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_forStatement6657); if (state.failed) return value;
			DebugLocation(980, 9);
			// Truss.g:980:9: (el2= expressionList )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_1 = input.LA(1);

			if ((LA59_1==CHAR||LA59_1==FLOAT||(LA59_1>=HEX_INTEGER && LA59_1<=IDENTIFIER)||LA59_1==INTEGER||(LA59_1>=KW_ASYNC && LA59_1<=KW_BASE)||LA59_1==KW_DEFAULT||LA59_1==KW_FALSE||(LA59_1>=KW_NEW && LA59_1<=KW_NIL)||LA59_1==KW_SIZEOF||LA59_1==KW_THIS||LA59_1==KW_TRUE||LA59_1==KW_TYPEOF||LA59_1==OP_AMPERSAND||LA59_1==OP_EXCLAMATION||LA59_1==OP_MINUS||LA59_1==OP_MINUS_MINUS||LA59_1==OP_PAREN_OPEN||LA59_1==OP_PLUS||LA59_1==OP_PLUS_PLUS||(LA59_1>=OP_TILDE && LA59_1<=STRING)))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:980:11: el2= expressionList
				{
				DebugLocation(980, 14);
				PushFollow(Follow._expressionList_in_forStatement6671);
				el2=expressionList();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(59); }

			DebugLocation(981, 10);
			PushFollow(Follow._block_in_forStatement6686);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(982, 9);
			if (state.backtracking == 0)
			{
				 value = new ForStatementSyntax(vd, el1, e, el2, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("forStatement", 52);
			LeaveRule("forStatement", 52);
			LeaveRule_forStatement();
		}
		DebugLocation(983, 4);
		} finally { DebugExitRule(GrammarFileName, "forStatement"); }
		return value;

	}
	// $ANTLR end "forStatement"

	partial void EnterRule_expressionList();
	partial void LeaveRule_expressionList();
	// $ANTLR start "expressionList"
	// Truss.g:985:1: expressionList returns [ImmutableArray<ExpressionSyntax> value] : e= expression ( OP_COMMA e= expression )* ;
	[GrammarRule("expressionList")]
	private ImmutableArray<ExpressionSyntax> expressionList()
	{
		EnterRule_expressionList();
		EnterRule("expressionList", 53);
		TraceIn("expressionList", 53);
		ImmutableArray<ExpressionSyntax> value = default(ImmutableArray<ExpressionSyntax>);


		ExpressionSyntax e = default(ExpressionSyntax);


		    var expressions = new ImmutableArray<ExpressionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "expressionList");
		DebugLocation(985, 4);
		try
		{
			// Truss.g:989:5: (e= expression ( OP_COMMA e= expression )* )
			DebugEnterAlt(1);
			// Truss.g:990:9: e= expression ( OP_COMMA e= expression )*
			{
			DebugLocation(990, 10);
			PushFollow(Follow._expression_in_expressionList6732);
			e=expression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(991, 9);
			if (state.backtracking == 0)
			{
				 expressions.Add(e); 
			}
			DebugLocation(992, 9);
			// Truss.g:992:9: ( OP_COMMA e= expression )*
			try { DebugEnterSubRule(60);
			while (true)
			{
				int alt60=2;
				try { DebugEnterDecision(60, false);
				int LA60_1 = input.LA(1);

				if ((LA60_1==OP_COMMA))
				{
					alt60 = 1;
				}


				} finally { DebugExitDecision(60); }
				switch ( alt60 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:993:13: OP_COMMA e= expression
					{
					DebugLocation(993, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_expressionList6766); if (state.failed) return value;
					DebugLocation(994, 14);
					PushFollow(Follow._expression_in_expressionList6782);
					e=expression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(995, 13);
					if (state.backtracking == 0)
					{
						 expressions.Add(e); 
					}

					}
					break;

				default:
					goto loop60;
				}
			}

			loop60:
				;

			} finally { DebugExitSubRule(60); }

			DebugLocation(997, 9);
			if (state.backtracking == 0)
			{
				 value = expressions.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionList", 53);
			LeaveRule("expressionList", 53);
			LeaveRule_expressionList();
		}
		DebugLocation(998, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionList"); }
		return value;

	}
	// $ANTLR end "expressionList"

	partial void EnterRule_expressionOrDeclarationList();
	partial void LeaveRule_expressionOrDeclarationList();
	// $ANTLR start "expressionOrDeclarationList"
	// Truss.g:1000:1: expressionOrDeclarationList returns [ImmutableArray<ExpressionSyntax> value] : eod= expressionOrDeclaration ( OP_COMMA eod= expressionOrDeclaration )* ;
	[GrammarRule("expressionOrDeclarationList")]
	private ImmutableArray<ExpressionSyntax> expressionOrDeclarationList()
	{
		EnterRule_expressionOrDeclarationList();
		EnterRule("expressionOrDeclarationList", 54);
		TraceIn("expressionOrDeclarationList", 54);
		ImmutableArray<ExpressionSyntax> value = default(ImmutableArray<ExpressionSyntax>);


		ExpressionSyntax eod = default(ExpressionSyntax);


		    var expressions = new ImmutableArray<ExpressionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "expressionOrDeclarationList");
		DebugLocation(1000, 4);
		try
		{
			// Truss.g:1004:5: (eod= expressionOrDeclaration ( OP_COMMA eod= expressionOrDeclaration )* )
			DebugEnterAlt(1);
			// Truss.g:1005:9: eod= expressionOrDeclaration ( OP_COMMA eod= expressionOrDeclaration )*
			{
			DebugLocation(1005, 12);
			PushFollow(Follow._expressionOrDeclaration_in_expressionOrDeclarationList6853);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1006, 9);
			if (state.backtracking == 0)
			{
				 expressions.Add(eod); 
			}
			DebugLocation(1007, 9);
			// Truss.g:1007:9: ( OP_COMMA eod= expressionOrDeclaration )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_1 = input.LA(1);

				if ((LA61_1==OP_COMMA))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1008:13: OP_COMMA eod= expressionOrDeclaration
					{
					DebugLocation(1008, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_expressionOrDeclarationList6887); if (state.failed) return value;
					DebugLocation(1009, 16);
					PushFollow(Follow._expressionOrDeclaration_in_expressionOrDeclarationList6903);
					eod=expressionOrDeclaration();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1010, 13);
					if (state.backtracking == 0)
					{
						 expressions.Add(eod); 
					}

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(1012, 9);
			if (state.backtracking == 0)
			{
				 value = expressions.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionOrDeclarationList", 54);
			LeaveRule("expressionOrDeclarationList", 54);
			LeaveRule_expressionOrDeclarationList();
		}
		DebugLocation(1013, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionOrDeclarationList"); }
		return value;

	}
	// $ANTLR end "expressionOrDeclarationList"

	partial void EnterRule_ifStatement();
	partial void LeaveRule_ifStatement();
	// $ANTLR start "ifStatement"
	// Truss.g:1015:1: ifStatement returns [IfStatementSyntax value] : KW_IF eod= expressionOrDeclaration b= block (eic= elIfClause )* (ec= elseClause )? ;
	[GrammarRule("ifStatement")]
	private IfStatementSyntax ifStatement()
	{
		EnterRule_ifStatement();
		EnterRule("ifStatement", 55);
		TraceIn("ifStatement", 55);
		IfStatementSyntax value = default(IfStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);
		ElseClauseSyntax eic = default(ElseClauseSyntax);
		ElseClauseSyntax ec = default(ElseClauseSyntax);


		    var start = input.LT(1);
		    var elses = new ImmutableArray<ElseClauseSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "ifStatement");
		DebugLocation(1015, 4);
		try
		{
			// Truss.g:1020:5: ( KW_IF eod= expressionOrDeclaration b= block (eic= elIfClause )* (ec= elseClause )? )
			DebugEnterAlt(1);
			// Truss.g:1021:9: KW_IF eod= expressionOrDeclaration b= block (eic= elIfClause )* (ec= elseClause )?
			{
			DebugLocation(1021, 9);
			Match(input,KW_IF,Follow._KW_IF_in_ifStatement6972); if (state.failed) return value;
			DebugLocation(1022, 12);
			PushFollow(Follow._expressionOrDeclaration_in_ifStatement6984);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1023, 10);
			PushFollow(Follow._block_in_ifStatement6996);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1024, 9);
			// Truss.g:1024:9: (eic= elIfClause )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_1 = input.LA(1);

				if ((LA62_1==KW_ELIF))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1024:11: eic= elIfClause
					{
					DebugLocation(1024, 14);
					PushFollow(Follow._elIfClause_in_ifStatement7010);
					eic=elIfClause();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1024, 26);
					if (state.backtracking == 0)
					{
						 elses.Add(eic); 
					}

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }

			DebugLocation(1025, 9);
			// Truss.g:1025:9: (ec= elseClause )?
			int alt63=2;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_1 = input.LA(1);

			if ((LA63_1==KW_ELSE))
			{
				alt63 = 1;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1025:11: ec= elseClause
				{
				DebugLocation(1025, 13);
				PushFollow(Follow._elseClause_in_ifStatement7029);
				ec=elseClause();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1025, 25);
				if (state.backtracking == 0)
				{
					 elses.Add(ec); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }

			DebugLocation(1026, 9);
			if (state.backtracking == 0)
			{
				 value = new IfStatementSyntax(eod, b, elses.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("ifStatement", 55);
			LeaveRule("ifStatement", 55);
			LeaveRule_ifStatement();
		}
		DebugLocation(1027, 4);
		} finally { DebugExitRule(GrammarFileName, "ifStatement"); }
		return value;

	}
	// $ANTLR end "ifStatement"

	partial void EnterRule_elIfClause();
	partial void LeaveRule_elIfClause();
	// $ANTLR start "elIfClause"
	// Truss.g:1029:1: elIfClause returns [ElseClauseSyntax value] : KW_ELIF eod= expressionOrDeclaration b= block ;
	[GrammarRule("elIfClause")]
	private ElseClauseSyntax elIfClause()
	{
		EnterRule_elIfClause();
		EnterRule("elIfClause", 56);
		TraceIn("elIfClause", 56);
		ElseClauseSyntax value = default(ElseClauseSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "elIfClause");
		DebugLocation(1029, 4);
		try
		{
			// Truss.g:1033:5: ( KW_ELIF eod= expressionOrDeclaration b= block )
			DebugEnterAlt(1);
			// Truss.g:1034:9: KW_ELIF eod= expressionOrDeclaration b= block
			{
			DebugLocation(1034, 9);
			Match(input,KW_ELIF,Follow._KW_ELIF_in_elIfClause7078); if (state.failed) return value;
			DebugLocation(1035, 12);
			PushFollow(Follow._expressionOrDeclaration_in_elIfClause7090);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1036, 10);
			PushFollow(Follow._block_in_elIfClause7102);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1037, 9);
			if (state.backtracking == 0)
			{
				 value = new ElseClauseSyntax(ElIfOrElse.ElIf, eod, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elIfClause", 56);
			LeaveRule("elIfClause", 56);
			LeaveRule_elIfClause();
		}
		DebugLocation(1038, 4);
		} finally { DebugExitRule(GrammarFileName, "elIfClause"); }
		return value;

	}
	// $ANTLR end "elIfClause"

	partial void EnterRule_elseClause();
	partial void LeaveRule_elseClause();
	// $ANTLR start "elseClause"
	// Truss.g:1040:1: elseClause returns [ElseClauseSyntax value] : KW_ELSE b= block ;
	[GrammarRule("elseClause")]
	private ElseClauseSyntax elseClause()
	{
		EnterRule_elseClause();
		EnterRule("elseClause", 57);
		TraceIn("elseClause", 57);
		ElseClauseSyntax value = default(ElseClauseSyntax);


		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "elseClause");
		DebugLocation(1040, 4);
		try
		{
			// Truss.g:1044:5: ( KW_ELSE b= block )
			DebugEnterAlt(1);
			// Truss.g:1045:9: KW_ELSE b= block
			{
			DebugLocation(1045, 9);
			Match(input,KW_ELSE,Follow._KW_ELSE_in_elseClause7146); if (state.failed) return value;
			DebugLocation(1046, 10);
			PushFollow(Follow._block_in_elseClause7158);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1047, 9);
			if (state.backtracking == 0)
			{
				 value = new ElseClauseSyntax(ElIfOrElse.Else, null, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elseClause", 57);
			LeaveRule("elseClause", 57);
			LeaveRule_elseClause();
		}
		DebugLocation(1048, 4);
		} finally { DebugExitRule(GrammarFileName, "elseClause"); }
		return value;

	}
	// $ANTLR end "elseClause"

	partial void EnterRule_localDeclarationStatement();
	partial void LeaveRule_localDeclarationStatement();
	// $ANTLR start "localDeclarationStatement"
	// Truss.g:1050:1: localDeclarationStatement returns [LocalDeclarationStatementSyntax value] : ( KW_READONLY )? vd= variableDeclaration OP_SEMICOLON ;
	[GrammarRule("localDeclarationStatement")]
	private LocalDeclarationStatementSyntax localDeclarationStatement()
	{
		EnterRule_localDeclarationStatement();
		EnterRule("localDeclarationStatement", 58);
		TraceIn("localDeclarationStatement", 58);
		LocalDeclarationStatementSyntax value = default(LocalDeclarationStatementSyntax);


		VariableDeclarationSyntax vd = default(VariableDeclarationSyntax);


		    var modifiers = new ImmutableArray<Modifier>.Builder();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "localDeclarationStatement");
		DebugLocation(1050, 4);
		try
		{
			// Truss.g:1055:5: ( ( KW_READONLY )? vd= variableDeclaration OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:1056:9: ( KW_READONLY )? vd= variableDeclaration OP_SEMICOLON
			{
			DebugLocation(1056, 9);
			// Truss.g:1056:9: ( KW_READONLY )?
			int alt64=2;
			try { DebugEnterSubRule(64);
			try { DebugEnterDecision(64, false);
			int LA64_1 = input.LA(1);

			if ((LA64_1==KW_READONLY))
			{
				alt64 = 1;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1057:13: KW_READONLY
				{
				DebugLocation(1057, 13);
				Match(input,KW_READONLY,Follow._KW_READONLY_in_localDeclarationStatement7216); if (state.failed) return value;
				DebugLocation(1058, 13);
				if (state.backtracking == 0)
				{
					 modifiers.Add(Modifier.Readonly); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(64); }

			DebugLocation(1060, 11);
			PushFollow(Follow._variableDeclaration_in_localDeclarationStatement7253);
			vd=variableDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1061, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_localDeclarationStatement7263); if (state.failed) return value;
			DebugLocation(1062, 9);
			if (state.backtracking == 0)
			{
				 value = new LocalDeclarationStatementSyntax(modifiers.Build(), vd, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("localDeclarationStatement", 58);
			LeaveRule("localDeclarationStatement", 58);
			LeaveRule_localDeclarationStatement();
		}
		DebugLocation(1063, 4);
		} finally { DebugExitRule(GrammarFileName, "localDeclarationStatement"); }
		return value;

	}
	// $ANTLR end "localDeclarationStatement"

	partial void EnterRule_variableDeclarationHeadScan();
	partial void LeaveRule_variableDeclarationHeadScan();
	// $ANTLR start "variableDeclarationHeadScan"
	// Truss.g:1065:1: variableDeclarationHeadScan : typeSyntax identifierName ;
	[GrammarRule("variableDeclarationHeadScan")]
	private void variableDeclarationHeadScan()
	{
		EnterRule_variableDeclarationHeadScan();
		EnterRule("variableDeclarationHeadScan", 59);
		TraceIn("variableDeclarationHeadScan", 59);
		try { DebugEnterRule(GrammarFileName, "variableDeclarationHeadScan");
		DebugLocation(1065, 56);
		try
		{
			// Truss.g:1065:29: ( typeSyntax identifierName )
			DebugEnterAlt(1);
			// Truss.g:1065:31: typeSyntax identifierName
			{
			DebugLocation(1065, 31);
			PushFollow(Follow._typeSyntax_in_variableDeclarationHeadScan7286);
			typeSyntax();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1065, 42);
			PushFollow(Follow._identifierName_in_variableDeclarationHeadScan7288);
			identifierName();
			PopFollow();
			if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationHeadScan", 59);
			LeaveRule("variableDeclarationHeadScan", 59);
			LeaveRule_variableDeclarationHeadScan();
		}
		DebugLocation(1065, 56);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationHeadScan"); }
		return;

	}
	// $ANTLR end "variableDeclarationHeadScan"

	partial void EnterRule_variableDeclaration();
	partial void LeaveRule_variableDeclaration();
	// $ANTLR start "variableDeclaration"
	// Truss.g:1067:1: variableDeclaration returns [VariableDeclarationSyntax value] : t= typeSyntax vdwt= variableDeclarationWithoutType ;
	[GrammarRule("variableDeclaration")]
	private VariableDeclarationSyntax variableDeclaration()
	{
		EnterRule_variableDeclaration();
		EnterRule("variableDeclaration", 60);
		TraceIn("variableDeclaration", 60);
		declarationPrefix_stack.Push(new declarationPrefix_scope(this));declarationPrefix_scopeInit(declarationPrefix_stack.Peek());

		VariableDeclarationSyntax value = default(VariableDeclarationSyntax);


		TypeSyntax t = default(TypeSyntax);
		VariableDeclarationSyntax vdwt = default(VariableDeclarationSyntax);

		try { DebugEnterRule(GrammarFileName, "variableDeclaration");
		DebugLocation(1067, 4);
		try
		{
			// Truss.g:1069:5: (t= typeSyntax vdwt= variableDeclarationWithoutType )
			DebugEnterAlt(1);
			// Truss.g:1070:9: t= typeSyntax vdwt= variableDeclarationWithoutType
			{
			DebugLocation(1070, 10);
			PushFollow(Follow._typeSyntax_in_variableDeclaration7320);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1071, 9);
			if (state.backtracking == 0)
			{
				 declarationPrefix_stack.Peek().type =  t; 
			}
			DebugLocation(1072, 13);
			PushFollow(Follow._variableDeclarationWithoutType_in_variableDeclaration7342);
			vdwt=variableDeclarationWithoutType();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1073, 9);
			if (state.backtracking == 0)
			{
				 value = vdwt; 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclaration", 60);
			LeaveRule("variableDeclaration", 60);
			LeaveRule_variableDeclaration();
			declarationPrefix_scopeAfter(declarationPrefix_stack.Peek());declarationPrefix_stack.Pop();

		}
		DebugLocation(1074, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclaration"); }
		return value;

	}
	// $ANTLR end "variableDeclaration"

	partial void EnterRule_variableDeclarationWithoutType();
	partial void LeaveRule_variableDeclarationWithoutType();
	// $ANTLR start "variableDeclarationWithoutType"
	// Truss.g:1076:1: variableDeclarationWithoutType returns [VariableDeclarationSyntax value] : vd= variableDeclarator ( OP_COMMA vd= variableDeclarator )* ;
	[GrammarRule("variableDeclarationWithoutType")]
	private VariableDeclarationSyntax variableDeclarationWithoutType()
	{
		EnterRule_variableDeclarationWithoutType();
		EnterRule("variableDeclarationWithoutType", 61);
		TraceIn("variableDeclarationWithoutType", 61);
		VariableDeclarationSyntax value = default(VariableDeclarationSyntax);


		VariableDeclaratorSyntax vd = default(VariableDeclaratorSyntax);


		    var start = input.LT(1);
		    var declarators = new ImmutableArray<VariableDeclaratorSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "variableDeclarationWithoutType");
		DebugLocation(1076, 4);
		try
		{
			// Truss.g:1081:5: (vd= variableDeclarator ( OP_COMMA vd= variableDeclarator )* )
			DebugEnterAlt(1);
			// Truss.g:1082:9: vd= variableDeclarator ( OP_COMMA vd= variableDeclarator )*
			{
			DebugLocation(1082, 11);
			PushFollow(Follow._variableDeclarator_in_variableDeclarationWithoutType7388);
			vd=variableDeclarator();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1083, 9);
			if (state.backtracking == 0)
			{
				 declarators.Add(vd); 
			}
			DebugLocation(1084, 9);
			// Truss.g:1084:9: ( OP_COMMA vd= variableDeclarator )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_1 = input.LA(1);

				if ((LA65_1==OP_COMMA))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1085:13: OP_COMMA vd= variableDeclarator
					{
					DebugLocation(1085, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_variableDeclarationWithoutType7422); if (state.failed) return value;
					DebugLocation(1086, 15);
					PushFollow(Follow._variableDeclarator_in_variableDeclarationWithoutType7438);
					vd=variableDeclarator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1087, 13);
					if (state.backtracking == 0)
					{
						 declarators.Add(vd); 
					}

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }

			DebugLocation(1089, 9);
			if (state.backtracking == 0)
			{
				 value = new VariableDeclarationSyntax(declarationPrefix_stack.Peek().type, declarators.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationWithoutType", 61);
			LeaveRule("variableDeclarationWithoutType", 61);
			LeaveRule_variableDeclarationWithoutType();
		}
		DebugLocation(1090, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationWithoutType"); }
		return value;

	}
	// $ANTLR end "variableDeclarationWithoutType"

	partial void EnterRule_variableDeclarator();
	partial void LeaveRule_variableDeclarator();
	// $ANTLR start "variableDeclarator"
	// Truss.g:1092:1: variableDeclarator returns [VariableDeclaratorSyntax value] : idn= identifierName ( OP_EQUALS e= expression )? ;
	[GrammarRule("variableDeclarator")]
	private VariableDeclaratorSyntax variableDeclarator()
	{
		EnterRule_variableDeclarator();
		EnterRule("variableDeclarator", 62);
		TraceIn("variableDeclarator", 62);
		VariableDeclaratorSyntax value = default(VariableDeclaratorSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "variableDeclarator");
		DebugLocation(1092, 4);
		try
		{
			// Truss.g:1096:5: (idn= identifierName ( OP_EQUALS e= expression )? )
			DebugEnterAlt(1);
			// Truss.g:1097:9: idn= identifierName ( OP_EQUALS e= expression )?
			{
			DebugLocation(1097, 12);
			PushFollow(Follow._identifierName_in_variableDeclarator7509);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1098, 9);
			// Truss.g:1098:9: ( OP_EQUALS e= expression )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_1 = input.LA(1);

			if ((LA66_1==OP_EQUALS))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1099:13: OP_EQUALS e= expression
				{
				DebugLocation(1099, 13);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_variableDeclarator7533); if (state.failed) return value;
				DebugLocation(1100, 14);
				PushFollow(Follow._expression_in_variableDeclarator7549);
				e=expression();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(66); }

			DebugLocation(1102, 9);
			if (state.backtracking == 0)
			{
				 value = new VariableDeclaratorSyntax(idn, e, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarator", 62);
			LeaveRule("variableDeclarator", 62);
			LeaveRule_variableDeclarator();
		}
		DebugLocation(1103, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarator"); }
		return value;

	}
	// $ANTLR end "variableDeclarator"

	partial void EnterRule_returnStatement();
	partial void LeaveRule_returnStatement();
	// $ANTLR start "returnStatement"
	// Truss.g:1105:1: returnStatement returns [ReturnStatementSyntax value] : KW_RETURN (eod= expressionOrDeclaration )? OP_SEMICOLON ;
	[GrammarRule("returnStatement")]
	private ReturnStatementSyntax returnStatement()
	{
		EnterRule_returnStatement();
		EnterRule("returnStatement", 63);
		TraceIn("returnStatement", 63);
		ReturnStatementSyntax value = default(ReturnStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "returnStatement");
		DebugLocation(1105, 4);
		try
		{
			// Truss.g:1109:5: ( KW_RETURN (eod= expressionOrDeclaration )? OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:1110:9: KW_RETURN (eod= expressionOrDeclaration )? OP_SEMICOLON
			{
			DebugLocation(1110, 9);
			Match(input,KW_RETURN,Follow._KW_RETURN_in_returnStatement7604); if (state.failed) return value;
			DebugLocation(1112, 9);
			// Truss.g:1112:9: (eod= expressionOrDeclaration )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_1 = input.LA(1);

			if ((LA67_1==CHAR||LA67_1==FLOAT||(LA67_1>=HEX_INTEGER && LA67_1<=IDENTIFIER)||LA67_1==INTEGER||(LA67_1>=KW_ASYNC && LA67_1<=KW_BOOL)||LA67_1==KW_BYTE||LA67_1==KW_CHAR||(LA67_1>=KW_DECIMAL && LA67_1<=KW_DEFAULT)||LA67_1==KW_DOUBLE||LA67_1==KW_FALSE||LA67_1==KW_FLOAT||LA67_1==KW_INT||LA67_1==KW_LONG||(LA67_1>=KW_NEW && LA67_1<=KW_OBJECT)||LA67_1==KW_SBYTE||(LA67_1>=KW_SHORT && LA67_1<=KW_SIZEOF)||LA67_1==KW_STRING||LA67_1==KW_THIS||LA67_1==KW_TRUE||(LA67_1>=KW_TYPEOF && LA67_1<=KW_USHORT)||LA67_1==KW_VAR||LA67_1==KW_VOID||LA67_1==OP_AMPERSAND||LA67_1==OP_EXCLAMATION||LA67_1==OP_MINUS||LA67_1==OP_MINUS_MINUS||LA67_1==OP_PAREN_OPEN||LA67_1==OP_PLUS||LA67_1==OP_PLUS_PLUS||(LA67_1>=OP_TILDE && LA67_1<=STRING)))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1112:11: eod= expressionOrDeclaration
				{
				DebugLocation(1112, 14);
				PushFollow(Follow._expressionOrDeclaration_in_returnStatement7627);
				eod=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(67); }

			DebugLocation(1113, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_returnStatement7640); if (state.failed) return value;
			DebugLocation(1114, 9);
			if (state.backtracking == 0)
			{
				 value = new ReturnStatementSyntax(eod, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("returnStatement", 63);
			LeaveRule("returnStatement", 63);
			LeaveRule_returnStatement();
		}
		DebugLocation(1115, 4);
		} finally { DebugExitRule(GrammarFileName, "returnStatement"); }
		return value;

	}
	// $ANTLR end "returnStatement"

	partial void EnterRule_switchStatement();
	partial void LeaveRule_switchStatement();
	// $ANTLR start "switchStatement"
	// Truss.g:1117:1: switchStatement returns [SwitchStatementSyntax value] : KW_SWITCH eod= expressionOrDeclaration OP_BRACE_OPEN (ss= switchSection )* OP_BRACE_CLOSE ;
	[GrammarRule("switchStatement")]
	private SwitchStatementSyntax switchStatement()
	{
		EnterRule_switchStatement();
		EnterRule("switchStatement", 64);
		TraceIn("switchStatement", 64);
		SwitchStatementSyntax value = default(SwitchStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);
		SwitchSectionSyntax ss = default(SwitchSectionSyntax);


		    var start = input.LT(1);
		    var sections = new ImmutableArray<SwitchSectionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "switchStatement");
		DebugLocation(1117, 4);
		try
		{
			// Truss.g:1122:5: ( KW_SWITCH eod= expressionOrDeclaration OP_BRACE_OPEN (ss= switchSection )* OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:1123:9: KW_SWITCH eod= expressionOrDeclaration OP_BRACE_OPEN (ss= switchSection )* OP_BRACE_CLOSE
			{
			DebugLocation(1123, 9);
			Match(input,KW_SWITCH,Follow._KW_SWITCH_in_switchStatement7684); if (state.failed) return value;
			DebugLocation(1124, 12);
			PushFollow(Follow._expressionOrDeclaration_in_switchStatement7696);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1125, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_switchStatement7706); if (state.failed) return value;
			DebugLocation(1126, 9);
			// Truss.g:1126:9: (ss= switchSection )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_1 = input.LA(1);

				if ((LA68_1==KW_CASE||LA68_1==KW_DEFAULT))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1127:13: ss= switchSection
					{
					DebugLocation(1127, 15);
					PushFollow(Follow._switchSection_in_switchStatement7732);
					ss=switchSection();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1128, 13);
					if (state.backtracking == 0)
					{
						 sections.Add(ss); 
					}

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }

			DebugLocation(1130, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_switchStatement7767); if (state.failed) return value;
			DebugLocation(1131, 9);
			if (state.backtracking == 0)
			{
				 value = new SwitchStatementSyntax(eod, sections.Build(), Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchStatement", 64);
			LeaveRule("switchStatement", 64);
			LeaveRule_switchStatement();
		}
		DebugLocation(1132, 4);
		} finally { DebugExitRule(GrammarFileName, "switchStatement"); }
		return value;

	}
	// $ANTLR end "switchStatement"

	partial void EnterRule_switchSection();
	partial void LeaveRule_switchSection();
	// $ANTLR start "switchSection"
	// Truss.g:1134:1: switchSection returns [SwitchSectionSyntax value] : ( KW_DEFAULT | KW_CASE el= expressionList ) b= block ;
	[GrammarRule("switchSection")]
	private SwitchSectionSyntax switchSection()
	{
		EnterRule_switchSection();
		EnterRule("switchSection", 65);
		TraceIn("switchSection", 65);
		SwitchSectionSyntax value = default(SwitchSectionSyntax);


		ImmutableArray<ExpressionSyntax> el = default(ImmutableArray<ExpressionSyntax>);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);
		    CaseOrDefault? type = null;

		try { DebugEnterRule(GrammarFileName, "switchSection");
		DebugLocation(1134, 4);
		try
		{
			// Truss.g:1139:5: ( ( KW_DEFAULT | KW_CASE el= expressionList ) b= block )
			DebugEnterAlt(1);
			// Truss.g:1140:9: ( KW_DEFAULT | KW_CASE el= expressionList ) b= block
			{
			DebugLocation(1140, 9);
			// Truss.g:1140:9: ( KW_DEFAULT | KW_CASE el= expressionList )
			int alt69=2;
			try { DebugEnterSubRule(69);
			try { DebugEnterDecision(69, false);
			int LA69_1 = input.LA(1);

			if ((LA69_1==KW_DEFAULT))
			{
				alt69 = 1;
			}
			else if ((LA69_1==KW_CASE))
			{
				alt69 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 69, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(69); }
			switch (alt69)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1141:13: KW_DEFAULT
				{
				DebugLocation(1141, 13);
				Match(input,KW_DEFAULT,Follow._KW_DEFAULT_in_switchSection7825); if (state.failed) return value;
				DebugLocation(1142, 13);
				if (state.backtracking == 0)
				{
					 type = CaseOrDefault.Default; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1144:13: KW_CASE el= expressionList
				{
				DebugLocation(1144, 13);
				Match(input,KW_CASE,Follow._KW_CASE_in_switchSection7863); if (state.failed) return value;
				DebugLocation(1145, 13);
				if (state.backtracking == 0)
				{
					 type = CaseOrDefault.Case; 
				}
				DebugLocation(1146, 15);
				PushFollow(Follow._expressionList_in_switchSection7893);
				el=expressionList();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(69); }

			DebugLocation(1148, 10);
			PushFollow(Follow._block_in_switchSection7915);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1149, 9);
			if (state.backtracking == 0)
			{

				            value = new SwitchSectionSyntax(
				                type.Value,
				                el == null ? ImmutableArray<ExpressionSyntax>.Empty : el,
				                b,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("switchSection", 65);
			LeaveRule("switchSection", 65);
			LeaveRule_switchSection();
		}
		DebugLocation(1157, 4);
		} finally { DebugExitRule(GrammarFileName, "switchSection"); }
		return value;

	}
	// $ANTLR end "switchSection"

	partial void EnterRule_throwStatement();
	partial void LeaveRule_throwStatement();
	// $ANTLR start "throwStatement"
	// Truss.g:1159:1: throwStatement returns [ThrowStatementSyntax value] : KW_THROW (eod= expressionOrDeclaration )? OP_SEMICOLON ;
	[GrammarRule("throwStatement")]
	private ThrowStatementSyntax throwStatement()
	{
		EnterRule_throwStatement();
		EnterRule("throwStatement", 66);
		TraceIn("throwStatement", 66);
		ThrowStatementSyntax value = default(ThrowStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "throwStatement");
		DebugLocation(1159, 4);
		try
		{
			// Truss.g:1163:5: ( KW_THROW (eod= expressionOrDeclaration )? OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:1164:9: KW_THROW (eod= expressionOrDeclaration )? OP_SEMICOLON
			{
			DebugLocation(1164, 9);
			Match(input,KW_THROW,Follow._KW_THROW_in_throwStatement7959); if (state.failed) return value;
			DebugLocation(1166, 12);
			// Truss.g:1166:12: (eod= expressionOrDeclaration )?
			int alt70=2;
			try { DebugEnterSubRule(70);
			try { DebugEnterDecision(70, false);
			int LA70_1 = input.LA(1);

			if ((LA70_1==CHAR||LA70_1==FLOAT||(LA70_1>=HEX_INTEGER && LA70_1<=IDENTIFIER)||LA70_1==INTEGER||(LA70_1>=KW_ASYNC && LA70_1<=KW_BOOL)||LA70_1==KW_BYTE||LA70_1==KW_CHAR||(LA70_1>=KW_DECIMAL && LA70_1<=KW_DEFAULT)||LA70_1==KW_DOUBLE||LA70_1==KW_FALSE||LA70_1==KW_FLOAT||LA70_1==KW_INT||LA70_1==KW_LONG||(LA70_1>=KW_NEW && LA70_1<=KW_OBJECT)||LA70_1==KW_SBYTE||(LA70_1>=KW_SHORT && LA70_1<=KW_SIZEOF)||LA70_1==KW_STRING||LA70_1==KW_THIS||LA70_1==KW_TRUE||(LA70_1>=KW_TYPEOF && LA70_1<=KW_USHORT)||LA70_1==KW_VAR||LA70_1==KW_VOID||LA70_1==OP_AMPERSAND||LA70_1==OP_EXCLAMATION||LA70_1==OP_MINUS||LA70_1==OP_MINUS_MINUS||LA70_1==OP_PAREN_OPEN||LA70_1==OP_PLUS||LA70_1==OP_PLUS_PLUS||(LA70_1>=OP_TILDE && LA70_1<=STRING)))
			{
				alt70 = 1;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1166:12: eod= expressionOrDeclaration
				{
				DebugLocation(1166, 12);
				PushFollow(Follow._expressionOrDeclaration_in_throwStatement7980);
				eod=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(70); }

			DebugLocation(1167, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_throwStatement7991); if (state.failed) return value;
			DebugLocation(1168, 9);
			if (state.backtracking == 0)
			{
				 value = new ThrowStatementSyntax(eod, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("throwStatement", 66);
			LeaveRule("throwStatement", 66);
			LeaveRule_throwStatement();
		}
		DebugLocation(1169, 4);
		} finally { DebugExitRule(GrammarFileName, "throwStatement"); }
		return value;

	}
	// $ANTLR end "throwStatement"

	partial void EnterRule_deleteStatement();
	partial void LeaveRule_deleteStatement();
	// $ANTLR start "deleteStatement"
	// Truss.g:1171:1: deleteStatement returns [DeleteStatementSyntax value] : KW_DELETE eod= expressionOrDeclaration OP_SEMICOLON ;
	[GrammarRule("deleteStatement")]
	private DeleteStatementSyntax deleteStatement()
	{
		EnterRule_deleteStatement();
		EnterRule("deleteStatement", 67);
		TraceIn("deleteStatement", 67);
		DeleteStatementSyntax value = default(DeleteStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "deleteStatement");
		DebugLocation(1171, 4);
		try
		{
			// Truss.g:1175:5: ( KW_DELETE eod= expressionOrDeclaration OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:1176:9: KW_DELETE eod= expressionOrDeclaration OP_SEMICOLON
			{
			DebugLocation(1176, 9);
			Match(input,KW_DELETE,Follow._KW_DELETE_in_deleteStatement8035); if (state.failed) return value;
			DebugLocation(1178, 12);
			PushFollow(Follow._expressionOrDeclaration_in_deleteStatement8056);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1179, 9);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_deleteStatement8066); if (state.failed) return value;
			DebugLocation(1180, 9);
			if (state.backtracking == 0)
			{
				 value = new DeleteStatementSyntax(eod, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("deleteStatement", 67);
			LeaveRule("deleteStatement", 67);
			LeaveRule_deleteStatement();
		}
		DebugLocation(1181, 4);
		} finally { DebugExitRule(GrammarFileName, "deleteStatement"); }
		return value;

	}
	// $ANTLR end "deleteStatement"

	partial void EnterRule_tryStatement();
	partial void LeaveRule_tryStatement();
	// $ANTLR start "tryStatement"
	// Truss.g:1183:1: tryStatement returns [TryStatementSyntax value] : KW_TRY b= block (cc= catchClause )* (fc= finallyClause )? ;
	[GrammarRule("tryStatement")]
	private TryStatementSyntax tryStatement()
	{
		EnterRule_tryStatement();
		EnterRule("tryStatement", 68);
		TraceIn("tryStatement", 68);
		TryStatementSyntax value = default(TryStatementSyntax);


		BlockSyntax b = default(BlockSyntax);
		CatchClauseSyntax cc = default(CatchClauseSyntax);
		FinallyClauseSyntax fc = default(FinallyClauseSyntax);


		    var start = input.LT(1);
		    var catches = new ImmutableArray<CatchClauseSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "tryStatement");
		DebugLocation(1183, 4);
		try
		{
			// Truss.g:1188:5: ( KW_TRY b= block (cc= catchClause )* (fc= finallyClause )? )
			DebugEnterAlt(1);
			// Truss.g:1189:9: KW_TRY b= block (cc= catchClause )* (fc= finallyClause )?
			{
			DebugLocation(1189, 9);
			Match(input,KW_TRY,Follow._KW_TRY_in_tryStatement8110); if (state.failed) return value;
			DebugLocation(1190, 10);
			PushFollow(Follow._block_in_tryStatement8122);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1191, 9);
			// Truss.g:1191:9: (cc= catchClause )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=2;
				try { DebugEnterDecision(71, false);
				int LA71_1 = input.LA(1);

				if ((LA71_1==KW_CATCH))
				{
					alt71 = 1;
				}


				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1192:13: cc= catchClause
					{
					DebugLocation(1192, 15);
					PushFollow(Follow._catchClause_in_tryStatement8148);
					cc=catchClause();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1193, 13);
					if (state.backtracking == 0)
					{
						 catches.Add(cc); 
					}

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }

			DebugLocation(1195, 9);
			// Truss.g:1195:9: (fc= finallyClause )?
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_1 = input.LA(1);

			if ((LA72_1==KW_FINALLY))
			{
				alt72 = 1;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1195:11: fc= finallyClause
				{
				DebugLocation(1195, 13);
				PushFollow(Follow._finallyClause_in_tryStatement8187);
				fc=finallyClause();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(72); }

			DebugLocation(1196, 9);
			if (state.backtracking == 0)
			{
				 value = new TryStatementSyntax(b, catches.Build(), fc, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("tryStatement", 68);
			LeaveRule("tryStatement", 68);
			LeaveRule_tryStatement();
		}
		DebugLocation(1197, 4);
		} finally { DebugExitRule(GrammarFileName, "tryStatement"); }
		return value;

	}
	// $ANTLR end "tryStatement"

	partial void EnterRule_catchClause();
	partial void LeaveRule_catchClause();
	// $ANTLR start "catchClause"
	// Truss.g:1199:1: catchClause returns [CatchClauseSyntax value] : KW_CATCH (t= typeSyntax (idn= identifierName )? )? b= block ;
	[GrammarRule("catchClause")]
	private CatchClauseSyntax catchClause()
	{
		EnterRule_catchClause();
		EnterRule("catchClause", 69);
		TraceIn("catchClause", 69);
		CatchClauseSyntax value = default(CatchClauseSyntax);


		TypeSyntax t = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "catchClause");
		DebugLocation(1199, 4);
		try
		{
			// Truss.g:1203:5: ( KW_CATCH (t= typeSyntax (idn= identifierName )? )? b= block )
			DebugEnterAlt(1);
			// Truss.g:1204:9: KW_CATCH (t= typeSyntax (idn= identifierName )? )? b= block
			{
			DebugLocation(1204, 9);
			Match(input,KW_CATCH,Follow._KW_CATCH_in_catchClause8234); if (state.failed) return value;
			DebugLocation(1205, 9);
			// Truss.g:1205:9: (t= typeSyntax (idn= identifierName )? )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_1 = input.LA(1);

			if ((LA74_1==IDENTIFIER||LA74_1==KW_BOOL||LA74_1==KW_BYTE||LA74_1==KW_CHAR||LA74_1==KW_DECIMAL||LA74_1==KW_DOUBLE||LA74_1==KW_FLOAT||LA74_1==KW_INT||LA74_1==KW_LONG||LA74_1==KW_OBJECT||LA74_1==KW_SBYTE||LA74_1==KW_SHORT||LA74_1==KW_STRING||(LA74_1>=KW_UINT && LA74_1<=KW_USHORT)||LA74_1==KW_VAR||LA74_1==KW_VOID))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1206:13: t= typeSyntax (idn= identifierName )?
				{
				DebugLocation(1206, 14);
				PushFollow(Follow._typeSyntax_in_catchClause8260);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1207, 13);
				// Truss.g:1207:13: (idn= identifierName )?
				int alt73=2;
				try { DebugEnterSubRule(73);
				try { DebugEnterDecision(73, false);
				int LA73_1 = input.LA(1);

				if ((LA73_1==IDENTIFIER))
				{
					alt73 = 1;
				}
				} finally { DebugExitDecision(73); }
				switch (alt73)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1207:15: idn= identifierName
					{
					DebugLocation(1207, 18);
					PushFollow(Follow._identifierName_in_catchClause8278);
					idn=identifierName();
					PopFollow();
					if (state.failed) return value;

					}
					break;

				}
				} finally { DebugExitSubRule(73); }


				}
				break;

			}
			} finally { DebugExitSubRule(74); }

			DebugLocation(1209, 10);
			PushFollow(Follow._block_in_catchClause8304);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1210, 9);
			if (state.backtracking == 0)
			{
				 value = new CatchClauseSyntax(t, idn, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("catchClause", 69);
			LeaveRule("catchClause", 69);
			LeaveRule_catchClause();
		}
		DebugLocation(1211, 4);
		} finally { DebugExitRule(GrammarFileName, "catchClause"); }
		return value;

	}
	// $ANTLR end "catchClause"

	partial void EnterRule_finallyClause();
	partial void LeaveRule_finallyClause();
	// $ANTLR start "finallyClause"
	// Truss.g:1213:1: finallyClause returns [FinallyClauseSyntax value] : KW_FINALLY b= block ;
	[GrammarRule("finallyClause")]
	private FinallyClauseSyntax finallyClause()
	{
		EnterRule_finallyClause();
		EnterRule("finallyClause", 70);
		TraceIn("finallyClause", 70);
		FinallyClauseSyntax value = default(FinallyClauseSyntax);


		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "finallyClause");
		DebugLocation(1213, 4);
		try
		{
			// Truss.g:1217:5: ( KW_FINALLY b= block )
			DebugEnterAlt(1);
			// Truss.g:1218:9: KW_FINALLY b= block
			{
			DebugLocation(1218, 9);
			Match(input,KW_FINALLY,Follow._KW_FINALLY_in_finallyClause8348); if (state.failed) return value;
			DebugLocation(1219, 10);
			PushFollow(Follow._block_in_finallyClause8360);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1220, 9);
			if (state.backtracking == 0)
			{
				 value = new FinallyClauseSyntax(b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("finallyClause", 70);
			LeaveRule("finallyClause", 70);
			LeaveRule_finallyClause();
		}
		DebugLocation(1221, 4);
		} finally { DebugExitRule(GrammarFileName, "finallyClause"); }
		return value;

	}
	// $ANTLR end "finallyClause"

	partial void EnterRule_usingStatement();
	partial void LeaveRule_usingStatement();
	// $ANTLR start "usingStatement"
	// Truss.g:1223:1: usingStatement returns [UsingStatementSyntax value] : KW_USING ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |e= expression ) b= block ;
	[GrammarRule("usingStatement")]
	private UsingStatementSyntax usingStatement()
	{
		EnterRule_usingStatement();
		EnterRule("usingStatement", 71);
		TraceIn("usingStatement", 71);
		UsingStatementSyntax value = default(UsingStatementSyntax);


		VariableDeclarationSyntax vd = default(VariableDeclarationSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "usingStatement");
		DebugLocation(1223, 4);
		try
		{
			// Truss.g:1227:5: ( KW_USING ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |e= expression ) b= block )
			DebugEnterAlt(1);
			// Truss.g:1228:9: KW_USING ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |e= expression ) b= block
			{
			DebugLocation(1228, 9);
			Match(input,KW_USING,Follow._KW_USING_in_usingStatement8404); if (state.failed) return value;
			DebugLocation(1229, 9);
			// Truss.g:1229:9: ( ( variableDeclarationHeadScan )=>vd= variableDeclaration |e= expression )
			int alt75=2;
			try { DebugEnterSubRule(75);
			try { DebugEnterDecision(75, false);
			int LA75_1 = input.LA(1);

			if ((LA75_1==KW_VAR) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_BOOL) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_BYTE) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_CHAR) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_DECIMAL) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_DOUBLE) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_FLOAT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_INT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_LONG) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_OBJECT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_SBYTE) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_SHORT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_STRING) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_UINT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_ULONG) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_USHORT) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==KW_VOID) && (EvaluatePredicate(synpred9_Truss_fragment)))
			{
				alt75 = 1;
			}
			else if ((LA75_1==IDENTIFIER))
			{
				int LA75_2 = input.LA(2);

				if ((EvaluatePredicate(synpred9_Truss_fragment)))
				{
					alt75 = 1;
				}
				else if ((true))
				{
					alt75 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 75, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA75_1==CHAR||LA75_1==FLOAT||LA75_1==HEX_INTEGER||LA75_1==INTEGER||(LA75_1>=KW_ASYNC && LA75_1<=KW_BASE)||LA75_1==KW_DEFAULT||LA75_1==KW_FALSE||(LA75_1>=KW_NEW && LA75_1<=KW_NIL)||LA75_1==KW_SIZEOF||LA75_1==KW_THIS||LA75_1==KW_TRUE||LA75_1==KW_TYPEOF||LA75_1==OP_AMPERSAND||LA75_1==OP_EXCLAMATION||LA75_1==OP_MINUS||LA75_1==OP_MINUS_MINUS||LA75_1==OP_PAREN_OPEN||LA75_1==OP_PLUS||LA75_1==OP_PLUS_PLUS||(LA75_1>=OP_TILDE && LA75_1<=STRING)))
			{
				alt75 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 75, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1230:13: ( variableDeclarationHeadScan )=>vd= variableDeclaration
				{
				DebugLocation(1231, 15);
				PushFollow(Follow._variableDeclaration_in_usingStatement8449);
				vd=variableDeclaration();
				PopFollow();
				if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1233:13: e= expression
				{
				DebugLocation(1233, 14);
				PushFollow(Follow._expression_in_usingStatement8475);
				e=expression();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(75); }

			DebugLocation(1235, 10);
			PushFollow(Follow._block_in_usingStatement8497);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1236, 9);
			if (state.backtracking == 0)
			{
				 value = new UsingStatementSyntax(vd, e, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("usingStatement", 71);
			LeaveRule("usingStatement", 71);
			LeaveRule_usingStatement();
		}
		DebugLocation(1237, 4);
		} finally { DebugExitRule(GrammarFileName, "usingStatement"); }
		return value;

	}
	// $ANTLR end "usingStatement"

	partial void EnterRule_loopStatement();
	partial void LeaveRule_loopStatement();
	// $ANTLR start "loopStatement"
	// Truss.g:1239:1: loopStatement returns [LoopStatementSyntax value] : KW_LOOP b= block ;
	[GrammarRule("loopStatement")]
	private LoopStatementSyntax loopStatement()
	{
		EnterRule_loopStatement();
		EnterRule("loopStatement", 72);
		TraceIn("loopStatement", 72);
		LoopStatementSyntax value = default(LoopStatementSyntax);


		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "loopStatement");
		DebugLocation(1239, 4);
		try
		{
			// Truss.g:1243:5: ( KW_LOOP b= block )
			DebugEnterAlt(1);
			// Truss.g:1244:9: KW_LOOP b= block
			{
			DebugLocation(1244, 9);
			Match(input,KW_LOOP,Follow._KW_LOOP_in_loopStatement8541); if (state.failed) return value;
			DebugLocation(1245, 10);
			PushFollow(Follow._block_in_loopStatement8553);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1246, 9);
			if (state.backtracking == 0)
			{
				 value = new LoopStatementSyntax(b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("loopStatement", 72);
			LeaveRule("loopStatement", 72);
			LeaveRule_loopStatement();
		}
		DebugLocation(1247, 4);
		} finally { DebugExitRule(GrammarFileName, "loopStatement"); }
		return value;

	}
	// $ANTLR end "loopStatement"

	partial void EnterRule_whileStatement();
	partial void LeaveRule_whileStatement();
	// $ANTLR start "whileStatement"
	// Truss.g:1249:1: whileStatement returns [WhileStatementSyntax value] : KW_WHILE eod= expressionOrDeclaration b= block ;
	[GrammarRule("whileStatement")]
	private WhileStatementSyntax whileStatement()
	{
		EnterRule_whileStatement();
		EnterRule("whileStatement", 73);
		TraceIn("whileStatement", 73);
		WhileStatementSyntax value = default(WhileStatementSyntax);


		ExpressionSyntax eod = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "whileStatement");
		DebugLocation(1249, 4);
		try
		{
			// Truss.g:1253:5: ( KW_WHILE eod= expressionOrDeclaration b= block )
			DebugEnterAlt(1);
			// Truss.g:1254:9: KW_WHILE eod= expressionOrDeclaration b= block
			{
			DebugLocation(1254, 9);
			Match(input,KW_WHILE,Follow._KW_WHILE_in_whileStatement8597); if (state.failed) return value;
			DebugLocation(1255, 12);
			PushFollow(Follow._expressionOrDeclaration_in_whileStatement8609);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1256, 10);
			PushFollow(Follow._block_in_whileStatement8621);
			b=block();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1257, 9);
			if (state.backtracking == 0)
			{
				 value = new WhileStatementSyntax(eod, b, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("whileStatement", 73);
			LeaveRule("whileStatement", 73);
			LeaveRule_whileStatement();
		}
		DebugLocation(1258, 4);
		} finally { DebugExitRule(GrammarFileName, "whileStatement"); }
		return value;

	}
	// $ANTLR end "whileStatement"

	partial void EnterRule_expressionOrDeclaration();
	partial void LeaveRule_expressionOrDeclaration();
	// $ANTLR start "expressionOrDeclaration"
	// Truss.g:1262:1: expressionOrDeclaration returns [ExpressionSyntax value] : ( ( variableDeclarationHeadScan )=>vde= variableDeclarationExpression |e= expression );
	[GrammarRule("expressionOrDeclaration")]
	private ExpressionSyntax expressionOrDeclaration()
	{
		EnterRule_expressionOrDeclaration();
		EnterRule("expressionOrDeclaration", 74);
		TraceIn("expressionOrDeclaration", 74);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax vde = default(ExpressionSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "expressionOrDeclaration");
		DebugLocation(1262, 4);
		try
		{
			// Truss.g:1263:5: ( ( variableDeclarationHeadScan )=>vde= variableDeclarationExpression |e= expression )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_1 = input.LA(1);

			if ((LA76_1==KW_VAR) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_BOOL) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_BYTE) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_CHAR) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_DECIMAL) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_DOUBLE) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_FLOAT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_INT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_LONG) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_OBJECT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_SBYTE) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_SHORT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_STRING) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_UINT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_ULONG) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_USHORT) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==KW_VOID) && (EvaluatePredicate(synpred10_Truss_fragment)))
			{
				alt76 = 1;
			}
			else if ((LA76_1==IDENTIFIER))
			{
				int LA76_2 = input.LA(2);

				if ((EvaluatePredicate(synpred10_Truss_fragment)))
				{
					alt76 = 1;
				}
				else if ((true))
				{
					alt76 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 76, 18, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA76_1==CHAR||LA76_1==FLOAT||LA76_1==HEX_INTEGER||LA76_1==INTEGER||(LA76_1>=KW_ASYNC && LA76_1<=KW_BASE)||LA76_1==KW_DEFAULT||LA76_1==KW_FALSE||(LA76_1>=KW_NEW && LA76_1<=KW_NIL)||LA76_1==KW_SIZEOF||LA76_1==KW_THIS||LA76_1==KW_TRUE||LA76_1==KW_TYPEOF||LA76_1==OP_AMPERSAND||LA76_1==OP_EXCLAMATION||LA76_1==OP_MINUS||LA76_1==OP_MINUS_MINUS||LA76_1==OP_PAREN_OPEN||LA76_1==OP_PLUS||LA76_1==OP_PLUS_PLUS||(LA76_1>=OP_TILDE && LA76_1<=STRING)))
			{
				alt76 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1263:7: ( variableDeclarationHeadScan )=>vde= variableDeclarationExpression
				{
				DebugLocation(1263, 44);
				PushFollow(Follow._variableDeclarationExpression_in_expressionOrDeclaration8663);
				vde=variableDeclarationExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1263, 75);
				if (state.backtracking == 0)
				{
					 value = vde; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1264:7: e= expression
				{
				DebugLocation(1264, 8);
				PushFollow(Follow._expression_in_expressionOrDeclaration8675);
				e=expression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1264, 20);
				if (state.backtracking == 0)
				{
					 value = e; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expressionOrDeclaration", 74);
			LeaveRule("expressionOrDeclaration", 74);
			LeaveRule_expressionOrDeclaration();
		}
		DebugLocation(1265, 4);
		} finally { DebugExitRule(GrammarFileName, "expressionOrDeclaration"); }
		return value;

	}
	// $ANTLR end "expressionOrDeclaration"

	partial void EnterRule_expression();
	partial void LeaveRule_expression();
	// $ANTLR start "expression"
	// Truss.g:1267:1: expression returns [ExpressionSyntax value] : ( ( lambdaExpressionHeadScan )=>e2= lambdaExpression |ae= assignmentExpression );
	[GrammarRule("expression")]
	private ExpressionSyntax expression()
	{
		EnterRule_expression();
		EnterRule("expression", 75);
		TraceIn("expression", 75);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax e2 = default(ExpressionSyntax);
		ExpressionSyntax ae = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "expression");
		DebugLocation(1267, 4);
		try
		{
			// Truss.g:1268:5: ( ( lambdaExpressionHeadScan )=>e2= lambdaExpression |ae= assignmentExpression )
			int alt77=2;
			try { DebugEnterDecision(77, false);
			int LA77_1 = input.LA(1);

			if ((LA77_1==KW_ASYNC) && (EvaluatePredicate(synpred11_Truss_fragment)))
			{
				alt77 = 1;
			}
			else if ((LA77_1==OP_PAREN_OPEN))
			{
				int LA77_2 = input.LA(2);

				if ((EvaluatePredicate(synpred11_Truss_fragment)))
				{
					alt77 = 1;
				}
				else if ((true))
				{
					alt77 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 77, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA77_1==IDENTIFIER))
			{
				int LA77_2 = input.LA(2);

				if ((EvaluatePredicate(synpred11_Truss_fragment)))
				{
					alt77 = 1;
				}
				else if ((true))
				{
					alt77 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 77, 3, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else if ((LA77_1==CHAR||LA77_1==FLOAT||LA77_1==HEX_INTEGER||LA77_1==INTEGER||(LA77_1>=KW_AWAIT && LA77_1<=KW_BASE)||LA77_1==KW_DEFAULT||LA77_1==KW_FALSE||(LA77_1>=KW_NEW && LA77_1<=KW_NIL)||LA77_1==KW_SIZEOF||LA77_1==KW_THIS||LA77_1==KW_TRUE||LA77_1==KW_TYPEOF||LA77_1==OP_AMPERSAND||LA77_1==OP_EXCLAMATION||LA77_1==OP_MINUS||LA77_1==OP_MINUS_MINUS||LA77_1==OP_PLUS||LA77_1==OP_PLUS_PLUS||(LA77_1>=OP_TILDE && LA77_1<=STRING)))
			{
				alt77 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 77, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1269:9: ( lambdaExpressionHeadScan )=>e2= lambdaExpression
				{
				DebugLocation(1269, 42);
				PushFollow(Follow._lambdaExpression_in_expression8715);
				e2=lambdaExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1270, 9);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1272:9: ae= assignmentExpression
				{
				DebugLocation(1272, 11);
				PushFollow(Follow._assignmentExpression_in_expression8743);
				ae=assignmentExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1273, 9);
				if (state.backtracking == 0)
				{
					 value = ae; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("expression", 75);
			LeaveRule("expression", 75);
			LeaveRule_expression();
		}
		DebugLocation(1274, 4);
		} finally { DebugExitRule(GrammarFileName, "expression"); }
		return value;

	}
	// $ANTLR end "expression"

	partial void EnterRule_assignmentExpression();
	partial void LeaveRule_assignmentExpression();
	// $ANTLR start "assignmentExpression"
	// Truss.g:1276:1: assignmentExpression returns [ExpressionSyntax value] : nae= nonAssignmentExpression (ao= assignmentOperator eod= expressionOrDeclaration )? ;
	[GrammarRule("assignmentExpression")]
	private ExpressionSyntax assignmentExpression()
	{
		EnterRule_assignmentExpression();
		EnterRule("assignmentExpression", 76);
		TraceIn("assignmentExpression", 76);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax nae = default(ExpressionSyntax);
		BinaryOperator ao = default(BinaryOperator);
		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "assignmentExpression");
		DebugLocation(1276, 4);
		try
		{
			// Truss.g:1280:5: (nae= nonAssignmentExpression (ao= assignmentOperator eod= expressionOrDeclaration )? )
			DebugEnterAlt(1);
			// Truss.g:1281:9: nae= nonAssignmentExpression (ao= assignmentOperator eod= expressionOrDeclaration )?
			{
			DebugLocation(1281, 12);
			PushFollow(Follow._nonAssignmentExpression_in_assignmentExpression8789);
			nae=nonAssignmentExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1282, 9);
			if (state.backtracking == 0)
			{
				 value = nae; 
			}
			DebugLocation(1283, 9);
			// Truss.g:1283:9: (ao= assignmentOperator eod= expressionOrDeclaration )?
			int alt78=2;
			try { DebugEnterSubRule(78);
			try { DebugEnterDecision(78, false);
			int LA78_1 = input.LA(1);

			if ((LA78_1==OP_AMPERSAND_EQUALS||LA78_1==OP_ASTERISK_EQUALS||LA78_1==OP_BAR_EQUALS||LA78_1==OP_CARET_EQUALS||LA78_1==OP_EQUALS||LA78_1==OP_GREATER_THAN_GREATER_THAN_EQUALS||LA78_1==OP_LESS_THAN_LESS_THAN_EQUALS||LA78_1==OP_MINUS_EQUALS||LA78_1==OP_PERCENT_EQUALS||LA78_1==OP_PLUS_EQUALS||LA78_1==OP_SLASH_EQUALS))
			{
				alt78 = 1;
			}
			} finally { DebugExitDecision(78); }
			switch (alt78)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1284:13: ao= assignmentOperator eod= expressionOrDeclaration
				{
				DebugLocation(1284, 15);
				PushFollow(Follow._assignmentOperator_in_assignmentExpression8825);
				ao=assignmentOperator();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1285, 16);
				PushFollow(Follow._expressionOrDeclaration_in_assignmentExpression8841);
				eod=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1286, 13);
				if (state.backtracking == 0)
				{
					 value = new BinaryExpressionSyntax(ao, value, eod, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(78); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentExpression", 76);
			LeaveRule("assignmentExpression", 76);
			LeaveRule_assignmentExpression();
		}
		DebugLocation(1288, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentExpression"); }
		return value;

	}
	// $ANTLR end "assignmentExpression"

	partial void EnterRule_nonAssignmentExpression();
	partial void LeaveRule_nonAssignmentExpression();
	// $ANTLR start "nonAssignmentExpression"
	// Truss.g:1290:1: nonAssignmentExpression returns [ExpressionSyntax value] : ce= conditionalExpression ;
	[GrammarRule("nonAssignmentExpression")]
	private ExpressionSyntax nonAssignmentExpression()
	{
		EnterRule_nonAssignmentExpression();
		EnterRule("nonAssignmentExpression", 77);
		TraceIn("nonAssignmentExpression", 77);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax ce = default(ExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "nonAssignmentExpression");
		DebugLocation(1290, 4);
		try
		{
			// Truss.g:1291:5: (ce= conditionalExpression )
			DebugEnterAlt(1);
			// Truss.g:1292:9: ce= conditionalExpression
			{
			DebugLocation(1292, 11);
			PushFollow(Follow._conditionalExpression_in_nonAssignmentExpression8897);
			ce=conditionalExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1293, 9);
			if (state.backtracking == 0)
			{
				 value = ce; 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("nonAssignmentExpression", 77);
			LeaveRule("nonAssignmentExpression", 77);
			LeaveRule_nonAssignmentExpression();
		}
		DebugLocation(1294, 4);
		} finally { DebugExitRule(GrammarFileName, "nonAssignmentExpression"); }
		return value;

	}
	// $ANTLR end "nonAssignmentExpression"

	partial void EnterRule_assignmentOperator();
	partial void LeaveRule_assignmentOperator();
	// $ANTLR start "assignmentOperator"
	// Truss.g:1296:1: assignmentOperator returns [BinaryOperator value] : ( OP_EQUALS | OP_PLUS_EQUALS | OP_MINUS_EQUALS | OP_ASTERISK_EQUALS | OP_SLASH_EQUALS | OP_PERCENT_EQUALS | OP_GREATER_THAN_GREATER_THAN_EQUALS | OP_LESS_THAN_LESS_THAN_EQUALS | OP_AMPERSAND_EQUALS | OP_BAR_EQUALS | OP_CARET_EQUALS );
	[GrammarRule("assignmentOperator")]
	private BinaryOperator assignmentOperator()
	{
		EnterRule_assignmentOperator();
		EnterRule("assignmentOperator", 78);
		TraceIn("assignmentOperator", 78);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "assignmentOperator");
		DebugLocation(1296, 4);
		try
		{
			// Truss.g:1297:5: ( OP_EQUALS | OP_PLUS_EQUALS | OP_MINUS_EQUALS | OP_ASTERISK_EQUALS | OP_SLASH_EQUALS | OP_PERCENT_EQUALS | OP_GREATER_THAN_GREATER_THAN_EQUALS | OP_LESS_THAN_LESS_THAN_EQUALS | OP_AMPERSAND_EQUALS | OP_BAR_EQUALS | OP_CARET_EQUALS )
			int alt79=11;
			try { DebugEnterDecision(79, false);
			switch (input.LA(1))
			{
			case OP_EQUALS:
				{
				alt79 = 1;
				}
				break;
			case OP_PLUS_EQUALS:
				{
				alt79 = 2;
				}
				break;
			case OP_MINUS_EQUALS:
				{
				alt79 = 3;
				}
				break;
			case OP_ASTERISK_EQUALS:
				{
				alt79 = 4;
				}
				break;
			case OP_SLASH_EQUALS:
				{
				alt79 = 5;
				}
				break;
			case OP_PERCENT_EQUALS:
				{
				alt79 = 6;
				}
				break;
			case OP_GREATER_THAN_GREATER_THAN_EQUALS:
				{
				alt79 = 7;
				}
				break;
			case OP_LESS_THAN_LESS_THAN_EQUALS:
				{
				alt79 = 8;
				}
				break;
			case OP_AMPERSAND_EQUALS:
				{
				alt79 = 9;
				}
				break;
			case OP_BAR_EQUALS:
				{
				alt79 = 10;
				}
				break;
			case OP_CARET_EQUALS:
				{
				alt79 = 11;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 79, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(79); }
			switch (alt79)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1297:7: OP_EQUALS
				{
				DebugLocation(1297, 7);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_assignmentOperator8928); if (state.failed) return value;
				DebugLocation(1297, 17);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Equals; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1298:7: OP_PLUS_EQUALS
				{
				DebugLocation(1298, 7);
				Match(input,OP_PLUS_EQUALS,Follow._OP_PLUS_EQUALS_in_assignmentOperator8938); if (state.failed) return value;
				DebugLocation(1298, 22);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.PlusEquals; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1299:7: OP_MINUS_EQUALS
				{
				DebugLocation(1299, 7);
				Match(input,OP_MINUS_EQUALS,Follow._OP_MINUS_EQUALS_in_assignmentOperator8948); if (state.failed) return value;
				DebugLocation(1299, 23);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.MinusEquals; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:1300:7: OP_ASTERISK_EQUALS
				{
				DebugLocation(1300, 7);
				Match(input,OP_ASTERISK_EQUALS,Follow._OP_ASTERISK_EQUALS_in_assignmentOperator8958); if (state.failed) return value;
				DebugLocation(1300, 26);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.AsteriskEquals; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:1301:7: OP_SLASH_EQUALS
				{
				DebugLocation(1301, 7);
				Match(input,OP_SLASH_EQUALS,Follow._OP_SLASH_EQUALS_in_assignmentOperator8968); if (state.failed) return value;
				DebugLocation(1301, 23);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.SlashEquals; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:1302:7: OP_PERCENT_EQUALS
				{
				DebugLocation(1302, 7);
				Match(input,OP_PERCENT_EQUALS,Follow._OP_PERCENT_EQUALS_in_assignmentOperator8978); if (state.failed) return value;
				DebugLocation(1302, 25);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.PercentEquals; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:1303:7: OP_GREATER_THAN_GREATER_THAN_EQUALS
				{
				DebugLocation(1303, 7);
				Match(input,OP_GREATER_THAN_GREATER_THAN_EQUALS,Follow._OP_GREATER_THAN_GREATER_THAN_EQUALS_in_assignmentOperator8988); if (state.failed) return value;
				DebugLocation(1303, 43);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.GreaterThanGreaterThanEquals; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:1304:7: OP_LESS_THAN_LESS_THAN_EQUALS
				{
				DebugLocation(1304, 7);
				Match(input,OP_LESS_THAN_LESS_THAN_EQUALS,Follow._OP_LESS_THAN_LESS_THAN_EQUALS_in_assignmentOperator8998); if (state.failed) return value;
				DebugLocation(1304, 37);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.LessThanLessThanEquals; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:1305:7: OP_AMPERSAND_EQUALS
				{
				DebugLocation(1305, 7);
				Match(input,OP_AMPERSAND_EQUALS,Follow._OP_AMPERSAND_EQUALS_in_assignmentOperator9008); if (state.failed) return value;
				DebugLocation(1305, 27);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.AmpersandEquals; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Truss.g:1306:7: OP_BAR_EQUALS
				{
				DebugLocation(1306, 7);
				Match(input,OP_BAR_EQUALS,Follow._OP_BAR_EQUALS_in_assignmentOperator9018); if (state.failed) return value;
				DebugLocation(1306, 21);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.BarEquals; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Truss.g:1307:7: OP_CARET_EQUALS
				{
				DebugLocation(1307, 7);
				Match(input,OP_CARET_EQUALS,Follow._OP_CARET_EQUALS_in_assignmentOperator9028); if (state.failed) return value;
				DebugLocation(1307, 23);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.CaretEquals; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("assignmentOperator", 78);
			LeaveRule("assignmentOperator", 78);
			LeaveRule_assignmentOperator();
		}
		DebugLocation(1308, 4);
		} finally { DebugExitRule(GrammarFileName, "assignmentOperator"); }
		return value;

	}
	// $ANTLR end "assignmentOperator"

	partial void EnterRule_lambdaExpressionHeadScan();
	partial void LeaveRule_lambdaExpressionHeadScan();
	// $ANTLR start "lambdaExpressionHeadScan"
	// Truss.g:1310:1: lambdaExpressionHeadScan : ( KW_ASYNC )? lambdaParameterList OP_EQUALS_GREATER_THAN ;
	[GrammarRule("lambdaExpressionHeadScan")]
	private void lambdaExpressionHeadScan()
	{
		EnterRule_lambdaExpressionHeadScan();
		EnterRule("lambdaExpressionHeadScan", 79);
		TraceIn("lambdaExpressionHeadScan", 79);
		try { DebugEnterRule(GrammarFileName, "lambdaExpressionHeadScan");
		DebugLocation(1310, 80);
		try
		{
			// Truss.g:1310:26: ( ( KW_ASYNC )? lambdaParameterList OP_EQUALS_GREATER_THAN )
			DebugEnterAlt(1);
			// Truss.g:1310:28: ( KW_ASYNC )? lambdaParameterList OP_EQUALS_GREATER_THAN
			{
			DebugLocation(1310, 28);
			// Truss.g:1310:28: ( KW_ASYNC )?
			int alt80=2;
			try { DebugEnterSubRule(80);
			try { DebugEnterDecision(80, false);
			int LA80_1 = input.LA(1);

			if ((LA80_1==KW_ASYNC))
			{
				alt80 = 1;
			}
			} finally { DebugExitDecision(80); }
			switch (alt80)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1310:28: KW_ASYNC
				{
				DebugLocation(1310, 28);
				Match(input,KW_ASYNC,Follow._KW_ASYNC_in_lambdaExpressionHeadScan9043); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(80); }

			DebugLocation(1310, 38);
			PushFollow(Follow._lambdaParameterList_in_lambdaExpressionHeadScan9046);
			lambdaParameterList();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1310, 58);
			Match(input,OP_EQUALS_GREATER_THAN,Follow._OP_EQUALS_GREATER_THAN_in_lambdaExpressionHeadScan9048); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambdaExpressionHeadScan", 79);
			LeaveRule("lambdaExpressionHeadScan", 79);
			LeaveRule_lambdaExpressionHeadScan();
		}
		DebugLocation(1310, 80);
		} finally { DebugExitRule(GrammarFileName, "lambdaExpressionHeadScan"); }
		return;

	}
	// $ANTLR end "lambdaExpressionHeadScan"

	partial void EnterRule_lambdaExpression();
	partial void LeaveRule_lambdaExpression();
	// $ANTLR start "lambdaExpression"
	// Truss.g:1312:1: lambdaExpression returns [ExpressionSyntax value] : ( KW_ASYNC )? lpl= lambdaParameterList OP_EQUALS_GREATER_THAN (e= expression |b= block ) ;
	[GrammarRule("lambdaExpression")]
	private ExpressionSyntax lambdaExpression()
	{
		EnterRule_lambdaExpression();
		EnterRule("lambdaExpression", 80);
		TraceIn("lambdaExpression", 80);
		ExpressionSyntax value = default(ExpressionSyntax);


		ImmutableArray<ParameterSyntax> lpl = default(ImmutableArray<ParameterSyntax>);
		ExpressionSyntax e = default(ExpressionSyntax);
		BlockSyntax b = default(BlockSyntax);


		    var modifiers = new ImmutableArray<Modifier>.Builder();
		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "lambdaExpression");
		DebugLocation(1312, 4);
		try
		{
			// Truss.g:1317:5: ( ( KW_ASYNC )? lpl= lambdaParameterList OP_EQUALS_GREATER_THAN (e= expression |b= block ) )
			DebugEnterAlt(1);
			// Truss.g:1318:9: ( KW_ASYNC )? lpl= lambdaParameterList OP_EQUALS_GREATER_THAN (e= expression |b= block )
			{
			DebugLocation(1318, 9);
			// Truss.g:1318:9: ( KW_ASYNC )?
			int alt81=2;
			try { DebugEnterSubRule(81);
			try { DebugEnterDecision(81, false);
			int LA81_1 = input.LA(1);

			if ((LA81_1==KW_ASYNC))
			{
				alt81 = 1;
			}
			} finally { DebugExitDecision(81); }
			switch (alt81)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1319:13: KW_ASYNC
				{
				DebugLocation(1319, 13);
				Match(input,KW_ASYNC,Follow._KW_ASYNC_in_lambdaExpression9093); if (state.failed) return value;
				DebugLocation(1320, 13);
				if (state.backtracking == 0)
				{
					 modifiers.Add(Modifier.Async); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(81); }

			DebugLocation(1322, 12);
			PushFollow(Follow._lambdaParameterList_in_lambdaExpression9130);
			lpl=lambdaParameterList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1323, 9);
			Match(input,OP_EQUALS_GREATER_THAN,Follow._OP_EQUALS_GREATER_THAN_in_lambdaExpression9140); if (state.failed) return value;
			DebugLocation(1324, 9);
			// Truss.g:1324:9: (e= expression |b= block )
			int alt82=2;
			try { DebugEnterSubRule(82);
			try { DebugEnterDecision(82, false);
			int LA82_1 = input.LA(1);

			if ((LA82_1==CHAR||LA82_1==FLOAT||(LA82_1>=HEX_INTEGER && LA82_1<=IDENTIFIER)||LA82_1==INTEGER||(LA82_1>=KW_ASYNC && LA82_1<=KW_BASE)||LA82_1==KW_DEFAULT||LA82_1==KW_FALSE||(LA82_1>=KW_NEW && LA82_1<=KW_NIL)||LA82_1==KW_SIZEOF||LA82_1==KW_THIS||LA82_1==KW_TRUE||LA82_1==KW_TYPEOF||LA82_1==OP_AMPERSAND||LA82_1==OP_EXCLAMATION||LA82_1==OP_MINUS||LA82_1==OP_MINUS_MINUS||LA82_1==OP_PAREN_OPEN||LA82_1==OP_PLUS||LA82_1==OP_PLUS_PLUS||(LA82_1>=OP_TILDE && LA82_1<=STRING)))
			{
				alt82 = 1;
			}
			else if ((LA82_1==OP_BRACE_OPEN))
			{
				alt82 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 82, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(82); }
			switch (alt82)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1325:13: e= expression
				{
				DebugLocation(1325, 14);
				PushFollow(Follow._expression_in_lambdaExpression9166);
				e=expression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1326, 13);
				if (state.backtracking == 0)
				{
					 value = new LambdaExpressionSyntax(modifiers.Build(), lpl, e, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1328:13: b= block
				{
				DebugLocation(1328, 14);
				PushFollow(Follow._block_in_lambdaExpression9206);
				b=block();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1329, 13);
				if (state.backtracking == 0)
				{
					 value = new LambdaExpressionSyntax(modifiers.Build(), lpl, b, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(82); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambdaExpression", 80);
			LeaveRule("lambdaExpression", 80);
			LeaveRule_lambdaExpression();
		}
		DebugLocation(1331, 4);
		} finally { DebugExitRule(GrammarFileName, "lambdaExpression"); }
		return value;

	}
	// $ANTLR end "lambdaExpression"

	partial void EnterRule_lambdaParameterList();
	partial void LeaveRule_lambdaParameterList();
	// $ANTLR start "lambdaParameterList"
	// Truss.g:1333:1: lambdaParameterList returns [ImmutableArray<ParameterSyntax> value] : ( OP_PAREN_OPEN (elpl= explicitLambdaParameterList |ilpl= implicitLambdaParameterList |) OP_PAREN_CLOSE |ilp= implicitLambdaParameter );
	[GrammarRule("lambdaParameterList")]
	private ImmutableArray<ParameterSyntax> lambdaParameterList()
	{
		EnterRule_lambdaParameterList();
		EnterRule("lambdaParameterList", 81);
		TraceIn("lambdaParameterList", 81);
		ImmutableArray<ParameterSyntax> value = default(ImmutableArray<ParameterSyntax>);


		ImmutableArray<ParameterSyntax> elpl = default(ImmutableArray<ParameterSyntax>);
		ImmutableArray<ParameterSyntax> ilpl = default(ImmutableArray<ParameterSyntax>);
		ParameterSyntax ilp = default(ParameterSyntax);

		try { DebugEnterRule(GrammarFileName, "lambdaParameterList");
		DebugLocation(1333, 4);
		try
		{
			// Truss.g:1334:5: ( OP_PAREN_OPEN (elpl= explicitLambdaParameterList |ilpl= implicitLambdaParameterList |) OP_PAREN_CLOSE |ilp= implicitLambdaParameter )
			int alt84=2;
			try { DebugEnterDecision(84, false);
			int LA84_1 = input.LA(1);

			if ((LA84_1==OP_PAREN_OPEN))
			{
				alt84 = 1;
			}
			else if ((LA84_1==IDENTIFIER))
			{
				alt84 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 84, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1335:9: OP_PAREN_OPEN (elpl= explicitLambdaParameterList |ilpl= implicitLambdaParameterList |) OP_PAREN_CLOSE
				{
				DebugLocation(1335, 9);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_lambdaParameterList9259); if (state.failed) return value;
				DebugLocation(1336, 9);
				// Truss.g:1336:9: (elpl= explicitLambdaParameterList |ilpl= implicitLambdaParameterList |)
				int alt83=3;
				try { DebugEnterSubRule(83);
				try { DebugEnterDecision(83, false);
				switch (input.LA(1))
				{
				case KW_BOOL:
				case KW_BYTE:
				case KW_CHAR:
				case KW_DECIMAL:
				case KW_DOUBLE:
				case KW_FLOAT:
				case KW_INT:
				case KW_LONG:
				case KW_OBJECT:
				case KW_OUT:
				case KW_REF:
				case KW_SBYTE:
				case KW_SHORT:
				case KW_STRING:
				case KW_UINT:
				case KW_ULONG:
				case KW_USHORT:
				case KW_VAR:
				case KW_VOID:
					{
					alt83 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA83_2 = input.LA(2);

					if ((LA83_2==IDENTIFIER||(LA83_2>=OP_BRACKET_OPEN && LA83_2<=OP_CARET)||LA83_2==OP_COLON_COLON||LA83_2==OP_DOT||LA83_2==OP_LESS_THAN||LA83_2==OP_QUESTION))
					{
						alt83 = 1;
					}
					else if ((LA83_2==OP_COMMA||LA83_2==OP_PAREN_CLOSE))
					{
						alt83 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 83, 2, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case OP_PAREN_CLOSE:
					{
					alt83 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 83, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(83); }
				switch (alt83)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1337:13: elpl= explicitLambdaParameterList
					{
					DebugLocation(1337, 17);
					PushFollow(Follow._explicitLambdaParameterList_in_lambdaParameterList9285);
					elpl=explicitLambdaParameterList();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1338, 13);
					if (state.backtracking == 0)
					{
						 value = elpl; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:1340:13: ilpl= implicitLambdaParameterList
					{
					DebugLocation(1340, 17);
					PushFollow(Follow._implicitLambdaParameterList_in_lambdaParameterList9325);
					ilpl=implicitLambdaParameterList();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1341, 13);
					if (state.backtracking == 0)
					{
						 value = ilpl; 
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Truss.g:1343:13: 
					{
					DebugLocation(1343, 13);
					if (state.backtracking == 0)
					{
						 value = ImmutableArray<ParameterSyntax>.Empty; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(83); }

				DebugLocation(1345, 9);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_lambdaParameterList9383); if (state.failed) return value;

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1347:9: ilp= implicitLambdaParameter
				{
				DebugLocation(1347, 12);
				PushFollow(Follow._implicitLambdaParameter_in_lambdaParameterList9401);
				ilp=implicitLambdaParameter();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1348, 9);
				if (state.backtracking == 0)
				{
					 value = ImmutableArray<ParameterSyntax>.Create(ilp); 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("lambdaParameterList", 81);
			LeaveRule("lambdaParameterList", 81);
			LeaveRule_lambdaParameterList();
		}
		DebugLocation(1349, 4);
		} finally { DebugExitRule(GrammarFileName, "lambdaParameterList"); }
		return value;

	}
	// $ANTLR end "lambdaParameterList"

	partial void EnterRule_explicitLambdaParameterList();
	partial void LeaveRule_explicitLambdaParameterList();
	// $ANTLR start "explicitLambdaParameterList"
	// Truss.g:1351:1: explicitLambdaParameterList returns [ImmutableArray<ParameterSyntax> value] : elp= explicitLambdaParameter ( OP_COMMA elp= explicitLambdaParameter )* ;
	[GrammarRule("explicitLambdaParameterList")]
	private ImmutableArray<ParameterSyntax> explicitLambdaParameterList()
	{
		EnterRule_explicitLambdaParameterList();
		EnterRule("explicitLambdaParameterList", 82);
		TraceIn("explicitLambdaParameterList", 82);
		ImmutableArray<ParameterSyntax> value = default(ImmutableArray<ParameterSyntax>);


		ParameterSyntax elp = default(ParameterSyntax);


		    var builder = new ImmutableArray<ParameterSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "explicitLambdaParameterList");
		DebugLocation(1351, 4);
		try
		{
			// Truss.g:1355:5: (elp= explicitLambdaParameter ( OP_COMMA elp= explicitLambdaParameter )* )
			DebugEnterAlt(1);
			// Truss.g:1356:9: elp= explicitLambdaParameter ( OP_COMMA elp= explicitLambdaParameter )*
			{
			DebugLocation(1356, 12);
			PushFollow(Follow._explicitLambdaParameter_in_explicitLambdaParameterList9447);
			elp=explicitLambdaParameter();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1357, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(elp); 
			}
			DebugLocation(1358, 9);
			// Truss.g:1358:9: ( OP_COMMA elp= explicitLambdaParameter )*
			try { DebugEnterSubRule(85);
			while (true)
			{
				int alt85=2;
				try { DebugEnterDecision(85, false);
				int LA85_1 = input.LA(1);

				if ((LA85_1==OP_COMMA))
				{
					alt85 = 1;
				}


				} finally { DebugExitDecision(85); }
				switch ( alt85 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1359:13: OP_COMMA elp= explicitLambdaParameter
					{
					DebugLocation(1359, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_explicitLambdaParameterList9481); if (state.failed) return value;
					DebugLocation(1360, 16);
					PushFollow(Follow._explicitLambdaParameter_in_explicitLambdaParameterList9497);
					elp=explicitLambdaParameter();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1361, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(elp); 
					}

					}
					break;

				default:
					goto loop85;
				}
			}

			loop85:
				;

			} finally { DebugExitSubRule(85); }

			DebugLocation(1363, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitLambdaParameterList", 82);
			LeaveRule("explicitLambdaParameterList", 82);
			LeaveRule_explicitLambdaParameterList();
		}
		DebugLocation(1364, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitLambdaParameterList"); }
		return value;

	}
	// $ANTLR end "explicitLambdaParameterList"

	partial void EnterRule_explicitLambdaParameter();
	partial void LeaveRule_explicitLambdaParameter();
	// $ANTLR start "explicitLambdaParameter"
	// Truss.g:1366:1: explicitLambdaParameter returns [ParameterSyntax value] : (am= argumentModifier )? t= typeSyntax idn= identifierName ;
	[GrammarRule("explicitLambdaParameter")]
	private ParameterSyntax explicitLambdaParameter()
	{
		EnterRule_explicitLambdaParameter();
		EnterRule("explicitLambdaParameter", 83);
		TraceIn("explicitLambdaParameter", 83);
		ParameterSyntax value = default(ParameterSyntax);


		ParameterModifier am = default(ParameterModifier);
		TypeSyntax t = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);
		    ParameterModifier? modifier = null;

		try { DebugEnterRule(GrammarFileName, "explicitLambdaParameter");
		DebugLocation(1366, 4);
		try
		{
			// Truss.g:1371:5: ( (am= argumentModifier )? t= typeSyntax idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:1372:9: (am= argumentModifier )? t= typeSyntax idn= identifierName
			{
			DebugLocation(1372, 9);
			// Truss.g:1372:9: (am= argumentModifier )?
			int alt86=2;
			try { DebugEnterSubRule(86);
			try { DebugEnterDecision(86, false);
			int LA86_1 = input.LA(1);

			if ((LA86_1==KW_OUT||LA86_1==KW_REF))
			{
				alt86 = 1;
			}
			} finally { DebugExitDecision(86); }
			switch (alt86)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1372:11: am= argumentModifier
				{
				DebugLocation(1372, 13);
				PushFollow(Follow._argumentModifier_in_explicitLambdaParameter9570);
				am=argumentModifier();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1372, 31);
				if (state.backtracking == 0)
				{
					 modifier = am; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(86); }

			DebugLocation(1372, 54);
			PushFollow(Follow._typeSyntax_in_explicitLambdaParameter9579);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1372, 69);
			PushFollow(Follow._identifierName_in_explicitLambdaParameter9583);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1373, 9);
			if (state.backtracking == 0)
			{

				            value = new ParameterSyntax(
				                ImmutableArray<AttributeListSyntax>.Empty,
				                modifier != null ? ImmutableArray<ParameterModifier>.Create(modifier.Value) : ImmutableArray<ParameterModifier>.Empty,
				                t,
				                idn,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("explicitLambdaParameter", 83);
			LeaveRule("explicitLambdaParameter", 83);
			LeaveRule_explicitLambdaParameter();
		}
		DebugLocation(1382, 4);
		} finally { DebugExitRule(GrammarFileName, "explicitLambdaParameter"); }
		return value;

	}
	// $ANTLR end "explicitLambdaParameter"

	partial void EnterRule_implicitLambdaParameterList();
	partial void LeaveRule_implicitLambdaParameterList();
	// $ANTLR start "implicitLambdaParameterList"
	// Truss.g:1384:1: implicitLambdaParameterList returns [ImmutableArray<ParameterSyntax> value] : ilp= implicitLambdaParameter ( OP_COMMA ilp= implicitLambdaParameter )* ;
	[GrammarRule("implicitLambdaParameterList")]
	private ImmutableArray<ParameterSyntax> implicitLambdaParameterList()
	{
		EnterRule_implicitLambdaParameterList();
		EnterRule("implicitLambdaParameterList", 84);
		TraceIn("implicitLambdaParameterList", 84);
		ImmutableArray<ParameterSyntax> value = default(ImmutableArray<ParameterSyntax>);


		ParameterSyntax ilp = default(ParameterSyntax);


		    var builder = new ImmutableArray<ParameterSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "implicitLambdaParameterList");
		DebugLocation(1384, 4);
		try
		{
			// Truss.g:1388:5: (ilp= implicitLambdaParameter ( OP_COMMA ilp= implicitLambdaParameter )* )
			DebugEnterAlt(1);
			// Truss.g:1389:9: ilp= implicitLambdaParameter ( OP_COMMA ilp= implicitLambdaParameter )*
			{
			DebugLocation(1389, 12);
			PushFollow(Follow._implicitLambdaParameter_in_implicitLambdaParameterList9629);
			ilp=implicitLambdaParameter();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1390, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(ilp); 
			}
			DebugLocation(1391, 9);
			// Truss.g:1391:9: ( OP_COMMA ilp= implicitLambdaParameter )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_1 = input.LA(1);

				if ((LA87_1==OP_COMMA))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1392:13: OP_COMMA ilp= implicitLambdaParameter
					{
					DebugLocation(1392, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_implicitLambdaParameterList9663); if (state.failed) return value;
					DebugLocation(1393, 16);
					PushFollow(Follow._implicitLambdaParameter_in_implicitLambdaParameterList9679);
					ilp=implicitLambdaParameter();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1394, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(ilp); 
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }

			DebugLocation(1396, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implicitLambdaParameterList", 84);
			LeaveRule("implicitLambdaParameterList", 84);
			LeaveRule_implicitLambdaParameterList();
		}
		DebugLocation(1397, 4);
		} finally { DebugExitRule(GrammarFileName, "implicitLambdaParameterList"); }
		return value;

	}
	// $ANTLR end "implicitLambdaParameterList"

	partial void EnterRule_implicitLambdaParameter();
	partial void LeaveRule_implicitLambdaParameter();
	// $ANTLR start "implicitLambdaParameter"
	// Truss.g:1399:1: implicitLambdaParameter returns [ParameterSyntax value] : idn= identifierName ;
	[GrammarRule("implicitLambdaParameter")]
	private ParameterSyntax implicitLambdaParameter()
	{
		EnterRule_implicitLambdaParameter();
		EnterRule("implicitLambdaParameter", 85);
		TraceIn("implicitLambdaParameter", 85);
		ParameterSyntax value = default(ParameterSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "implicitLambdaParameter");
		DebugLocation(1399, 4);
		try
		{
			// Truss.g:1403:5: (idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:1404:9: idn= identifierName
			{
			DebugLocation(1404, 12);
			PushFollow(Follow._identifierName_in_implicitLambdaParameter9750);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1405, 9);
			if (state.backtracking == 0)
			{

				            value = new ParameterSyntax(
				                ImmutableArray<AttributeListSyntax>.Empty,
				                ImmutableArray<ParameterModifier>.Empty,
				                null,
				                idn,
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("implicitLambdaParameter", 85);
			LeaveRule("implicitLambdaParameter", 85);
			LeaveRule_implicitLambdaParameter();
		}
		DebugLocation(1414, 4);
		} finally { DebugExitRule(GrammarFileName, "implicitLambdaParameter"); }
		return value;

	}
	// $ANTLR end "implicitLambdaParameter"

	partial void EnterRule_conditionalExpression();
	partial void LeaveRule_conditionalExpression();
	// $ANTLR start "conditionalExpression"
	// Truss.g:1416:1: conditionalExpression returns [ExpressionSyntax value] : ce= coalescingExpression ( OP_QUESTION e= expression OP_COLON ce= conditionalExpression )? ;
	[GrammarRule("conditionalExpression")]
	private ExpressionSyntax conditionalExpression()
	{
		EnterRule_conditionalExpression();
		EnterRule("conditionalExpression", 86);
		TraceIn("conditionalExpression", 86);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax ce = default(ExpressionSyntax);
		ExpressionSyntax e = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "conditionalExpression");
		DebugLocation(1416, 4);
		try
		{
			// Truss.g:1420:5: (ce= coalescingExpression ( OP_QUESTION e= expression OP_COLON ce= conditionalExpression )? )
			DebugEnterAlt(1);
			// Truss.g:1421:9: ce= coalescingExpression ( OP_QUESTION e= expression OP_COLON ce= conditionalExpression )?
			{
			DebugLocation(1421, 11);
			PushFollow(Follow._coalescingExpression_in_conditionalExpression9796);
			ce=coalescingExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1422, 9);
			if (state.backtracking == 0)
			{
				 value = ce; 
			}
			DebugLocation(1423, 9);
			// Truss.g:1423:9: ( OP_QUESTION e= expression OP_COLON ce= conditionalExpression )?
			int alt88=2;
			try { DebugEnterSubRule(88);
			try { DebugEnterDecision(88, false);
			int LA88_1 = input.LA(1);

			if ((LA88_1==OP_QUESTION))
			{
				alt88 = 1;
			}
			} finally { DebugExitDecision(88); }
			switch (alt88)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1424:13: OP_QUESTION e= expression OP_COLON ce= conditionalExpression
				{
				DebugLocation(1424, 13);
				Match(input,OP_QUESTION,Follow._OP_QUESTION_in_conditionalExpression9830); if (state.failed) return value;
				DebugLocation(1424, 26);
				PushFollow(Follow._expression_in_conditionalExpression9834);
				e=expression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1425, 13);
				Match(input,OP_COLON,Follow._OP_COLON_in_conditionalExpression9848); if (state.failed) return value;
				DebugLocation(1425, 24);
				PushFollow(Follow._conditionalExpression_in_conditionalExpression9852);
				ce=conditionalExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1426, 13);
				if (state.backtracking == 0)
				{
					 value = new ConditionalExpressionSyntax(value, e, ce, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(88); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("conditionalExpression", 86);
			LeaveRule("conditionalExpression", 86);
			LeaveRule_conditionalExpression();
		}
		DebugLocation(1428, 4);
		} finally { DebugExitRule(GrammarFileName, "conditionalExpression"); }
		return value;

	}
	// $ANTLR end "conditionalExpression"

	partial void EnterRule_coalescingExpression();
	partial void LeaveRule_coalescingExpression();
	// $ANTLR start "coalescingExpression"
	// Truss.g:1430:1: coalescingExpression returns [ExpressionSyntax value] : loe= logicalOrExpression ( OP_QUESTION_QUESTION loe= logicalOrExpression )? ;
	[GrammarRule("coalescingExpression")]
	private ExpressionSyntax coalescingExpression()
	{
		EnterRule_coalescingExpression();
		EnterRule("coalescingExpression", 87);
		TraceIn("coalescingExpression", 87);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax loe = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "coalescingExpression");
		DebugLocation(1430, 4);
		try
		{
			// Truss.g:1434:5: (loe= logicalOrExpression ( OP_QUESTION_QUESTION loe= logicalOrExpression )? )
			DebugEnterAlt(1);
			// Truss.g:1435:9: loe= logicalOrExpression ( OP_QUESTION_QUESTION loe= logicalOrExpression )?
			{
			DebugLocation(1435, 12);
			PushFollow(Follow._logicalOrExpression_in_coalescingExpression9913);
			loe=logicalOrExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1436, 9);
			if (state.backtracking == 0)
			{
				 value = loe; 
			}
			DebugLocation(1437, 9);
			// Truss.g:1437:9: ( OP_QUESTION_QUESTION loe= logicalOrExpression )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_1 = input.LA(1);

			if ((LA89_1==OP_QUESTION_QUESTION))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1438:13: OP_QUESTION_QUESTION loe= logicalOrExpression
				{
				DebugLocation(1438, 13);
				Match(input,OP_QUESTION_QUESTION,Follow._OP_QUESTION_QUESTION_in_coalescingExpression9947); if (state.failed) return value;
				DebugLocation(1439, 16);
				PushFollow(Follow._logicalOrExpression_in_coalescingExpression9963);
				loe=logicalOrExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1440, 13);
				if (state.backtracking == 0)
				{
					 value = new BinaryExpressionSyntax(BinaryOperator.QuestionQuestion, value, loe, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(89); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("coalescingExpression", 87);
			LeaveRule("coalescingExpression", 87);
			LeaveRule_coalescingExpression();
		}
		DebugLocation(1442, 4);
		} finally { DebugExitRule(GrammarFileName, "coalescingExpression"); }
		return value;

	}
	// $ANTLR end "coalescingExpression"

	partial void EnterRule_logicalOrExpression();
	partial void LeaveRule_logicalOrExpression();
	// $ANTLR start "logicalOrExpression"
	// Truss.g:1444:1: logicalOrExpression returns [ExpressionSyntax value] : lae= logicalAndExpression ( OP_BAR_BAR lae= logicalAndExpression )* ;
	[GrammarRule("logicalOrExpression")]
	private ExpressionSyntax logicalOrExpression()
	{
		EnterRule_logicalOrExpression();
		EnterRule("logicalOrExpression", 88);
		TraceIn("logicalOrExpression", 88);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax lae = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalOrExpression");
		DebugLocation(1444, 4);
		try
		{
			// Truss.g:1448:5: (lae= logicalAndExpression ( OP_BAR_BAR lae= logicalAndExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1449:9: lae= logicalAndExpression ( OP_BAR_BAR lae= logicalAndExpression )*
			{
			DebugLocation(1449, 12);
			PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10024);
			lae=logicalAndExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1450, 9);
			if (state.backtracking == 0)
			{
				 value = lae; 
			}
			DebugLocation(1451, 9);
			// Truss.g:1451:9: ( OP_BAR_BAR lae= logicalAndExpression )*
			try { DebugEnterSubRule(90);
			while (true)
			{
				int alt90=2;
				try { DebugEnterDecision(90, false);
				int LA90_1 = input.LA(1);

				if ((LA90_1==OP_BAR_BAR))
				{
					alt90 = 1;
				}


				} finally { DebugExitDecision(90); }
				switch ( alt90 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1452:13: OP_BAR_BAR lae= logicalAndExpression
					{
					DebugLocation(1452, 13);
					Match(input,OP_BAR_BAR,Follow._OP_BAR_BAR_in_logicalOrExpression10058); if (state.failed) return value;
					DebugLocation(1452, 27);
					PushFollow(Follow._logicalAndExpression_in_logicalOrExpression10062);
					lae=logicalAndExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1453, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(BinaryOperator.BarBar, value, lae, Span(start)); 
					}

					}
					break;

				default:
					goto loop90;
				}
			}

			loop90:
				;

			} finally { DebugExitSubRule(90); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalOrExpression", 88);
			LeaveRule("logicalOrExpression", 88);
			LeaveRule_logicalOrExpression();
		}
		DebugLocation(1455, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalOrExpression"); }
		return value;

	}
	// $ANTLR end "logicalOrExpression"

	partial void EnterRule_logicalAndExpression();
	partial void LeaveRule_logicalAndExpression();
	// $ANTLR start "logicalAndExpression"
	// Truss.g:1457:1: logicalAndExpression returns [ExpressionSyntax value] : boe= bitwiseOrExpression ( OP_AMPERSAND_AMPERSAND boe= bitwiseOrExpression )* ;
	[GrammarRule("logicalAndExpression")]
	private ExpressionSyntax logicalAndExpression()
	{
		EnterRule_logicalAndExpression();
		EnterRule("logicalAndExpression", 89);
		TraceIn("logicalAndExpression", 89);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax boe = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "logicalAndExpression");
		DebugLocation(1457, 4);
		try
		{
			// Truss.g:1461:5: (boe= bitwiseOrExpression ( OP_AMPERSAND_AMPERSAND boe= bitwiseOrExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1462:9: boe= bitwiseOrExpression ( OP_AMPERSAND_AMPERSAND boe= bitwiseOrExpression )*
			{
			DebugLocation(1462, 12);
			PushFollow(Follow._bitwiseOrExpression_in_logicalAndExpression10123);
			boe=bitwiseOrExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1463, 9);
			if (state.backtracking == 0)
			{
				 value = boe; 
			}
			DebugLocation(1464, 9);
			// Truss.g:1464:9: ( OP_AMPERSAND_AMPERSAND boe= bitwiseOrExpression )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_1 = input.LA(1);

				if ((LA91_1==OP_AMPERSAND_AMPERSAND))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1465:13: OP_AMPERSAND_AMPERSAND boe= bitwiseOrExpression
					{
					DebugLocation(1465, 13);
					Match(input,OP_AMPERSAND_AMPERSAND,Follow._OP_AMPERSAND_AMPERSAND_in_logicalAndExpression10157); if (state.failed) return value;
					DebugLocation(1465, 39);
					PushFollow(Follow._bitwiseOrExpression_in_logicalAndExpression10161);
					boe=bitwiseOrExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1466, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(BinaryOperator.AmpersandAmpersand, value, boe, Span(start)); 
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("logicalAndExpression", 89);
			LeaveRule("logicalAndExpression", 89);
			LeaveRule_logicalAndExpression();
		}
		DebugLocation(1468, 4);
		} finally { DebugExitRule(GrammarFileName, "logicalAndExpression"); }
		return value;

	}
	// $ANTLR end "logicalAndExpression"

	partial void EnterRule_bitwiseOrExpression();
	partial void LeaveRule_bitwiseOrExpression();
	// $ANTLR start "bitwiseOrExpression"
	// Truss.g:1470:1: bitwiseOrExpression returns [ExpressionSyntax value] : bxe= bitwiseXorExpression ( OP_BAR bxe= bitwiseXorExpression )* ;
	[GrammarRule("bitwiseOrExpression")]
	private ExpressionSyntax bitwiseOrExpression()
	{
		EnterRule_bitwiseOrExpression();
		EnterRule("bitwiseOrExpression", 90);
		TraceIn("bitwiseOrExpression", 90);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax bxe = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseOrExpression");
		DebugLocation(1470, 4);
		try
		{
			// Truss.g:1474:5: (bxe= bitwiseXorExpression ( OP_BAR bxe= bitwiseXorExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1475:9: bxe= bitwiseXorExpression ( OP_BAR bxe= bitwiseXorExpression )*
			{
			DebugLocation(1475, 12);
			PushFollow(Follow._bitwiseXorExpression_in_bitwiseOrExpression10222);
			bxe=bitwiseXorExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1476, 9);
			if (state.backtracking == 0)
			{
				 value = bxe; 
			}
			DebugLocation(1477, 9);
			// Truss.g:1477:9: ( OP_BAR bxe= bitwiseXorExpression )*
			try { DebugEnterSubRule(92);
			while (true)
			{
				int alt92=2;
				try { DebugEnterDecision(92, false);
				int LA92_1 = input.LA(1);

				if ((LA92_1==OP_BAR))
				{
					alt92 = 1;
				}


				} finally { DebugExitDecision(92); }
				switch ( alt92 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1478:13: OP_BAR bxe= bitwiseXorExpression
					{
					DebugLocation(1478, 13);
					Match(input,OP_BAR,Follow._OP_BAR_in_bitwiseOrExpression10256); if (state.failed) return value;
					DebugLocation(1478, 23);
					PushFollow(Follow._bitwiseXorExpression_in_bitwiseOrExpression10260);
					bxe=bitwiseXorExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1479, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(BinaryOperator.Bar, value, bxe, Span(start)); 
					}

					}
					break;

				default:
					goto loop92;
				}
			}

			loop92:
				;

			} finally { DebugExitSubRule(92); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseOrExpression", 90);
			LeaveRule("bitwiseOrExpression", 90);
			LeaveRule_bitwiseOrExpression();
		}
		DebugLocation(1481, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseOrExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseOrExpression"

	partial void EnterRule_bitwiseXorExpression();
	partial void LeaveRule_bitwiseXorExpression();
	// $ANTLR start "bitwiseXorExpression"
	// Truss.g:1483:1: bitwiseXorExpression returns [ExpressionSyntax value] : bae= bitwiseAndExpression ( OP_CARET bae= bitwiseAndExpression )* ;
	[GrammarRule("bitwiseXorExpression")]
	private ExpressionSyntax bitwiseXorExpression()
	{
		EnterRule_bitwiseXorExpression();
		EnterRule("bitwiseXorExpression", 91);
		TraceIn("bitwiseXorExpression", 91);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax bae = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseXorExpression");
		DebugLocation(1483, 4);
		try
		{
			// Truss.g:1487:5: (bae= bitwiseAndExpression ( OP_CARET bae= bitwiseAndExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1488:9: bae= bitwiseAndExpression ( OP_CARET bae= bitwiseAndExpression )*
			{
			DebugLocation(1488, 12);
			PushFollow(Follow._bitwiseAndExpression_in_bitwiseXorExpression10321);
			bae=bitwiseAndExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1489, 9);
			if (state.backtracking == 0)
			{
				 value = bae; 
			}
			DebugLocation(1490, 9);
			// Truss.g:1490:9: ( OP_CARET bae= bitwiseAndExpression )*
			try { DebugEnterSubRule(93);
			while (true)
			{
				int alt93=2;
				try { DebugEnterDecision(93, false);
				int LA93_1 = input.LA(1);

				if ((LA93_1==OP_CARET))
				{
					alt93 = 1;
				}


				} finally { DebugExitDecision(93); }
				switch ( alt93 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1491:13: OP_CARET bae= bitwiseAndExpression
					{
					DebugLocation(1491, 13);
					Match(input,OP_CARET,Follow._OP_CARET_in_bitwiseXorExpression10355); if (state.failed) return value;
					DebugLocation(1491, 25);
					PushFollow(Follow._bitwiseAndExpression_in_bitwiseXorExpression10359);
					bae=bitwiseAndExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1492, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(BinaryOperator.Caret, value, bae, Span(start)); 
					}

					}
					break;

				default:
					goto loop93;
				}
			}

			loop93:
				;

			} finally { DebugExitSubRule(93); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseXorExpression", 91);
			LeaveRule("bitwiseXorExpression", 91);
			LeaveRule_bitwiseXorExpression();
		}
		DebugLocation(1494, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseXorExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseXorExpression"

	partial void EnterRule_bitwiseAndExpression();
	partial void LeaveRule_bitwiseAndExpression();
	// $ANTLR start "bitwiseAndExpression"
	// Truss.g:1496:1: bitwiseAndExpression returns [ExpressionSyntax value] : ee= equalityExpression ( OP_AMPERSAND ee= equalityExpression )* ;
	[GrammarRule("bitwiseAndExpression")]
	private ExpressionSyntax bitwiseAndExpression()
	{
		EnterRule_bitwiseAndExpression();
		EnterRule("bitwiseAndExpression", 92);
		TraceIn("bitwiseAndExpression", 92);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax ee = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "bitwiseAndExpression");
		DebugLocation(1496, 4);
		try
		{
			// Truss.g:1500:5: (ee= equalityExpression ( OP_AMPERSAND ee= equalityExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1501:9: ee= equalityExpression ( OP_AMPERSAND ee= equalityExpression )*
			{
			DebugLocation(1501, 11);
			PushFollow(Follow._equalityExpression_in_bitwiseAndExpression10420);
			ee=equalityExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1502, 9);
			if (state.backtracking == 0)
			{
				 value = ee; 
			}
			DebugLocation(1503, 9);
			// Truss.g:1503:9: ( OP_AMPERSAND ee= equalityExpression )*
			try { DebugEnterSubRule(94);
			while (true)
			{
				int alt94=2;
				try { DebugEnterDecision(94, false);
				int LA94_1 = input.LA(1);

				if ((LA94_1==OP_AMPERSAND))
				{
					alt94 = 1;
				}


				} finally { DebugExitDecision(94); }
				switch ( alt94 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1504:13: OP_AMPERSAND ee= equalityExpression
					{
					DebugLocation(1504, 13);
					Match(input,OP_AMPERSAND,Follow._OP_AMPERSAND_in_bitwiseAndExpression10454); if (state.failed) return value;
					DebugLocation(1504, 28);
					PushFollow(Follow._equalityExpression_in_bitwiseAndExpression10458);
					ee=equalityExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1505, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(BinaryOperator.Ampersand, value, ee, Span(start)); 
					}

					}
					break;

				default:
					goto loop94;
				}
			}

			loop94:
				;

			} finally { DebugExitSubRule(94); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("bitwiseAndExpression", 92);
			LeaveRule("bitwiseAndExpression", 92);
			LeaveRule_bitwiseAndExpression();
		}
		DebugLocation(1507, 4);
		} finally { DebugExitRule(GrammarFileName, "bitwiseAndExpression"); }
		return value;

	}
	// $ANTLR end "bitwiseAndExpression"

	partial void EnterRule_equalityExpression();
	partial void LeaveRule_equalityExpression();
	// $ANTLR start "equalityExpression"
	// Truss.g:1509:1: equalityExpression returns [ExpressionSyntax value] : rex= relationalExpression (eo= equalityOperator rex= relationalExpression )* ;
	[GrammarRule("equalityExpression")]
	private ExpressionSyntax equalityExpression()
	{
		EnterRule_equalityExpression();
		EnterRule("equalityExpression", 93);
		TraceIn("equalityExpression", 93);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax rex = default(ExpressionSyntax);
		BinaryOperator eo = default(BinaryOperator);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "equalityExpression");
		DebugLocation(1509, 4);
		try
		{
			// Truss.g:1513:5: (rex= relationalExpression (eo= equalityOperator rex= relationalExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1514:9: rex= relationalExpression (eo= equalityOperator rex= relationalExpression )*
			{
			DebugLocation(1514, 12);
			PushFollow(Follow._relationalExpression_in_equalityExpression10519);
			rex=relationalExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1515, 9);
			if (state.backtracking == 0)
			{
				 value = rex; 
			}
			DebugLocation(1516, 9);
			// Truss.g:1516:9: (eo= equalityOperator rex= relationalExpression )*
			try { DebugEnterSubRule(95);
			while (true)
			{
				int alt95=2;
				try { DebugEnterDecision(95, false);
				int LA95_1 = input.LA(1);

				if ((LA95_1==OP_EQUALS_EQUALS||LA95_1==OP_EXCLAMATION_EQUALS))
				{
					alt95 = 1;
				}


				} finally { DebugExitDecision(95); }
				switch ( alt95 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1517:13: eo= equalityOperator rex= relationalExpression
					{
					DebugLocation(1517, 15);
					PushFollow(Follow._equalityOperator_in_equalityExpression10555);
					eo=equalityOperator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1517, 36);
					PushFollow(Follow._relationalExpression_in_equalityExpression10559);
					rex=relationalExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1518, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(eo, value, rex, Span(start)); 
					}

					}
					break;

				default:
					goto loop95;
				}
			}

			loop95:
				;

			} finally { DebugExitSubRule(95); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityExpression", 93);
			LeaveRule("equalityExpression", 93);
			LeaveRule_equalityExpression();
		}
		DebugLocation(1520, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityExpression"); }
		return value;

	}
	// $ANTLR end "equalityExpression"

	partial void EnterRule_equalityOperator();
	partial void LeaveRule_equalityOperator();
	// $ANTLR start "equalityOperator"
	// Truss.g:1522:1: equalityOperator returns [BinaryOperator value] : ( OP_EQUALS_EQUALS | OP_EXCLAMATION_EQUALS );
	[GrammarRule("equalityOperator")]
	private BinaryOperator equalityOperator()
	{
		EnterRule_equalityOperator();
		EnterRule("equalityOperator", 94);
		TraceIn("equalityOperator", 94);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "equalityOperator");
		DebugLocation(1522, 4);
		try
		{
			// Truss.g:1523:5: ( OP_EQUALS_EQUALS | OP_EXCLAMATION_EQUALS )
			int alt96=2;
			try { DebugEnterDecision(96, false);
			int LA96_1 = input.LA(1);

			if ((LA96_1==OP_EQUALS_EQUALS))
			{
				alt96 = 1;
			}
			else if ((LA96_1==OP_EXCLAMATION_EQUALS))
			{
				alt96 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 96, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(96); }
			switch (alt96)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1523:7: OP_EQUALS_EQUALS
				{
				DebugLocation(1523, 7);
				Match(input,OP_EQUALS_EQUALS,Follow._OP_EQUALS_EQUALS_in_equalityOperator10605); if (state.failed) return value;
				DebugLocation(1523, 24);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.EqualsEquals; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1524:7: OP_EXCLAMATION_EQUALS
				{
				DebugLocation(1524, 7);
				Match(input,OP_EXCLAMATION_EQUALS,Follow._OP_EXCLAMATION_EQUALS_in_equalityOperator10615); if (state.failed) return value;
				DebugLocation(1524, 29);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.ExclamationEquals; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("equalityOperator", 94);
			LeaveRule("equalityOperator", 94);
			LeaveRule_equalityOperator();
		}
		DebugLocation(1525, 4);
		} finally { DebugExitRule(GrammarFileName, "equalityOperator"); }
		return value;

	}
	// $ANTLR end "equalityOperator"

	partial void EnterRule_relationalExpression();
	partial void LeaveRule_relationalExpression();
	// $ANTLR start "relationalExpression"
	// Truss.g:1527:1: relationalExpression returns [ExpressionSyntax value] : se= shiftExpression ( (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name ) )* ;
	[GrammarRule("relationalExpression")]
	private ExpressionSyntax relationalExpression()
	{
		EnterRule_relationalExpression();
		EnterRule("relationalExpression", 95);
		TraceIn("relationalExpression", 95);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax se = default(ExpressionSyntax);
		BinaryOperator ro = default(BinaryOperator);
		BinaryOperator iao = default(BinaryOperator);
		NameSyntax n = default(NameSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "relationalExpression");
		DebugLocation(1527, 4);
		try
		{
			// Truss.g:1531:5: (se= shiftExpression ( (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name ) )* )
			DebugEnterAlt(1);
			// Truss.g:1532:9: se= shiftExpression ( (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name ) )*
			{
			DebugLocation(1532, 11);
			PushFollow(Follow._shiftExpression_in_relationalExpression10653);
			se=shiftExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1533, 9);
			if (state.backtracking == 0)
			{
				 value = se; 
			}
			DebugLocation(1534, 9);
			// Truss.g:1534:9: ( (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name ) )*
			try { DebugEnterSubRule(98);
			while (true)
			{
				int alt98=2;
				try { DebugEnterDecision(98, false);
				int LA98_1 = input.LA(1);

				if ((LA98_1==KW_AS||LA98_1==KW_IS||(LA98_1>=OP_GREATER_THAN && LA98_1<=OP_GREATER_THAN_EQUALS)||(LA98_1>=OP_LESS_THAN && LA98_1<=OP_LESS_THAN_EQUALS)))
				{
					alt98 = 1;
				}


				} finally { DebugExitDecision(98); }
				switch ( alt98 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1535:13: (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name )
					{
					DebugLocation(1535, 13);
					// Truss.g:1535:13: (ro= relationalOperator se= shiftExpression |iao= isAsOperator n= name )
					int alt97=2;
					try { DebugEnterSubRule(97);
					try { DebugEnterDecision(97, false);
					int LA97_1 = input.LA(1);

					if (((LA97_1>=OP_GREATER_THAN && LA97_1<=OP_GREATER_THAN_EQUALS)||(LA97_1>=OP_LESS_THAN && LA97_1<=OP_LESS_THAN_EQUALS)))
					{
						alt97 = 1;
					}
					else if ((LA97_1==KW_AS||LA97_1==KW_IS))
					{
						alt97 = 2;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 97, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:1536:17: ro= relationalOperator se= shiftExpression
						{
						DebugLocation(1536, 19);
						PushFollow(Follow._relationalOperator_in_relationalExpression10707);
						ro=relationalOperator();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1536, 41);
						PushFollow(Follow._shiftExpression_in_relationalExpression10711);
						se=shiftExpression();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1537, 17);
						if (state.backtracking == 0)
						{
							 value = new BinaryExpressionSyntax(ro, value, se, Span(start)); 
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// Truss.g:1539:17: iao= isAsOperator n= name
						{
						DebugLocation(1539, 20);
						PushFollow(Follow._isAsOperator_in_relationalExpression10763);
						iao=isAsOperator();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1539, 35);
						PushFollow(Follow._name_in_relationalExpression10767);
						n=name();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1540, 17);
						if (state.backtracking == 0)
						{
							 value = new BinaryExpressionSyntax(iao, value, n, Span(start)); 
						}

						}
						break;

					}
					} finally { DebugExitSubRule(97); }


					}
					break;

				default:
					goto loop98;
				}
			}

			loop98:
				;

			} finally { DebugExitSubRule(98); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalExpression", 95);
			LeaveRule("relationalExpression", 95);
			LeaveRule_relationalExpression();
		}
		DebugLocation(1543, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalExpression"); }
		return value;

	}
	// $ANTLR end "relationalExpression"

	partial void EnterRule_relationalOperator();
	partial void LeaveRule_relationalOperator();
	// $ANTLR start "relationalOperator"
	// Truss.g:1545:1: relationalOperator returns [BinaryOperator value] : ( OP_GREATER_THAN | OP_GREATER_THAN_EQUALS | OP_LESS_THAN | OP_LESS_THAN_EQUALS );
	[GrammarRule("relationalOperator")]
	private BinaryOperator relationalOperator()
	{
		EnterRule_relationalOperator();
		EnterRule("relationalOperator", 96);
		TraceIn("relationalOperator", 96);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "relationalOperator");
		DebugLocation(1545, 4);
		try
		{
			// Truss.g:1546:5: ( OP_GREATER_THAN | OP_GREATER_THAN_EQUALS | OP_LESS_THAN | OP_LESS_THAN_EQUALS )
			int alt99=4;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case OP_GREATER_THAN:
				{
				alt99 = 1;
				}
				break;
			case OP_GREATER_THAN_EQUALS:
				{
				alt99 = 2;
				}
				break;
			case OP_LESS_THAN:
				{
				alt99 = 3;
				}
				break;
			case OP_LESS_THAN_EQUALS:
				{
				alt99 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1546:7: OP_GREATER_THAN
				{
				DebugLocation(1546, 7);
				Match(input,OP_GREATER_THAN,Follow._OP_GREATER_THAN_in_relationalOperator10831); if (state.failed) return value;
				DebugLocation(1546, 23);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.GreaterThan; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1547:7: OP_GREATER_THAN_EQUALS
				{
				DebugLocation(1547, 7);
				Match(input,OP_GREATER_THAN_EQUALS,Follow._OP_GREATER_THAN_EQUALS_in_relationalOperator10841); if (state.failed) return value;
				DebugLocation(1547, 30);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.GreaterThanEquals; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1548:7: OP_LESS_THAN
				{
				DebugLocation(1548, 7);
				Match(input,OP_LESS_THAN,Follow._OP_LESS_THAN_in_relationalOperator10851); if (state.failed) return value;
				DebugLocation(1548, 20);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.LessThan; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:1549:7: OP_LESS_THAN_EQUALS
				{
				DebugLocation(1549, 7);
				Match(input,OP_LESS_THAN_EQUALS,Follow._OP_LESS_THAN_EQUALS_in_relationalOperator10861); if (state.failed) return value;
				DebugLocation(1549, 27);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.LessThanEquals; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("relationalOperator", 96);
			LeaveRule("relationalOperator", 96);
			LeaveRule_relationalOperator();
		}
		DebugLocation(1550, 4);
		} finally { DebugExitRule(GrammarFileName, "relationalOperator"); }
		return value;

	}
	// $ANTLR end "relationalOperator"

	partial void EnterRule_isAsOperator();
	partial void LeaveRule_isAsOperator();
	// $ANTLR start "isAsOperator"
	// Truss.g:1552:1: isAsOperator returns [BinaryOperator value] : ( KW_IS | KW_AS );
	[GrammarRule("isAsOperator")]
	private BinaryOperator isAsOperator()
	{
		EnterRule_isAsOperator();
		EnterRule("isAsOperator", 97);
		TraceIn("isAsOperator", 97);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "isAsOperator");
		DebugLocation(1552, 4);
		try
		{
			// Truss.g:1553:5: ( KW_IS | KW_AS )
			int alt100=2;
			try { DebugEnterDecision(100, false);
			int LA100_1 = input.LA(1);

			if ((LA100_1==KW_IS))
			{
				alt100 = 1;
			}
			else if ((LA100_1==KW_AS))
			{
				alt100 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 100, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(100); }
			switch (alt100)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1553:7: KW_IS
				{
				DebugLocation(1553, 7);
				Match(input,KW_IS,Follow._KW_IS_in_isAsOperator10884); if (state.failed) return value;
				DebugLocation(1553, 13);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Is; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1554:7: KW_AS
				{
				DebugLocation(1554, 7);
				Match(input,KW_AS,Follow._KW_AS_in_isAsOperator10894); if (state.failed) return value;
				DebugLocation(1554, 13);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.As; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("isAsOperator", 97);
			LeaveRule("isAsOperator", 97);
			LeaveRule_isAsOperator();
		}
		DebugLocation(1555, 4);
		} finally { DebugExitRule(GrammarFileName, "isAsOperator"); }
		return value;

	}
	// $ANTLR end "isAsOperator"

	partial void EnterRule_shiftExpression();
	partial void LeaveRule_shiftExpression();
	// $ANTLR start "shiftExpression"
	// Truss.g:1557:1: shiftExpression returns [ExpressionSyntax value] : ae= additiveExpression (so= shiftOperator ae= additiveExpression )* ;
	[GrammarRule("shiftExpression")]
	private ExpressionSyntax shiftExpression()
	{
		EnterRule_shiftExpression();
		EnterRule("shiftExpression", 98);
		TraceIn("shiftExpression", 98);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax ae = default(ExpressionSyntax);
		BinaryOperator so = default(BinaryOperator);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "shiftExpression");
		DebugLocation(1557, 4);
		try
		{
			// Truss.g:1561:5: (ae= additiveExpression (so= shiftOperator ae= additiveExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1562:9: ae= additiveExpression (so= shiftOperator ae= additiveExpression )*
			{
			DebugLocation(1562, 11);
			PushFollow(Follow._additiveExpression_in_shiftExpression10932);
			ae=additiveExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1563, 9);
			if (state.backtracking == 0)
			{
				 value = ae; 
			}
			DebugLocation(1564, 9);
			// Truss.g:1564:9: (so= shiftOperator ae= additiveExpression )*
			try { DebugEnterSubRule(101);
			while (true)
			{
				int alt101=2;
				try { DebugEnterDecision(101, false);
				int LA101_1 = input.LA(1);

				if ((LA101_1==OP_GREATER_THAN_GREATER_THAN_FIRST||LA101_1==OP_LESS_THAN_LESS_THAN))
				{
					alt101 = 1;
				}


				} finally { DebugExitDecision(101); }
				switch ( alt101 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1565:13: so= shiftOperator ae= additiveExpression
					{
					DebugLocation(1565, 15);
					PushFollow(Follow._shiftOperator_in_shiftExpression10968);
					so=shiftOperator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1565, 32);
					PushFollow(Follow._additiveExpression_in_shiftExpression10972);
					ae=additiveExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1566, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(so, value, ae, Span(start)); 
					}

					}
					break;

				default:
					goto loop101;
				}
			}

			loop101:
				;

			} finally { DebugExitSubRule(101); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftExpression", 98);
			LeaveRule("shiftExpression", 98);
			LeaveRule_shiftExpression();
		}
		DebugLocation(1568, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftExpression"); }
		return value;

	}
	// $ANTLR end "shiftExpression"

	partial void EnterRule_shiftOperator();
	partial void LeaveRule_shiftOperator();
	// $ANTLR start "shiftOperator"
	// Truss.g:1570:1: shiftOperator returns [BinaryOperator value] : ( op_GREATER_THAN_GREATER_THAN | OP_LESS_THAN_LESS_THAN );
	[GrammarRule("shiftOperator")]
	private BinaryOperator shiftOperator()
	{
		EnterRule_shiftOperator();
		EnterRule("shiftOperator", 99);
		TraceIn("shiftOperator", 99);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "shiftOperator");
		DebugLocation(1570, 4);
		try
		{
			// Truss.g:1571:5: ( op_GREATER_THAN_GREATER_THAN | OP_LESS_THAN_LESS_THAN )
			int alt102=2;
			try { DebugEnterDecision(102, false);
			int LA102_1 = input.LA(1);

			if ((LA102_1==OP_GREATER_THAN_GREATER_THAN_FIRST))
			{
				alt102 = 1;
			}
			else if ((LA102_1==OP_LESS_THAN_LESS_THAN))
			{
				alt102 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 102, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1571:7: op_GREATER_THAN_GREATER_THAN
				{
				DebugLocation(1571, 7);
				PushFollow(Follow._op_GREATER_THAN_GREATER_THAN_in_shiftOperator11018);
				op_GREATER_THAN_GREATER_THAN();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1571, 36);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.GreaterThanGreaterThan; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1572:7: OP_LESS_THAN_LESS_THAN
				{
				DebugLocation(1572, 7);
				Match(input,OP_LESS_THAN_LESS_THAN,Follow._OP_LESS_THAN_LESS_THAN_in_shiftOperator11028); if (state.failed) return value;
				DebugLocation(1572, 30);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.LessThanLessThan; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("shiftOperator", 99);
			LeaveRule("shiftOperator", 99);
			LeaveRule_shiftOperator();
		}
		DebugLocation(1573, 4);
		} finally { DebugExitRule(GrammarFileName, "shiftOperator"); }
		return value;

	}
	// $ANTLR end "shiftOperator"

	partial void EnterRule_additiveExpression();
	partial void LeaveRule_additiveExpression();
	// $ANTLR start "additiveExpression"
	// Truss.g:1575:1: additiveExpression returns [ExpressionSyntax value] : me= multiplicativeExpression (ao= additiveOperator me= multiplicativeExpression )* ;
	[GrammarRule("additiveExpression")]
	private ExpressionSyntax additiveExpression()
	{
		EnterRule_additiveExpression();
		EnterRule("additiveExpression", 100);
		TraceIn("additiveExpression", 100);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax me = default(ExpressionSyntax);
		BinaryOperator ao = default(BinaryOperator);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "additiveExpression");
		DebugLocation(1575, 4);
		try
		{
			// Truss.g:1579:5: (me= multiplicativeExpression (ao= additiveOperator me= multiplicativeExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1580:9: me= multiplicativeExpression (ao= additiveOperator me= multiplicativeExpression )*
			{
			DebugLocation(1580, 11);
			PushFollow(Follow._multiplicativeExpression_in_additiveExpression11066);
			me=multiplicativeExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1581, 9);
			if (state.backtracking == 0)
			{
				 value = me; 
			}
			DebugLocation(1582, 9);
			// Truss.g:1582:9: (ao= additiveOperator me= multiplicativeExpression )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_1 = input.LA(1);

				if ((LA103_1==OP_MINUS||LA103_1==OP_PLUS))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1583:13: ao= additiveOperator me= multiplicativeExpression
					{
					DebugLocation(1583, 15);
					PushFollow(Follow._additiveOperator_in_additiveExpression11102);
					ao=additiveOperator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1583, 35);
					PushFollow(Follow._multiplicativeExpression_in_additiveExpression11106);
					me=multiplicativeExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1584, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(ao, value, me, Span(start)); 
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveExpression", 100);
			LeaveRule("additiveExpression", 100);
			LeaveRule_additiveExpression();
		}
		DebugLocation(1586, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveExpression"); }
		return value;

	}
	// $ANTLR end "additiveExpression"

	partial void EnterRule_additiveOperator();
	partial void LeaveRule_additiveOperator();
	// $ANTLR start "additiveOperator"
	// Truss.g:1588:1: additiveOperator returns [BinaryOperator value] : ( OP_PLUS | OP_MINUS );
	[GrammarRule("additiveOperator")]
	private BinaryOperator additiveOperator()
	{
		EnterRule_additiveOperator();
		EnterRule("additiveOperator", 101);
		TraceIn("additiveOperator", 101);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "additiveOperator");
		DebugLocation(1588, 4);
		try
		{
			// Truss.g:1589:5: ( OP_PLUS | OP_MINUS )
			int alt104=2;
			try { DebugEnterDecision(104, false);
			int LA104_1 = input.LA(1);

			if ((LA104_1==OP_PLUS))
			{
				alt104 = 1;
			}
			else if ((LA104_1==OP_MINUS))
			{
				alt104 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 104, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(104); }
			switch (alt104)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1589:7: OP_PLUS
				{
				DebugLocation(1589, 7);
				Match(input,OP_PLUS,Follow._OP_PLUS_in_additiveOperator11152); if (state.failed) return value;
				DebugLocation(1589, 15);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Plus; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1590:7: OP_MINUS
				{
				DebugLocation(1590, 7);
				Match(input,OP_MINUS,Follow._OP_MINUS_in_additiveOperator11162); if (state.failed) return value;
				DebugLocation(1590, 16);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Minus; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("additiveOperator", 101);
			LeaveRule("additiveOperator", 101);
			LeaveRule_additiveOperator();
		}
		DebugLocation(1591, 4);
		} finally { DebugExitRule(GrammarFileName, "additiveOperator"); }
		return value;

	}
	// $ANTLR end "additiveOperator"

	partial void EnterRule_multiplicativeExpression();
	partial void LeaveRule_multiplicativeExpression();
	// $ANTLR start "multiplicativeExpression"
	// Truss.g:1593:1: multiplicativeExpression returns [ExpressionSyntax value] : eu= unaryExpression (mo= multiplicativeOperator ue= unaryExpression )* ;
	[GrammarRule("multiplicativeExpression")]
	private ExpressionSyntax multiplicativeExpression()
	{
		EnterRule_multiplicativeExpression();
		EnterRule("multiplicativeExpression", 102);
		TraceIn("multiplicativeExpression", 102);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax eu = default(ExpressionSyntax);
		BinaryOperator mo = default(BinaryOperator);
		ExpressionSyntax ue = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "multiplicativeExpression");
		DebugLocation(1593, 4);
		try
		{
			// Truss.g:1597:5: (eu= unaryExpression (mo= multiplicativeOperator ue= unaryExpression )* )
			DebugEnterAlt(1);
			// Truss.g:1598:9: eu= unaryExpression (mo= multiplicativeOperator ue= unaryExpression )*
			{
			DebugLocation(1598, 11);
			PushFollow(Follow._unaryExpression_in_multiplicativeExpression11200);
			eu=unaryExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1599, 9);
			if (state.backtracking == 0)
			{
				 value = eu; 
			}
			DebugLocation(1600, 9);
			// Truss.g:1600:9: (mo= multiplicativeOperator ue= unaryExpression )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_1 = input.LA(1);

				if ((LA105_1==OP_ASTERISK||LA105_1==OP_PERCENT||LA105_1==OP_SLASH))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1601:13: mo= multiplicativeOperator ue= unaryExpression
					{
					DebugLocation(1601, 15);
					PushFollow(Follow._multiplicativeOperator_in_multiplicativeExpression11236);
					mo=multiplicativeOperator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1601, 41);
					PushFollow(Follow._unaryExpression_in_multiplicativeExpression11240);
					ue=unaryExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1602, 13);
					if (state.backtracking == 0)
					{
						 value = new BinaryExpressionSyntax(mo, value, ue, Span(start)); 
					}

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeExpression", 102);
			LeaveRule("multiplicativeExpression", 102);
			LeaveRule_multiplicativeExpression();
		}
		DebugLocation(1604, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeExpression"); }
		return value;

	}
	// $ANTLR end "multiplicativeExpression"

	partial void EnterRule_multiplicativeOperator();
	partial void LeaveRule_multiplicativeOperator();
	// $ANTLR start "multiplicativeOperator"
	// Truss.g:1606:1: multiplicativeOperator returns [BinaryOperator value] : ( OP_ASTERISK | OP_SLASH | OP_PERCENT );
	[GrammarRule("multiplicativeOperator")]
	private BinaryOperator multiplicativeOperator()
	{
		EnterRule_multiplicativeOperator();
		EnterRule("multiplicativeOperator", 103);
		TraceIn("multiplicativeOperator", 103);
		BinaryOperator value = default(BinaryOperator);


		try { DebugEnterRule(GrammarFileName, "multiplicativeOperator");
		DebugLocation(1606, 4);
		try
		{
			// Truss.g:1607:5: ( OP_ASTERISK | OP_SLASH | OP_PERCENT )
			int alt106=3;
			try { DebugEnterDecision(106, false);
			switch (input.LA(1))
			{
			case OP_ASTERISK:
				{
				alt106 = 1;
				}
				break;
			case OP_SLASH:
				{
				alt106 = 2;
				}
				break;
			case OP_PERCENT:
				{
				alt106 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 106, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(106); }
			switch (alt106)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1607:7: OP_ASTERISK
				{
				DebugLocation(1607, 7);
				Match(input,OP_ASTERISK,Follow._OP_ASTERISK_in_multiplicativeOperator11286); if (state.failed) return value;
				DebugLocation(1607, 19);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Asterisk; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1608:7: OP_SLASH
				{
				DebugLocation(1608, 7);
				Match(input,OP_SLASH,Follow._OP_SLASH_in_multiplicativeOperator11296); if (state.failed) return value;
				DebugLocation(1608, 16);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Slash; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1609:7: OP_PERCENT
				{
				DebugLocation(1609, 7);
				Match(input,OP_PERCENT,Follow._OP_PERCENT_in_multiplicativeOperator11306); if (state.failed) return value;
				DebugLocation(1609, 18);
				if (state.backtracking == 0)
				{
					 value = BinaryOperator.Percent; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("multiplicativeOperator", 103);
			LeaveRule("multiplicativeOperator", 103);
			LeaveRule_multiplicativeOperator();
		}
		DebugLocation(1610, 4);
		} finally { DebugExitRule(GrammarFileName, "multiplicativeOperator"); }
		return value;

	}
	// $ANTLR end "multiplicativeOperator"

	partial void EnterRule_unaryExpression();
	partial void LeaveRule_unaryExpression();
	// $ANTLR start "unaryExpression"
	// Truss.g:1612:1: unaryExpression returns [ExpressionSyntax value] : (puo1= prefixUnaryOperator ue= unaryExpression | ( OP_PAREN_OPEN castType OP_PAREN_CLOSE expression )=>ce= castExpression |ae= awaitExpression |p= primaryExpression (s= selector )* (puo2= postfixUnaryOperator )? );
	[GrammarRule("unaryExpression")]
	private ExpressionSyntax unaryExpression()
	{
		EnterRule_unaryExpression();
		EnterRule("unaryExpression", 104);
		TraceIn("unaryExpression", 104);
		ExpressionSyntax value = default(ExpressionSyntax);


		PrefixUnaryOperator puo1 = default(PrefixUnaryOperator);
		ExpressionSyntax ue = default(ExpressionSyntax);
		ExpressionSyntax ce = default(ExpressionSyntax);
		AwaitExpressionSyntax ae = default(AwaitExpressionSyntax);
		ExpressionSyntax p = default(ExpressionSyntax);
		ISelector s = default(ISelector);
		PostfixUnaryOperator puo2 = default(PostfixUnaryOperator);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "unaryExpression");
		DebugLocation(1612, 4);
		try
		{
			// Truss.g:1616:5: (puo1= prefixUnaryOperator ue= unaryExpression | ( OP_PAREN_OPEN castType OP_PAREN_CLOSE expression )=>ce= castExpression |ae= awaitExpression |p= primaryExpression (s= selector )* (puo2= postfixUnaryOperator )? )
			int alt109=4;
			try { DebugEnterDecision(109, false);
			switch (input.LA(1))
			{
			case OP_AMPERSAND:
			case OP_EXCLAMATION:
			case OP_MINUS:
			case OP_MINUS_MINUS:
			case OP_PLUS:
			case OP_PLUS_PLUS:
			case OP_TILDE:
				{
				alt109 = 1;
				}
				break;
			case OP_PAREN_OPEN:
				{
				int LA109_2 = input.LA(2);

				if ((EvaluatePredicate(synpred12_Truss_fragment)))
				{
					alt109 = 2;
				}
				else if ((true))
				{
					alt109 = 4;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 109, 8, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				}
				break;
			case KW_AWAIT:
				{
				alt109 = 3;
				}
				break;
			case CHAR:
			case FLOAT:
			case HEX_INTEGER:
			case IDENTIFIER:
			case INTEGER:
			case KW_BASE:
			case KW_DEFAULT:
			case KW_FALSE:
			case KW_NEW:
			case KW_NIL:
			case KW_SIZEOF:
			case KW_THIS:
			case KW_TRUE:
			case KW_TYPEOF:
			case STRING:
				{
				alt109 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 109, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1617:9: puo1= prefixUnaryOperator ue= unaryExpression
				{
				DebugLocation(1617, 13);
				PushFollow(Follow._prefixUnaryOperator_in_unaryExpression11344);
				puo1=prefixUnaryOperator();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1617, 36);
				PushFollow(Follow._unaryExpression_in_unaryExpression11348);
				ue=unaryExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1618, 9);
				if (state.backtracking == 0)
				{
					 value = new PrefixUnaryExpressionSyntax(puo1, ue, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1620:9: ( OP_PAREN_OPEN castType OP_PAREN_CLOSE expression )=>ce= castExpression
				{
				DebugLocation(1621, 11);
				PushFollow(Follow._castExpression_in_unaryExpression11397);
				ce=castExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1622, 9);
				if (state.backtracking == 0)
				{
					 value = ce; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1624:9: ae= awaitExpression
				{
				DebugLocation(1624, 11);
				PushFollow(Follow._awaitExpression_in_unaryExpression11425);
				ae=awaitExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1625, 9);
				if (state.backtracking == 0)
				{
					 value = ae; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:1627:9: p= primaryExpression (s= selector )* (puo2= postfixUnaryOperator )?
				{
				DebugLocation(1627, 10);
				PushFollow(Follow._primaryExpression_in_unaryExpression11453);
				p=primaryExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1628, 9);
				if (state.backtracking == 0)
				{
					 value = p; 
				}
				DebugLocation(1629, 9);
				// Truss.g:1629:9: (s= selector )*
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, false);
					int LA107_1 = input.LA(1);

					if ((LA107_1==OP_BRACKET_OPEN||LA107_1==OP_DOT||LA107_1==OP_PAREN_OPEN))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch ( alt107 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:1630:13: s= selector
						{
						DebugLocation(1630, 14);
						PushFollow(Follow._selector_in_unaryExpression11489);
						s=selector();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1631, 13);
						if (state.backtracking == 0)
						{
							 value = s.Build(value); 
						}

						}
						break;

					default:
						goto loop107;
					}
				}

				loop107:
					;

				} finally { DebugExitSubRule(107); }

				DebugLocation(1633, 9);
				// Truss.g:1633:9: (puo2= postfixUnaryOperator )?
				int alt108=2;
				try { DebugEnterSubRule(108);
				try { DebugEnterDecision(108, false);
				int LA108_1 = input.LA(1);

				if ((LA108_1==OP_MINUS_MINUS||LA108_1==OP_PLUS_PLUS))
				{
					alt108 = 1;
				}
				} finally { DebugExitDecision(108); }
				switch (alt108)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1634:13: puo2= postfixUnaryOperator
					{
					DebugLocation(1634, 17);
					PushFollow(Follow._postfixUnaryOperator_in_unaryExpression11540);
					puo2=postfixUnaryOperator();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1635, 13);
					if (state.backtracking == 0)
					{
						 value = new PostfixUnaryExpressionSyntax(puo2, value, Span(start)); 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(108); }


				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("unaryExpression", 104);
			LeaveRule("unaryExpression", 104);
			LeaveRule_unaryExpression();
		}
		DebugLocation(1637, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryExpression"); }
		return value;

	}
	// $ANTLR end "unaryExpression"

	partial void EnterRule_awaitExpression();
	partial void LeaveRule_awaitExpression();
	// $ANTLR start "awaitExpression"
	// Truss.g:1639:1: awaitExpression returns [AwaitExpressionSyntax value] : KW_AWAIT ue= unaryExpression ;
	[GrammarRule("awaitExpression")]
	private AwaitExpressionSyntax awaitExpression()
	{
		EnterRule_awaitExpression();
		EnterRule("awaitExpression", 105);
		TraceIn("awaitExpression", 105);
		AwaitExpressionSyntax value = default(AwaitExpressionSyntax);


		ExpressionSyntax ue = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "awaitExpression");
		DebugLocation(1639, 4);
		try
		{
			// Truss.g:1643:5: ( KW_AWAIT ue= unaryExpression )
			DebugEnterAlt(1);
			// Truss.g:1644:9: KW_AWAIT ue= unaryExpression
			{
			DebugLocation(1644, 9);
			Match(input,KW_AWAIT,Follow._KW_AWAIT_in_awaitExpression11599); if (state.failed) return value;
			DebugLocation(1645, 11);
			PushFollow(Follow._unaryExpression_in_awaitExpression11611);
			ue=unaryExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1646, 9);
			if (state.backtracking == 0)
			{
				 value = new AwaitExpressionSyntax(ue, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("awaitExpression", 105);
			LeaveRule("awaitExpression", 105);
			LeaveRule_awaitExpression();
		}
		DebugLocation(1647, 4);
		} finally { DebugExitRule(GrammarFileName, "awaitExpression"); }
		return value;

	}
	// $ANTLR end "awaitExpression"

	partial void EnterRule_prefixUnaryOperator();
	partial void LeaveRule_prefixUnaryOperator();
	// $ANTLR start "prefixUnaryOperator"
	// Truss.g:1649:1: prefixUnaryOperator returns [PrefixUnaryOperator value] : ( OP_AMPERSAND | OP_EXCLAMATION | OP_MINUS | OP_MINUS_MINUS | OP_PLUS | OP_PLUS_PLUS | OP_TILDE );
	[GrammarRule("prefixUnaryOperator")]
	private PrefixUnaryOperator prefixUnaryOperator()
	{
		EnterRule_prefixUnaryOperator();
		EnterRule("prefixUnaryOperator", 106);
		TraceIn("prefixUnaryOperator", 106);
		PrefixUnaryOperator value = default(PrefixUnaryOperator);


		try { DebugEnterRule(GrammarFileName, "prefixUnaryOperator");
		DebugLocation(1649, 4);
		try
		{
			// Truss.g:1650:5: ( OP_AMPERSAND | OP_EXCLAMATION | OP_MINUS | OP_MINUS_MINUS | OP_PLUS | OP_PLUS_PLUS | OP_TILDE )
			int alt110=7;
			try { DebugEnterDecision(110, false);
			switch (input.LA(1))
			{
			case OP_AMPERSAND:
				{
				alt110 = 1;
				}
				break;
			case OP_EXCLAMATION:
				{
				alt110 = 2;
				}
				break;
			case OP_MINUS:
				{
				alt110 = 3;
				}
				break;
			case OP_MINUS_MINUS:
				{
				alt110 = 4;
				}
				break;
			case OP_PLUS:
				{
				alt110 = 5;
				}
				break;
			case OP_PLUS_PLUS:
				{
				alt110 = 6;
				}
				break;
			case OP_TILDE:
				{
				alt110 = 7;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 110, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(110); }
			switch (alt110)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1650:7: OP_AMPERSAND
				{
				DebugLocation(1650, 7);
				Match(input,OP_AMPERSAND,Follow._OP_AMPERSAND_in_prefixUnaryOperator11642); if (state.failed) return value;
				DebugLocation(1650, 20);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.Ampersand; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1651:7: OP_EXCLAMATION
				{
				DebugLocation(1651, 7);
				Match(input,OP_EXCLAMATION,Follow._OP_EXCLAMATION_in_prefixUnaryOperator11652); if (state.failed) return value;
				DebugLocation(1651, 22);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.Exclamation; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1652:7: OP_MINUS
				{
				DebugLocation(1652, 7);
				Match(input,OP_MINUS,Follow._OP_MINUS_in_prefixUnaryOperator11662); if (state.failed) return value;
				DebugLocation(1652, 16);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.Minus; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:1653:7: OP_MINUS_MINUS
				{
				DebugLocation(1653, 7);
				Match(input,OP_MINUS_MINUS,Follow._OP_MINUS_MINUS_in_prefixUnaryOperator11672); if (state.failed) return value;
				DebugLocation(1653, 22);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.MinusMinus; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:1654:7: OP_PLUS
				{
				DebugLocation(1654, 7);
				Match(input,OP_PLUS,Follow._OP_PLUS_in_prefixUnaryOperator11682); if (state.failed) return value;
				DebugLocation(1654, 15);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.Plus; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:1655:7: OP_PLUS_PLUS
				{
				DebugLocation(1655, 7);
				Match(input,OP_PLUS_PLUS,Follow._OP_PLUS_PLUS_in_prefixUnaryOperator11692); if (state.failed) return value;
				DebugLocation(1655, 20);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.PlusPlus; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:1656:7: OP_TILDE
				{
				DebugLocation(1656, 7);
				Match(input,OP_TILDE,Follow._OP_TILDE_in_prefixUnaryOperator11702); if (state.failed) return value;
				DebugLocation(1656, 16);
				if (state.backtracking == 0)
				{
					 value = PrefixUnaryOperator.Tilde; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("prefixUnaryOperator", 106);
			LeaveRule("prefixUnaryOperator", 106);
			LeaveRule_prefixUnaryOperator();
		}
		DebugLocation(1657, 4);
		} finally { DebugExitRule(GrammarFileName, "prefixUnaryOperator"); }
		return value;

	}
	// $ANTLR end "prefixUnaryOperator"

	partial void EnterRule_postfixUnaryOperator();
	partial void LeaveRule_postfixUnaryOperator();
	// $ANTLR start "postfixUnaryOperator"
	// Truss.g:1659:1: postfixUnaryOperator returns [PostfixUnaryOperator value] : ( OP_MINUS_MINUS | OP_PLUS_PLUS );
	[GrammarRule("postfixUnaryOperator")]
	private PostfixUnaryOperator postfixUnaryOperator()
	{
		EnterRule_postfixUnaryOperator();
		EnterRule("postfixUnaryOperator", 107);
		TraceIn("postfixUnaryOperator", 107);
		PostfixUnaryOperator value = default(PostfixUnaryOperator);


		try { DebugEnterRule(GrammarFileName, "postfixUnaryOperator");
		DebugLocation(1659, 4);
		try
		{
			// Truss.g:1660:5: ( OP_MINUS_MINUS | OP_PLUS_PLUS )
			int alt111=2;
			try { DebugEnterDecision(111, false);
			int LA111_1 = input.LA(1);

			if ((LA111_1==OP_MINUS_MINUS))
			{
				alt111 = 1;
			}
			else if ((LA111_1==OP_PLUS_PLUS))
			{
				alt111 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 111, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(111); }
			switch (alt111)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1660:7: OP_MINUS_MINUS
				{
				DebugLocation(1660, 7);
				Match(input,OP_MINUS_MINUS,Follow._OP_MINUS_MINUS_in_postfixUnaryOperator11725); if (state.failed) return value;
				DebugLocation(1660, 22);
				if (state.backtracking == 0)
				{
					 value = PostfixUnaryOperator.MinusMinus; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1661:7: OP_PLUS_PLUS
				{
				DebugLocation(1661, 7);
				Match(input,OP_PLUS_PLUS,Follow._OP_PLUS_PLUS_in_postfixUnaryOperator11735); if (state.failed) return value;
				DebugLocation(1661, 20);
				if (state.backtracking == 0)
				{
					 value = PostfixUnaryOperator.PlusPlus; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("postfixUnaryOperator", 107);
			LeaveRule("postfixUnaryOperator", 107);
			LeaveRule_postfixUnaryOperator();
		}
		DebugLocation(1662, 4);
		} finally { DebugExitRule(GrammarFileName, "postfixUnaryOperator"); }
		return value;

	}
	// $ANTLR end "postfixUnaryOperator"

	partial void EnterRule_castExpression();
	partial void LeaveRule_castExpression();
	// $ANTLR start "castExpression"
	// Truss.g:1664:1: castExpression returns [ExpressionSyntax value] : OP_PAREN_OPEN ct= castType OP_PAREN_CLOSE ue= unaryExpression ;
	[GrammarRule("castExpression")]
	private ExpressionSyntax castExpression()
	{
		EnterRule_castExpression();
		EnterRule("castExpression", 108);
		TraceIn("castExpression", 108);
		ExpressionSyntax value = default(ExpressionSyntax);


		TypeSyntax ct = default(TypeSyntax);
		ExpressionSyntax ue = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "castExpression");
		DebugLocation(1664, 4);
		try
		{
			// Truss.g:1668:5: ( OP_PAREN_OPEN ct= castType OP_PAREN_CLOSE ue= unaryExpression )
			DebugEnterAlt(1);
			// Truss.g:1669:9: OP_PAREN_OPEN ct= castType OP_PAREN_CLOSE ue= unaryExpression
			{
			DebugLocation(1669, 9);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_castExpression11771); if (state.failed) return value;
			DebugLocation(1669, 25);
			PushFollow(Follow._castType_in_castExpression11775);
			ct=castType();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1669, 35);
			Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_castExpression11777); if (state.failed) return value;
			DebugLocation(1670, 11);
			PushFollow(Follow._unaryExpression_in_castExpression11789);
			ue=unaryExpression();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1671, 9);
			if (state.backtracking == 0)
			{
				 value = new CastExpressionSyntax(ue, ct, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("castExpression", 108);
			LeaveRule("castExpression", 108);
			LeaveRule_castExpression();
		}
		DebugLocation(1672, 4);
		} finally { DebugExitRule(GrammarFileName, "castExpression"); }
		return value;

	}
	// $ANTLR end "castExpression"

	partial void EnterRule_argument();
	partial void LeaveRule_argument();
	// $ANTLR start "argument"
	// Truss.g:1674:1: argument returns [ArgumentSyntax value] : (pm= argumentModifier )* eod= expressionOrDeclaration ;
	[GrammarRule("argument")]
	private ArgumentSyntax argument()
	{
		EnterRule_argument();
		EnterRule("argument", 109);
		TraceIn("argument", 109);
		ArgumentSyntax value = default(ArgumentSyntax);


		ParameterModifier pm = default(ParameterModifier);
		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);
		    var modifiers = new ImmutableArray<ParameterModifier>.Builder();

		try { DebugEnterRule(GrammarFileName, "argument");
		DebugLocation(1674, 4);
		try
		{
			// Truss.g:1679:5: ( (pm= argumentModifier )* eod= expressionOrDeclaration )
			DebugEnterAlt(1);
			// Truss.g:1680:9: (pm= argumentModifier )* eod= expressionOrDeclaration
			{
			DebugLocation(1680, 9);
			// Truss.g:1680:9: (pm= argumentModifier )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=2;
				try { DebugEnterDecision(112, false);
				int LA112_1 = input.LA(1);

				if ((LA112_1==KW_OUT||LA112_1==KW_REF))
				{
					alt112 = 1;
				}


				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1681:13: pm= argumentModifier
					{
					DebugLocation(1681, 15);
					PushFollow(Follow._argumentModifier_in_argument11849);
					pm=argumentModifier();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1682, 13);
					if (state.backtracking == 0)
					{
						 modifiers.Add(pm); 
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }

			DebugLocation(1684, 12);
			PushFollow(Follow._expressionOrDeclaration_in_argument11886);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1685, 9);
			if (state.backtracking == 0)
			{
				 value = new ArgumentSyntax(modifiers.Build(), eod, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argument", 109);
			LeaveRule("argument", 109);
			LeaveRule_argument();
		}
		DebugLocation(1686, 4);
		} finally { DebugExitRule(GrammarFileName, "argument"); }
		return value;

	}
	// $ANTLR end "argument"

	partial void EnterRule_primaryExpression();
	partial void LeaveRule_primaryExpression();
	// $ANTLR start "primaryExpression"
	// Truss.g:1688:1: primaryExpression returns [ExpressionSyntax value] : ( KW_THIS | KW_BASE |e2= literal | OP_PAREN_OPEN e4= expressionOrDeclaration OP_PAREN_CLOSE | KW_TYPEOF OP_PAREN_OPEN e5= typeSyntax OP_PAREN_CLOSE | KW_SIZEOF OP_PAREN_OPEN e6= typeSyntax OP_PAREN_CLOSE | KW_DEFAULT OP_PAREN_OPEN e7= typeSyntax OP_PAREN_CLOSE |e12= identifierName |e13= primaryNewExpression );
	[GrammarRule("primaryExpression")]
	private ExpressionSyntax primaryExpression()
	{
		EnterRule_primaryExpression();
		EnterRule("primaryExpression", 110);
		TraceIn("primaryExpression", 110);
		ExpressionSyntax value = default(ExpressionSyntax);


		LiteralExpressionSyntax e2 = default(LiteralExpressionSyntax);
		ExpressionSyntax e4 = default(ExpressionSyntax);
		TypeSyntax e5 = default(TypeSyntax);
		TypeSyntax e6 = default(TypeSyntax);
		TypeSyntax e7 = default(TypeSyntax);
		IdentifierNameSyntax e12 = default(IdentifierNameSyntax);
		ExpressionSyntax e13 = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "primaryExpression");
		DebugLocation(1688, 4);
		try
		{
			// Truss.g:1692:5: ( KW_THIS | KW_BASE |e2= literal | OP_PAREN_OPEN e4= expressionOrDeclaration OP_PAREN_CLOSE | KW_TYPEOF OP_PAREN_OPEN e5= typeSyntax OP_PAREN_CLOSE | KW_SIZEOF OP_PAREN_OPEN e6= typeSyntax OP_PAREN_CLOSE | KW_DEFAULT OP_PAREN_OPEN e7= typeSyntax OP_PAREN_CLOSE |e12= identifierName |e13= primaryNewExpression )
			int alt113=9;
			try { DebugEnterDecision(113, false);
			switch (input.LA(1))
			{
			case KW_THIS:
				{
				alt113 = 1;
				}
				break;
			case KW_BASE:
				{
				alt113 = 2;
				}
				break;
			case CHAR:
			case FLOAT:
			case HEX_INTEGER:
			case INTEGER:
			case KW_FALSE:
			case KW_NIL:
			case KW_TRUE:
			case STRING:
				{
				alt113 = 3;
				}
				break;
			case OP_PAREN_OPEN:
				{
				alt113 = 4;
				}
				break;
			case KW_TYPEOF:
				{
				alt113 = 5;
				}
				break;
			case KW_SIZEOF:
				{
				alt113 = 6;
				}
				break;
			case KW_DEFAULT:
				{
				alt113 = 7;
				}
				break;
			case IDENTIFIER:
				{
				alt113 = 8;
				}
				break;
			case KW_NEW:
				{
				alt113 = 9;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 113, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(113); }
			switch (alt113)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1692:7: KW_THIS
				{
				DebugLocation(1692, 7);
				Match(input,KW_THIS,Follow._KW_THIS_in_primaryExpression11922); if (state.failed) return value;
				DebugLocation(1692, 15);
				if (state.backtracking == 0)
				{
					 value = new InstanceExpressionSyntax(ThisOrBase.This, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1693:7: KW_BASE
				{
				DebugLocation(1693, 7);
				Match(input,KW_BASE,Follow._KW_BASE_in_primaryExpression11932); if (state.failed) return value;
				DebugLocation(1693, 15);
				if (state.backtracking == 0)
				{
					 value = new InstanceExpressionSyntax(ThisOrBase.Base, Span(start)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1694:7: e2= literal
				{
				DebugLocation(1694, 9);
				PushFollow(Follow._literal_in_primaryExpression11944);
				e2=literal();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1694, 18);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:1695:7: OP_PAREN_OPEN e4= expressionOrDeclaration OP_PAREN_CLOSE
				{
				DebugLocation(1695, 7);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_primaryExpression11954); if (state.failed) return value;
				DebugLocation(1695, 23);
				PushFollow(Follow._expressionOrDeclaration_in_primaryExpression11958);
				e4=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1695, 48);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_primaryExpression11960); if (state.failed) return value;
				DebugLocation(1695, 63);
				if (state.backtracking == 0)
				{
					 value = new ParenthesizedExpressionSyntax(e4, Span(start)); 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:1696:7: KW_TYPEOF OP_PAREN_OPEN e5= typeSyntax OP_PAREN_CLOSE
				{
				DebugLocation(1696, 7);
				Match(input,KW_TYPEOF,Follow._KW_TYPEOF_in_primaryExpression11970); if (state.failed) return value;
				DebugLocation(1696, 17);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_primaryExpression11972); if (state.failed) return value;
				DebugLocation(1696, 33);
				PushFollow(Follow._typeSyntax_in_primaryExpression11976);
				e5=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1696, 45);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_primaryExpression11978); if (state.failed) return value;
				DebugLocation(1696, 60);
				if (state.backtracking == 0)
				{
					 value = new TypeOfExpressionSyntax(e5, Span(start)); 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:1697:7: KW_SIZEOF OP_PAREN_OPEN e6= typeSyntax OP_PAREN_CLOSE
				{
				DebugLocation(1697, 7);
				Match(input,KW_SIZEOF,Follow._KW_SIZEOF_in_primaryExpression11988); if (state.failed) return value;
				DebugLocation(1697, 17);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_primaryExpression11990); if (state.failed) return value;
				DebugLocation(1697, 33);
				PushFollow(Follow._typeSyntax_in_primaryExpression11994);
				e6=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1697, 45);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_primaryExpression11996); if (state.failed) return value;
				DebugLocation(1697, 60);
				if (state.backtracking == 0)
				{
					 value = new SizeOfExpressionSyntax(e6, Span(start)); 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:1698:7: KW_DEFAULT OP_PAREN_OPEN e7= typeSyntax OP_PAREN_CLOSE
				{
				DebugLocation(1698, 7);
				Match(input,KW_DEFAULT,Follow._KW_DEFAULT_in_primaryExpression12006); if (state.failed) return value;
				DebugLocation(1698, 18);
				Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_primaryExpression12008); if (state.failed) return value;
				DebugLocation(1698, 34);
				PushFollow(Follow._typeSyntax_in_primaryExpression12012);
				e7=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1698, 46);
				Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_primaryExpression12014); if (state.failed) return value;
				DebugLocation(1698, 61);
				if (state.backtracking == 0)
				{
					 value = new DefaultExpressionSyntax(e7, Span(start)); 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:1699:7: e12= identifierName
				{
				DebugLocation(1699, 10);
				PushFollow(Follow._identifierName_in_primaryExpression12026);
				e12=identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1699, 26);
				if (state.backtracking == 0)
				{
					 value = e12; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:1700:7: e13= primaryNewExpression
				{
				DebugLocation(1700, 10);
				PushFollow(Follow._primaryNewExpression_in_primaryExpression12038);
				e13=primaryNewExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1700, 32);
				if (state.backtracking == 0)
				{
					 value = e13; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryExpression", 110);
			LeaveRule("primaryExpression", 110);
			LeaveRule_primaryExpression();
		}
		DebugLocation(1701, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryExpression"); }
		return value;

	}
	// $ANTLR end "primaryExpression"

	protected sealed partial class primaryNewExpression_scope
	{
		public IToken start;
		public TypeSyntax type;

		public primaryNewExpression_scope(TrussParser grammar) { OnCreated(grammar); }
		partial void OnCreated(TrussParser grammar);
	}
	partial void primaryNewExpression_scopeInit( primaryNewExpression_scope scope );
	partial void primaryNewExpression_scopeAfter( primaryNewExpression_scope scope );
	protected readonly ListStack<primaryNewExpression_scope> primaryNewExpression_stack = new ListStack<primaryNewExpression_scope>();

	partial void EnterRule_primaryNewExpression();
	partial void LeaveRule_primaryNewExpression();
	// $ANTLR start "primaryNewExpression"
	// Truss.g:1703:1: primaryNewExpression returns [ExpressionSyntax value] : KW_NEW (t= typeSyntax (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression ) |aoi= anonymousObjectInitializer |rs= rankSpecifier ai= arrayInitializer ) ;
	[GrammarRule("primaryNewExpression")]
	private ExpressionSyntax primaryNewExpression()
	{
		EnterRule_primaryNewExpression();
		EnterRule("primaryNewExpression", 111);
		TraceIn("primaryNewExpression", 111);
		primaryNewExpression_stack.Push(new primaryNewExpression_scope(this));primaryNewExpression_scopeInit(primaryNewExpression_stack.Peek());
		ExpressionSyntax value = default(ExpressionSyntax);


		TypeSyntax t = default(TypeSyntax);
		ExpressionSyntax oce = default(ExpressionSyntax);
		InitializerExpressionSyntax ooci = default(InitializerExpressionSyntax);
		ExpressionSyntax ace = default(ExpressionSyntax);
		AnonymousObjectCreationExpressionSyntax aoi = default(AnonymousObjectCreationExpressionSyntax);
		ArrayRankSpecifierSyntax rs = default(ArrayRankSpecifierSyntax);
		InitializerExpressionSyntax ai = default(InitializerExpressionSyntax);


		    var start = input.LT(1);
		    primaryNewExpression_stack.Peek().start =  start;

		try { DebugEnterRule(GrammarFileName, "primaryNewExpression");
		DebugLocation(1703, 4);
		try
		{
			// Truss.g:1712:5: ( KW_NEW (t= typeSyntax (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression ) |aoi= anonymousObjectInitializer |rs= rankSpecifier ai= arrayInitializer ) )
			DebugEnterAlt(1);
			// Truss.g:1713:9: KW_NEW (t= typeSyntax (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression ) |aoi= anonymousObjectInitializer |rs= rankSpecifier ai= arrayInitializer )
			{
			DebugLocation(1713, 9);
			Match(input,KW_NEW,Follow._KW_NEW_in_primaryNewExpression12078); if (state.failed) return value;
			DebugLocation(1714, 9);
			// Truss.g:1714:9: (t= typeSyntax (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression ) |aoi= anonymousObjectInitializer |rs= rankSpecifier ai= arrayInitializer )
			int alt115=3;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			switch (input.LA(1))
			{
			case IDENTIFIER:
			case KW_BOOL:
			case KW_BYTE:
			case KW_CHAR:
			case KW_DECIMAL:
			case KW_DOUBLE:
			case KW_FLOAT:
			case KW_INT:
			case KW_LONG:
			case KW_OBJECT:
			case KW_SBYTE:
			case KW_SHORT:
			case KW_STRING:
			case KW_UINT:
			case KW_ULONG:
			case KW_USHORT:
			case KW_VAR:
			case KW_VOID:
				{
				alt115 = 1;
				}
				break;
			case OP_BRACE_OPEN:
				{
				alt115 = 2;
				}
				break;
			case OP_BRACKET_OPEN:
				{
				alt115 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 115, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1715:13: t= typeSyntax (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression )
				{
				DebugLocation(1715, 14);
				PushFollow(Follow._typeSyntax_in_primaryNewExpression12104);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1716, 13);
				if (state.backtracking == 0)
				{
					 primaryNewExpression_stack.Peek().type =  t; 
				}
				DebugLocation(1717, 13);
				// Truss.g:1717:13: (oce= objectCreationExpression |ooci= objectOrCollectionInitializer |ace= arrayCreationExpression )
				int alt114=3;
				try { DebugEnterSubRule(114);
				try { DebugEnterDecision(114, false);
				switch (input.LA(1))
				{
				case OP_PAREN_OPEN:
					{
					alt114 = 1;
					}
					break;
				case OP_BRACE_OPEN:
					{
					alt114 = 2;
					}
					break;
				case OP_BRACKET_OPEN:
					{
					alt114 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 114, 0, input, 1);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(114); }
				switch (alt114)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1718:17: oce= objectCreationExpression
					{
					DebugLocation(1718, 20);
					PushFollow(Follow._objectCreationExpression_in_primaryNewExpression12152);
					oce=objectCreationExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1719, 17);
					if (state.backtracking == 0)
					{
						 value = oce; 
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// Truss.g:1721:17: ooci= objectOrCollectionInitializer
					{
					DebugLocation(1721, 21);
					PushFollow(Follow._objectOrCollectionInitializer_in_primaryNewExpression12204);
					ooci=objectOrCollectionInitializer();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1722, 17);
					if (state.backtracking == 0)
					{

						                    if (t is ArrayTypeSyntax) {
						                        value = new ArrayCreationExpressionSyntax(
						                            (ArrayTypeSyntax)t,
						                            ooci,
						                            Span(start)
						                        );
						                    } else {
						                        value = new ObjectCreationExpressionSyntax(
						                            t,
						                            null,
						                            ooci,
						                            Span(start)
						                        );
						                    }
						                
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// Truss.g:1739:17: ace= arrayCreationExpression
					{
					DebugLocation(1739, 20);
					PushFollow(Follow._arrayCreationExpression_in_primaryNewExpression12256);
					ace=arrayCreationExpression();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1740, 17);
					if (state.backtracking == 0)
					{
						 value = ace; 
					}

					}
					break;

				}
				} finally { DebugExitSubRule(114); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1743:13: aoi= anonymousObjectInitializer
				{
				DebugLocation(1743, 16);
				PushFollow(Follow._anonymousObjectInitializer_in_primaryNewExpression12314);
				aoi=anonymousObjectInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1744, 13);
				if (state.backtracking == 0)
				{
					 value = aoi; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1746:13: rs= rankSpecifier ai= arrayInitializer
				{
				DebugLocation(1746, 15);
				PushFollow(Follow._rankSpecifier_in_primaryNewExpression12354);
				rs=rankSpecifier();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1747, 15);
				PushFollow(Follow._arrayInitializer_in_primaryNewExpression12370);
				ai=arrayInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1748, 13);
				if (state.backtracking == 0)
				{

					                value = new ImplicitArrayCreationExpressionSyntax(
					                    ImmutableArray<ArrayRankSpecifierSyntax>.Create(rs),
					                    ai,
					                    Span(start)
					                );
					            
				}

				}
				break;

			}
			} finally { DebugExitSubRule(115); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("primaryNewExpression", 111);
			LeaveRule("primaryNewExpression", 111);
			LeaveRule_primaryNewExpression();
			primaryNewExpression_scopeAfter(primaryNewExpression_stack.Peek());primaryNewExpression_stack.Pop();
		}
		DebugLocation(1756, 4);
		} finally { DebugExitRule(GrammarFileName, "primaryNewExpression"); }
		return value;

	}
	// $ANTLR end "primaryNewExpression"

	partial void EnterRule_arrayCreationExpression();
	partial void LeaveRule_arrayCreationExpression();
	// $ANTLR start "arrayCreationExpression"
	// Truss.g:1758:1: arrayCreationExpression returns [ExpressionSyntax value] : obo= OP_BRACKET_OPEN eod= expressionOrDeclaration OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )? (rsl= rankSpecifierList )? ( ( OP_BRACE_OPEN )=>ai= arrayInitializer )? ;
	[GrammarRule("arrayCreationExpression")]
	private ExpressionSyntax arrayCreationExpression()
	{
		EnterRule_arrayCreationExpression();
		EnterRule("arrayCreationExpression", 112);
		TraceIn("arrayCreationExpression", 112);
		ExpressionSyntax value = default(ExpressionSyntax);


		IToken obo = default(IToken);
		ExpressionSyntax eod = default(ExpressionSyntax);
		ImmutableArray<ArrayRankSpecifierSyntax> rsl = default(ImmutableArray<ArrayRankSpecifierSyntax>);
		InitializerExpressionSyntax ai = default(InitializerExpressionSyntax);


		    var builder = new ImmutableArray<ArrayRankSpecifierSyntax>.Builder();
		    bool isTracked = false;

		try { DebugEnterRule(GrammarFileName, "arrayCreationExpression");
		DebugLocation(1758, 4);
		try
		{
			// Truss.g:1763:5: (obo= OP_BRACKET_OPEN eod= expressionOrDeclaration OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )? (rsl= rankSpecifierList )? ( ( OP_BRACE_OPEN )=>ai= arrayInitializer )? )
			DebugEnterAlt(1);
			// Truss.g:1764:9: obo= OP_BRACKET_OPEN eod= expressionOrDeclaration OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )? (rsl= rankSpecifierList )? ( ( OP_BRACE_OPEN )=>ai= arrayInitializer )?
			{
			DebugLocation(1764, 12);
			obo=(IToken)Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_arrayCreationExpression12430); if (state.failed) return value;
			DebugLocation(1765, 12);
			PushFollow(Follow._expressionOrDeclaration_in_arrayCreationExpression12442);
			eod=expressionOrDeclaration();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1766, 9);
			Match(input,OP_BRACKET_CLOSE,Follow._OP_BRACKET_CLOSE_in_arrayCreationExpression12452); if (state.failed) return value;
			DebugLocation(1767, 9);
			// Truss.g:1767:9: ( ( OP_CARET )=> OP_CARET )?
			int alt116=2;
			try { DebugEnterSubRule(116);
			try { DebugEnterDecision(116, false);
			int LA116_1 = input.LA(1);

			if ((LA116_1==OP_CARET))
			{
				int LA116_2 = input.LA(2);

				if ((EvaluatePredicate(synpred13_Truss_fragment)))
				{
					alt116 = 1;
				}
			}
			} finally { DebugExitDecision(116); }
			switch (alt116)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1768:13: ( OP_CARET )=> OP_CARET
				{
				DebugLocation(1769, 13);
				Match(input,OP_CARET,Follow._OP_CARET_in_arrayCreationExpression12495); if (state.failed) return value;
				DebugLocation(1770, 13);
				if (state.backtracking == 0)
				{
					 isTracked = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(116); }

			DebugLocation(1772, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(new ArrayRankSpecifierSyntax(eod, isTracked, Span(obo))); 
			}
			DebugLocation(1773, 9);
			// Truss.g:1773:9: (rsl= rankSpecifierList )?
			int alt117=2;
			try { DebugEnterSubRule(117);
			try { DebugEnterDecision(117, false);
			int LA117_1 = input.LA(1);

			if ((LA117_1==OP_BRACKET_OPEN))
			{
				int LA117_2 = input.LA(2);

				if ((LA117_2==OP_BRACKET_CLOSE))
				{
					alt117 = 1;
				}
			}
			} finally { DebugExitDecision(117); }
			switch (alt117)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1774:13: rsl= rankSpecifierList
				{
				DebugLocation(1774, 16);
				PushFollow(Follow._rankSpecifierList_in_arrayCreationExpression12556);
				rsl=rankSpecifierList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1775, 13);
				if (state.backtracking == 0)
				{
					 builder.AddRange(rsl); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(117); }

			DebugLocation(1777, 9);
			// Truss.g:1777:9: ( ( OP_BRACE_OPEN )=>ai= arrayInitializer )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_1 = input.LA(1);

			if ((LA118_1==OP_BRACE_OPEN))
			{
				int LA118_2 = input.LA(2);

				if ((EvaluatePredicate(synpred14_Truss_fragment)))
				{
					alt118 = 1;
				}
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1778:13: ( OP_BRACE_OPEN )=>ai= arrayInitializer
				{
				DebugLocation(1779, 15);
				PushFollow(Follow._arrayInitializer_in_arrayCreationExpression12626);
				ai=arrayInitializer();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(118); }

			DebugLocation(1781, 9);
			if (state.backtracking == 0)
			{

				            value = new ArrayCreationExpressionSyntax(
				                new ArrayTypeSyntax(
				                    primaryNewExpression_stack.Peek().type,
				                    builder.Build(),
				                    Span(primaryNewExpression_stack.Peek().start)
				                ),
				                ai,
				                Span(primaryNewExpression_stack.Peek().start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayCreationExpression", 112);
			LeaveRule("arrayCreationExpression", 112);
			LeaveRule_arrayCreationExpression();
		}
		DebugLocation(1792, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayCreationExpression"); }
		return value;

	}
	// $ANTLR end "arrayCreationExpression"

	partial void EnterRule_objectCreationExpression();
	partial void LeaveRule_objectCreationExpression();
	// $ANTLR start "objectCreationExpression"
	// Truss.g:1794:1: objectCreationExpression returns [ExpressionSyntax value] : al= argumentList ( ( OP_BRACE_OPEN )=>ooci= objectOrCollectionInitializer )? ;
	[GrammarRule("objectCreationExpression")]
	private ExpressionSyntax objectCreationExpression()
	{
		EnterRule_objectCreationExpression();
		EnterRule("objectCreationExpression", 113);
		TraceIn("objectCreationExpression", 113);
		ExpressionSyntax value = default(ExpressionSyntax);


		ImmutableArray<ArgumentSyntax> al = default(ImmutableArray<ArgumentSyntax>);
		InitializerExpressionSyntax ooci = default(InitializerExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "objectCreationExpression");
		DebugLocation(1794, 4);
		try
		{
			// Truss.g:1795:5: (al= argumentList ( ( OP_BRACE_OPEN )=>ooci= objectOrCollectionInitializer )? )
			DebugEnterAlt(1);
			// Truss.g:1796:9: al= argumentList ( ( OP_BRACE_OPEN )=>ooci= objectOrCollectionInitializer )?
			{
			DebugLocation(1796, 11);
			PushFollow(Follow._argumentList_in_objectCreationExpression12678);
			al=argumentList();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1797, 9);
			// Truss.g:1797:9: ( ( OP_BRACE_OPEN )=>ooci= objectOrCollectionInitializer )?
			int alt119=2;
			try { DebugEnterSubRule(119);
			try { DebugEnterDecision(119, false);
			int LA119_1 = input.LA(1);

			if ((LA119_1==OP_BRACE_OPEN))
			{
				int LA119_2 = input.LA(2);

				if ((EvaluatePredicate(synpred15_Truss_fragment)))
				{
					alt119 = 1;
				}
			}
			} finally { DebugExitDecision(119); }
			switch (alt119)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1798:13: ( OP_BRACE_OPEN )=>ooci= objectOrCollectionInitializer
				{
				DebugLocation(1799, 17);
				PushFollow(Follow._objectOrCollectionInitializer_in_objectCreationExpression12723);
				ooci=objectOrCollectionInitializer();
				PopFollow();
				if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(119); }

			DebugLocation(1801, 9);
			if (state.backtracking == 0)
			{

				            value = new ObjectCreationExpressionSyntax(
				                primaryNewExpression_stack.Peek().type,
				                al,
				                ooci,
				                Span(primaryNewExpression_stack.Peek().start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectCreationExpression", 113);
			LeaveRule("objectCreationExpression", 113);
			LeaveRule_objectCreationExpression();
		}
		DebugLocation(1809, 4);
		} finally { DebugExitRule(GrammarFileName, "objectCreationExpression"); }
		return value;

	}
	// $ANTLR end "objectCreationExpression"

	partial void EnterRule_arrayInitializer();
	partial void LeaveRule_arrayInitializer();
	// $ANTLR start "arrayInitializer"
	// Truss.g:1811:1: arrayInitializer returns [InitializerExpressionSyntax value] : OP_BRACE_OPEN (vi= variableInitializer ( OP_COMMA vi= variableInitializer )* ( OP_COMMA )? )? OP_BRACE_CLOSE ;
	[GrammarRule("arrayInitializer")]
	private InitializerExpressionSyntax arrayInitializer()
	{
		EnterRule_arrayInitializer();
		EnterRule("arrayInitializer", 114);
		TraceIn("arrayInitializer", 114);
		InitializerExpressionSyntax value = default(InitializerExpressionSyntax);


		ExpressionSyntax vi = default(ExpressionSyntax);


		    var start = input.LT(1);
		    var builder = new ImmutableArray<ExpressionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "arrayInitializer");
		DebugLocation(1811, 4);
		try
		{
			// Truss.g:1816:5: ( OP_BRACE_OPEN (vi= variableInitializer ( OP_COMMA vi= variableInitializer )* ( OP_COMMA )? )? OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:1817:9: OP_BRACE_OPEN (vi= variableInitializer ( OP_COMMA vi= variableInitializer )* ( OP_COMMA )? )? OP_BRACE_CLOSE
			{
			DebugLocation(1817, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_arrayInitializer12778); if (state.failed) return value;
			DebugLocation(1818, 9);
			// Truss.g:1818:9: (vi= variableInitializer ( OP_COMMA vi= variableInitializer )* ( OP_COMMA )? )?
			int alt122=2;
			try { DebugEnterSubRule(122);
			try { DebugEnterDecision(122, false);
			int LA122_1 = input.LA(1);

			if ((LA122_1==CHAR||LA122_1==FLOAT||(LA122_1>=HEX_INTEGER && LA122_1<=IDENTIFIER)||LA122_1==INTEGER||(LA122_1>=KW_ASYNC && LA122_1<=KW_BOOL)||LA122_1==KW_BYTE||LA122_1==KW_CHAR||(LA122_1>=KW_DECIMAL && LA122_1<=KW_DEFAULT)||LA122_1==KW_DOUBLE||LA122_1==KW_FALSE||LA122_1==KW_FLOAT||LA122_1==KW_INT||LA122_1==KW_LONG||(LA122_1>=KW_NEW && LA122_1<=KW_OBJECT)||LA122_1==KW_SBYTE||(LA122_1>=KW_SHORT && LA122_1<=KW_SIZEOF)||LA122_1==KW_STRING||LA122_1==KW_THIS||LA122_1==KW_TRUE||(LA122_1>=KW_TYPEOF && LA122_1<=KW_USHORT)||LA122_1==KW_VAR||LA122_1==KW_VOID||LA122_1==OP_AMPERSAND||LA122_1==OP_BRACE_OPEN||LA122_1==OP_EXCLAMATION||LA122_1==OP_MINUS||LA122_1==OP_MINUS_MINUS||LA122_1==OP_PAREN_OPEN||LA122_1==OP_PLUS||LA122_1==OP_PLUS_PLUS||(LA122_1>=OP_TILDE && LA122_1<=STRING)))
			{
				alt122 = 1;
			}
			} finally { DebugExitDecision(122); }
			switch (alt122)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1819:13: vi= variableInitializer ( OP_COMMA vi= variableInitializer )* ( OP_COMMA )?
				{
				DebugLocation(1819, 15);
				PushFollow(Follow._variableInitializer_in_arrayInitializer12804);
				vi=variableInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1820, 13);
				if (state.backtracking == 0)
				{
					 builder.Add(vi); 
				}
				DebugLocation(1821, 13);
				// Truss.g:1821:13: ( OP_COMMA vi= variableInitializer )*
				try { DebugEnterSubRule(120);
				while (true)
				{
					int alt120=2;
					try { DebugEnterDecision(120, false);
					int LA120_1 = input.LA(1);

					if ((LA120_1==OP_COMMA))
					{
						int LA120_2 = input.LA(2);

						if ((LA120_2==CHAR||LA120_2==FLOAT||(LA120_2>=HEX_INTEGER && LA120_2<=IDENTIFIER)||LA120_2==INTEGER||(LA120_2>=KW_ASYNC && LA120_2<=KW_BOOL)||LA120_2==KW_BYTE||LA120_2==KW_CHAR||(LA120_2>=KW_DECIMAL && LA120_2<=KW_DEFAULT)||LA120_2==KW_DOUBLE||LA120_2==KW_FALSE||LA120_2==KW_FLOAT||LA120_2==KW_INT||LA120_2==KW_LONG||(LA120_2>=KW_NEW && LA120_2<=KW_OBJECT)||LA120_2==KW_SBYTE||(LA120_2>=KW_SHORT && LA120_2<=KW_SIZEOF)||LA120_2==KW_STRING||LA120_2==KW_THIS||LA120_2==KW_TRUE||(LA120_2>=KW_TYPEOF && LA120_2<=KW_USHORT)||LA120_2==KW_VAR||LA120_2==KW_VOID||LA120_2==OP_AMPERSAND||LA120_2==OP_BRACE_OPEN||LA120_2==OP_EXCLAMATION||LA120_2==OP_MINUS||LA120_2==OP_MINUS_MINUS||LA120_2==OP_PAREN_OPEN||LA120_2==OP_PLUS||LA120_2==OP_PLUS_PLUS||(LA120_2>=OP_TILDE && LA120_2<=STRING)))
						{
							alt120 = 1;
						}


					}


					} finally { DebugExitDecision(120); }
					switch ( alt120 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:1822:17: OP_COMMA vi= variableInitializer
						{
						DebugLocation(1822, 17);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_arrayInitializer12850); if (state.failed) return value;
						DebugLocation(1823, 19);
						PushFollow(Follow._variableInitializer_in_arrayInitializer12870);
						vi=variableInitializer();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1824, 17);
						if (state.backtracking == 0)
						{
							 builder.Add(vi); 
						}

						}
						break;

					default:
						goto loop120;
					}
				}

				loop120:
					;

				} finally { DebugExitSubRule(120); }

				DebugLocation(1826, 13);
				// Truss.g:1826:13: ( OP_COMMA )?
				int alt121=2;
				try { DebugEnterSubRule(121);
				try { DebugEnterDecision(121, false);
				int LA121_1 = input.LA(1);

				if ((LA121_1==OP_COMMA))
				{
					alt121 = 1;
				}
				} finally { DebugExitDecision(121); }
				switch (alt121)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1826:13: OP_COMMA
					{
					DebugLocation(1826, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_arrayInitializer12917); if (state.failed) return value;

					}
					break;

				}
				} finally { DebugExitSubRule(121); }


				}
				break;

			}
			} finally { DebugExitSubRule(122); }

			DebugLocation(1828, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_arrayInitializer12939); if (state.failed) return value;
			DebugLocation(1829, 9);
			if (state.backtracking == 0)
			{

				            value = new InitializerExpressionSyntax(
				                builder.Build(),
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("arrayInitializer", 114);
			LeaveRule("arrayInitializer", 114);
			LeaveRule_arrayInitializer();
		}
		DebugLocation(1835, 4);
		} finally { DebugExitRule(GrammarFileName, "arrayInitializer"); }
		return value;

	}
	// $ANTLR end "arrayInitializer"

	partial void EnterRule_variableInitializer();
	partial void LeaveRule_variableInitializer();
	// $ANTLR start "variableInitializer"
	// Truss.g:1837:1: variableInitializer returns [ExpressionSyntax value] : (e1= expressionOrDeclaration |e2= arrayInitializer );
	[GrammarRule("variableInitializer")]
	private ExpressionSyntax variableInitializer()
	{
		EnterRule_variableInitializer();
		EnterRule("variableInitializer", 115);
		TraceIn("variableInitializer", 115);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax e1 = default(ExpressionSyntax);
		InitializerExpressionSyntax e2 = default(InitializerExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "variableInitializer");
		DebugLocation(1837, 4);
		try
		{
			// Truss.g:1838:5: (e1= expressionOrDeclaration |e2= arrayInitializer )
			int alt123=2;
			try { DebugEnterDecision(123, false);
			int LA123_1 = input.LA(1);

			if ((LA123_1==CHAR||LA123_1==FLOAT||(LA123_1>=HEX_INTEGER && LA123_1<=IDENTIFIER)||LA123_1==INTEGER||(LA123_1>=KW_ASYNC && LA123_1<=KW_BOOL)||LA123_1==KW_BYTE||LA123_1==KW_CHAR||(LA123_1>=KW_DECIMAL && LA123_1<=KW_DEFAULT)||LA123_1==KW_DOUBLE||LA123_1==KW_FALSE||LA123_1==KW_FLOAT||LA123_1==KW_INT||LA123_1==KW_LONG||(LA123_1>=KW_NEW && LA123_1<=KW_OBJECT)||LA123_1==KW_SBYTE||(LA123_1>=KW_SHORT && LA123_1<=KW_SIZEOF)||LA123_1==KW_STRING||LA123_1==KW_THIS||LA123_1==KW_TRUE||(LA123_1>=KW_TYPEOF && LA123_1<=KW_USHORT)||LA123_1==KW_VAR||LA123_1==KW_VOID||LA123_1==OP_AMPERSAND||LA123_1==OP_EXCLAMATION||LA123_1==OP_MINUS||LA123_1==OP_MINUS_MINUS||LA123_1==OP_PAREN_OPEN||LA123_1==OP_PLUS||LA123_1==OP_PLUS_PLUS||(LA123_1>=OP_TILDE && LA123_1<=STRING)))
			{
				alt123 = 1;
			}
			else if ((LA123_1==OP_BRACE_OPEN))
			{
				alt123 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 123, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1838:7: e1= expressionOrDeclaration
				{
				DebugLocation(1838, 9);
				PushFollow(Follow._expressionOrDeclaration_in_variableInitializer12972);
				e1=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1838, 34);
				if (state.backtracking == 0)
				{
					 value = e1; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1839:7: e2= arrayInitializer
				{
				DebugLocation(1839, 9);
				PushFollow(Follow._arrayInitializer_in_variableInitializer12984);
				e2=arrayInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1839, 27);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableInitializer", 115);
			LeaveRule("variableInitializer", 115);
			LeaveRule_variableInitializer();
		}
		DebugLocation(1840, 4);
		} finally { DebugExitRule(GrammarFileName, "variableInitializer"); }
		return value;

	}
	// $ANTLR end "variableInitializer"

	partial void EnterRule_anonymousObjectInitializer();
	partial void LeaveRule_anonymousObjectInitializer();
	// $ANTLR start "anonymousObjectInitializer"
	// Truss.g:1842:1: anonymousObjectInitializer returns [AnonymousObjectCreationExpressionSyntax value] : OP_BRACE_OPEN (md= memberDeclarator ( OP_COMMA md= memberDeclarator )* ( OP_COMMA )? )? OP_BRACE_CLOSE ;
	[GrammarRule("anonymousObjectInitializer")]
	private AnonymousObjectCreationExpressionSyntax anonymousObjectInitializer()
	{
		EnterRule_anonymousObjectInitializer();
		EnterRule("anonymousObjectInitializer", 116);
		TraceIn("anonymousObjectInitializer", 116);
		AnonymousObjectCreationExpressionSyntax value = default(AnonymousObjectCreationExpressionSyntax);


		AnonymousObjectMemberDeclaratorSyntax md = default(AnonymousObjectMemberDeclaratorSyntax);


		    var builder = new ImmutableArray<AnonymousObjectMemberDeclaratorSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "anonymousObjectInitializer");
		DebugLocation(1842, 4);
		try
		{
			// Truss.g:1846:5: ( OP_BRACE_OPEN (md= memberDeclarator ( OP_COMMA md= memberDeclarator )* ( OP_COMMA )? )? OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:1847:9: OP_BRACE_OPEN (md= memberDeclarator ( OP_COMMA md= memberDeclarator )* ( OP_COMMA )? )? OP_BRACE_CLOSE
			{
			DebugLocation(1847, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_anonymousObjectInitializer13020); if (state.failed) return value;
			DebugLocation(1848, 9);
			// Truss.g:1848:9: (md= memberDeclarator ( OP_COMMA md= memberDeclarator )* ( OP_COMMA )? )?
			int alt126=2;
			try { DebugEnterSubRule(126);
			try { DebugEnterDecision(126, false);
			int LA126_1 = input.LA(1);

			if ((LA126_1==CHAR||LA126_1==FLOAT||(LA126_1>=HEX_INTEGER && LA126_1<=IDENTIFIER)||LA126_1==INTEGER||LA126_1==KW_BASE||LA126_1==KW_DEFAULT||LA126_1==KW_FALSE||(LA126_1>=KW_NEW && LA126_1<=KW_NIL)||LA126_1==KW_SIZEOF||LA126_1==KW_THIS||LA126_1==KW_TRUE||LA126_1==KW_TYPEOF||LA126_1==OP_PAREN_OPEN||LA126_1==STRING))
			{
				alt126 = 1;
			}
			} finally { DebugExitDecision(126); }
			switch (alt126)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1849:13: md= memberDeclarator ( OP_COMMA md= memberDeclarator )* ( OP_COMMA )?
				{
				DebugLocation(1849, 15);
				PushFollow(Follow._memberDeclarator_in_anonymousObjectInitializer13046);
				md=memberDeclarator();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1850, 13);
				if (state.backtracking == 0)
				{
					 builder.Add(md); 
				}
				DebugLocation(1851, 13);
				// Truss.g:1851:13: ( OP_COMMA md= memberDeclarator )*
				try { DebugEnterSubRule(124);
				while (true)
				{
					int alt124=2;
					try { DebugEnterDecision(124, false);
					int LA124_1 = input.LA(1);

					if ((LA124_1==OP_COMMA))
					{
						int LA124_2 = input.LA(2);

						if ((LA124_2==CHAR||LA124_2==FLOAT||(LA124_2>=HEX_INTEGER && LA124_2<=IDENTIFIER)||LA124_2==INTEGER||LA124_2==KW_BASE||LA124_2==KW_DEFAULT||LA124_2==KW_FALSE||(LA124_2>=KW_NEW && LA124_2<=KW_NIL)||LA124_2==KW_SIZEOF||LA124_2==KW_THIS||LA124_2==KW_TRUE||LA124_2==KW_TYPEOF||LA124_2==OP_PAREN_OPEN||LA124_2==STRING))
						{
							alt124 = 1;
						}


					}


					} finally { DebugExitDecision(124); }
					switch ( alt124 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:1852:17: OP_COMMA md= memberDeclarator
						{
						DebugLocation(1852, 17);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_anonymousObjectInitializer13092); if (state.failed) return value;
						DebugLocation(1853, 19);
						PushFollow(Follow._memberDeclarator_in_anonymousObjectInitializer13112);
						md=memberDeclarator();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(1854, 17);
						if (state.backtracking == 0)
						{
							 builder.Add(md); 
						}

						}
						break;

					default:
						goto loop124;
					}
				}

				loop124:
					;

				} finally { DebugExitSubRule(124); }

				DebugLocation(1856, 13);
				// Truss.g:1856:13: ( OP_COMMA )?
				int alt125=2;
				try { DebugEnterSubRule(125);
				try { DebugEnterDecision(125, false);
				int LA125_1 = input.LA(1);

				if ((LA125_1==OP_COMMA))
				{
					alt125 = 1;
				}
				} finally { DebugExitDecision(125); }
				switch (alt125)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1856:13: OP_COMMA
					{
					DebugLocation(1856, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_anonymousObjectInitializer13159); if (state.failed) return value;

					}
					break;

				}
				} finally { DebugExitSubRule(125); }


				}
				break;

			}
			} finally { DebugExitSubRule(126); }

			DebugLocation(1858, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_anonymousObjectInitializer13181); if (state.failed) return value;
			DebugLocation(1859, 9);
			if (state.backtracking == 0)
			{

				            value = new AnonymousObjectCreationExpressionSyntax(
				                builder.Build(),
				                Span(primaryNewExpression_stack.Peek().start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("anonymousObjectInitializer", 116);
			LeaveRule("anonymousObjectInitializer", 116);
			LeaveRule_anonymousObjectInitializer();
		}
		DebugLocation(1865, 4);
		} finally { DebugExitRule(GrammarFileName, "anonymousObjectInitializer"); }
		return value;

	}
	// $ANTLR end "anonymousObjectInitializer"

	partial void EnterRule_memberDeclarator();
	partial void LeaveRule_memberDeclarator();
	// $ANTLR start "memberDeclarator"
	// Truss.g:1867:1: memberDeclarator returns [AnonymousObjectMemberDeclaratorSyntax value] : (pe= primaryExpression |idn= identifierName OP_EQUALS eod= expressionOrDeclaration );
	[GrammarRule("memberDeclarator")]
	private AnonymousObjectMemberDeclaratorSyntax memberDeclarator()
	{
		EnterRule_memberDeclarator();
		EnterRule("memberDeclarator", 117);
		TraceIn("memberDeclarator", 117);
		AnonymousObjectMemberDeclaratorSyntax value = default(AnonymousObjectMemberDeclaratorSyntax);


		ExpressionSyntax pe = default(ExpressionSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax eod = default(ExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "memberDeclarator");
		DebugLocation(1867, 4);
		try
		{
			// Truss.g:1871:5: (pe= primaryExpression |idn= identifierName OP_EQUALS eod= expressionOrDeclaration )
			int alt127=2;
			try { DebugEnterDecision(127, false);
			int LA127_1 = input.LA(1);

			if ((LA127_1==CHAR||LA127_1==FLOAT||LA127_1==HEX_INTEGER||LA127_1==INTEGER||LA127_1==KW_BASE||LA127_1==KW_DEFAULT||LA127_1==KW_FALSE||(LA127_1>=KW_NEW && LA127_1<=KW_NIL)||LA127_1==KW_SIZEOF||LA127_1==KW_THIS||LA127_1==KW_TRUE||LA127_1==KW_TYPEOF||LA127_1==OP_PAREN_OPEN||LA127_1==STRING))
			{
				alt127 = 1;
			}
			else if ((LA127_1==IDENTIFIER))
			{
				int LA127_2 = input.LA(2);

				if ((LA127_2==OP_BRACE_CLOSE||LA127_2==OP_COMMA))
				{
					alt127 = 1;
				}
				else if ((LA127_2==OP_EQUALS))
				{
					alt127 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 127, 2, input, 2);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 127, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(127); }
			switch (alt127)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1872:9: pe= primaryExpression
				{
				DebugLocation(1872, 11);
				PushFollow(Follow._primaryExpression_in_memberDeclarator13227);
				pe=primaryExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1873, 9);
				if (state.backtracking == 0)
				{

					            value = new AnonymousObjectMemberDeclaratorSyntax(
					                null,
					                pe,
					                Span(start)
					            );
					        
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1881:9: idn= identifierName OP_EQUALS eod= expressionOrDeclaration
				{
				DebugLocation(1881, 12);
				PushFollow(Follow._identifierName_in_memberDeclarator13255);
				idn=identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1881, 28);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_memberDeclarator13257); if (state.failed) return value;
				DebugLocation(1881, 41);
				PushFollow(Follow._expressionOrDeclaration_in_memberDeclarator13261);
				eod=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1882, 9);
				if (state.backtracking == 0)
				{

					            value = new AnonymousObjectMemberDeclaratorSyntax(
					                idn,
					                eod,
					                Span(start)
					            );
					        
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberDeclarator", 117);
			LeaveRule("memberDeclarator", 117);
			LeaveRule_memberDeclarator();
		}
		DebugLocation(1889, 4);
		} finally { DebugExitRule(GrammarFileName, "memberDeclarator"); }
		return value;

	}
	// $ANTLR end "memberDeclarator"

	partial void EnterRule_objectOrCollectionInitializer();
	partial void LeaveRule_objectOrCollectionInitializer();
	// $ANTLR start "objectOrCollectionInitializer"
	// Truss.g:1891:1: objectOrCollectionInitializer returns [InitializerExpressionSyntax value] : ( OP_BRACE_OPEN OP_BRACE_CLOSE |oi= objectInitializer |ci= collectionInitializer );
	[GrammarRule("objectOrCollectionInitializer")]
	private InitializerExpressionSyntax objectOrCollectionInitializer()
	{
		EnterRule_objectOrCollectionInitializer();
		EnterRule("objectOrCollectionInitializer", 118);
		TraceIn("objectOrCollectionInitializer", 118);
		InitializerExpressionSyntax value = default(InitializerExpressionSyntax);


		InitializerExpressionSyntax oi = default(InitializerExpressionSyntax);
		InitializerExpressionSyntax ci = default(InitializerExpressionSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "objectOrCollectionInitializer");
		DebugLocation(1891, 4);
		try
		{
			// Truss.g:1895:5: ( OP_BRACE_OPEN OP_BRACE_CLOSE |oi= objectInitializer |ci= collectionInitializer )
			int alt128=3;
			try { DebugEnterDecision(128, false);
			int LA128_1 = input.LA(1);

			if ((LA128_1==OP_BRACE_OPEN))
			{
				switch (input.LA(2))
				{
				case OP_BRACE_CLOSE:
					{
					alt128 = 1;
					}
					break;
				case IDENTIFIER:
					{
					int LA128_3 = input.LA(3);

					if ((LA128_3==OP_EQUALS||LA128_3==OP_PLUS_EQUALS))
					{
						alt128 = 2;
					}
					else if ((LA128_3==KW_AS||LA128_3==KW_IS||(LA128_3>=OP_AMPERSAND && LA128_3<=OP_AMPERSAND_AMPERSAND)||LA128_3==OP_ASTERISK||(LA128_3>=OP_BAR && LA128_3<=OP_BAR_BAR)||LA128_3==OP_BRACE_CLOSE||(LA128_3>=OP_BRACKET_OPEN && LA128_3<=OP_CARET)||(LA128_3>=OP_COMMA && LA128_3<=OP_DOT)||LA128_3==OP_EQUALS_EQUALS||(LA128_3>=OP_EXCLAMATION_EQUALS && LA128_3<=OP_GREATER_THAN_EQUALS)||LA128_3==OP_GREATER_THAN_GREATER_THAN_FIRST||(LA128_3>=OP_LESS_THAN && LA128_3<=OP_LESS_THAN_LESS_THAN)||LA128_3==OP_MINUS||LA128_3==OP_MINUS_MINUS||(LA128_3>=OP_PAREN_OPEN && LA128_3<=OP_PERCENT)||LA128_3==OP_PLUS||(LA128_3>=OP_PLUS_PLUS && LA128_3<=OP_QUESTION_QUESTION)||LA128_3==OP_SLASH))
					{
						alt128 = 3;
					}
					else
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 128, 3, input, 3);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case CHAR:
				case FLOAT:
				case HEX_INTEGER:
				case INTEGER:
				case KW_AWAIT:
				case KW_BASE:
				case KW_DEFAULT:
				case KW_FALSE:
				case KW_NEW:
				case KW_NIL:
				case KW_SIZEOF:
				case KW_THIS:
				case KW_TRUE:
				case KW_TYPEOF:
				case OP_AMPERSAND:
				case OP_BRACE_OPEN:
				case OP_EXCLAMATION:
				case OP_MINUS:
				case OP_MINUS_MINUS:
				case OP_PAREN_OPEN:
				case OP_PLUS:
				case OP_PLUS_PLUS:
				case OP_TILDE:
				case STRING:
					{
					alt128 = 3;
					}
					break;
				default:
					{
						if (state.backtracking>0) {state.failed=true; return value;}
						NoViableAltException nvae = new NoViableAltException("", 128, 1, input, 2);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 128, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1896:9: OP_BRACE_OPEN OP_BRACE_CLOSE
				{
				DebugLocation(1896, 9);
				Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_objectOrCollectionInitializer13305); if (state.failed) return value;
				DebugLocation(1896, 23);
				Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_objectOrCollectionInitializer13307); if (state.failed) return value;
				DebugLocation(1897, 9);
				if (state.backtracking == 0)
				{

					            value = new InitializerExpressionSyntax(
					                ImmutableArray<ExpressionSyntax>.Empty,
					                Span(start)
					            );
					        
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1904:9: oi= objectInitializer
				{
				DebugLocation(1904, 11);
				PushFollow(Follow._objectInitializer_in_objectOrCollectionInitializer13335);
				oi=objectInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1905, 9);
				if (state.backtracking == 0)
				{
					 value = oi; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:1907:9: ci= collectionInitializer
				{
				DebugLocation(1907, 11);
				PushFollow(Follow._collectionInitializer_in_objectOrCollectionInitializer13363);
				ci=collectionInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1908, 9);
				if (state.backtracking == 0)
				{
					 value = ci; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectOrCollectionInitializer", 118);
			LeaveRule("objectOrCollectionInitializer", 118);
			LeaveRule_objectOrCollectionInitializer();
		}
		DebugLocation(1909, 4);
		} finally { DebugExitRule(GrammarFileName, "objectOrCollectionInitializer"); }
		return value;

	}
	// $ANTLR end "objectOrCollectionInitializer"

	partial void EnterRule_objectInitializer();
	partial void LeaveRule_objectInitializer();
	// $ANTLR start "objectInitializer"
	// Truss.g:1911:1: objectInitializer returns [InitializerExpressionSyntax value] : OP_BRACE_OPEN mi= memberInitializer ( OP_COMMA mi= memberInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE ;
	[GrammarRule("objectInitializer")]
	private InitializerExpressionSyntax objectInitializer()
	{
		EnterRule_objectInitializer();
		EnterRule("objectInitializer", 119);
		TraceIn("objectInitializer", 119);
		InitializerExpressionSyntax value = default(InitializerExpressionSyntax);


		ExpressionSyntax mi = default(ExpressionSyntax);


		    var start = input.LT(1);
		    var builder = new ImmutableArray<ExpressionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "objectInitializer");
		DebugLocation(1911, 4);
		try
		{
			// Truss.g:1916:5: ( OP_BRACE_OPEN mi= memberInitializer ( OP_COMMA mi= memberInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:1917:9: OP_BRACE_OPEN mi= memberInitializer ( OP_COMMA mi= memberInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE
			{
			DebugLocation(1917, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_objectInitializer13407); if (state.failed) return value;
			DebugLocation(1918, 11);
			PushFollow(Follow._memberInitializer_in_objectInitializer13419);
			mi=memberInitializer();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1919, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(mi); 
			}
			DebugLocation(1920, 9);
			// Truss.g:1920:9: ( OP_COMMA mi= memberInitializer )*
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_1 = input.LA(1);

				if ((LA129_1==OP_COMMA))
				{
					int LA129_2 = input.LA(2);

					if ((LA129_2==IDENTIFIER))
					{
						alt129 = 1;
					}


				}


				} finally { DebugExitDecision(129); }
				switch ( alt129 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1921:13: OP_COMMA mi= memberInitializer
					{
					DebugLocation(1921, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_objectInitializer13453); if (state.failed) return value;
					DebugLocation(1922, 15);
					PushFollow(Follow._memberInitializer_in_objectInitializer13469);
					mi=memberInitializer();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1923, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(mi); 
					}

					}
					break;

				default:
					goto loop129;
				}
			}

			loop129:
				;

			} finally { DebugExitSubRule(129); }

			DebugLocation(1925, 9);
			// Truss.g:1925:9: ( OP_COMMA )?
			int alt130=2;
			try { DebugEnterSubRule(130);
			try { DebugEnterDecision(130, false);
			int LA130_1 = input.LA(1);

			if ((LA130_1==OP_COMMA))
			{
				alt130 = 1;
			}
			} finally { DebugExitDecision(130); }
			switch (alt130)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1925:9: OP_COMMA
				{
				DebugLocation(1925, 9);
				Match(input,OP_COMMA,Follow._OP_COMMA_in_objectInitializer13504); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(130); }

			DebugLocation(1926, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_objectInitializer13515); if (state.failed) return value;
			DebugLocation(1927, 9);
			if (state.backtracking == 0)
			{

				            value = new InitializerExpressionSyntax(
				                builder.Build(),
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("objectInitializer", 119);
			LeaveRule("objectInitializer", 119);
			LeaveRule_objectInitializer();
		}
		DebugLocation(1933, 4);
		} finally { DebugExitRule(GrammarFileName, "objectInitializer"); }
		return value;

	}
	// $ANTLR end "objectInitializer"

	partial void EnterRule_memberInitializer();
	partial void LeaveRule_memberInitializer();
	// $ANTLR start "memberInitializer"
	// Truss.g:1935:1: memberInitializer returns [ExpressionSyntax value] : idn= identifierName ( OP_EQUALS | OP_PLUS_EQUALS ) miv= memberInitializerValue ;
	[GrammarRule("memberInitializer")]
	private ExpressionSyntax memberInitializer()
	{
		EnterRule_memberInitializer();
		EnterRule("memberInitializer", 120);
		TraceIn("memberInitializer", 120);
		ExpressionSyntax value = default(ExpressionSyntax);


		IdentifierNameSyntax idn = default(IdentifierNameSyntax);
		ExpressionSyntax miv = default(ExpressionSyntax);


		    var start = input.LT(1);
		    BinaryOperator? operator_ = null;

		try { DebugEnterRule(GrammarFileName, "memberInitializer");
		DebugLocation(1935, 4);
		try
		{
			// Truss.g:1940:5: (idn= identifierName ( OP_EQUALS | OP_PLUS_EQUALS ) miv= memberInitializerValue )
			DebugEnterAlt(1);
			// Truss.g:1941:9: idn= identifierName ( OP_EQUALS | OP_PLUS_EQUALS ) miv= memberInitializerValue
			{
			DebugLocation(1941, 12);
			PushFollow(Follow._identifierName_in_memberInitializer13561);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1942, 9);
			// Truss.g:1942:9: ( OP_EQUALS | OP_PLUS_EQUALS )
			int alt131=2;
			try { DebugEnterSubRule(131);
			try { DebugEnterDecision(131, false);
			int LA131_1 = input.LA(1);

			if ((LA131_1==OP_EQUALS))
			{
				alt131 = 1;
			}
			else if ((LA131_1==OP_PLUS_EQUALS))
			{
				alt131 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 131, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(131); }
			switch (alt131)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1943:13: OP_EQUALS
				{
				DebugLocation(1943, 13);
				Match(input,OP_EQUALS,Follow._OP_EQUALS_in_memberInitializer13585); if (state.failed) return value;
				DebugLocation(1944, 13);
				if (state.backtracking == 0)
				{
					 operator_ = BinaryOperator.Equals; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1946:13: OP_PLUS_EQUALS
				{
				DebugLocation(1946, 13);
				Match(input,OP_PLUS_EQUALS,Follow._OP_PLUS_EQUALS_in_memberInitializer13623); if (state.failed) return value;
				DebugLocation(1947, 13);
				if (state.backtracking == 0)
				{
					 operator_ = BinaryOperator.PlusEquals; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(131); }

			DebugLocation(1949, 12);
			PushFollow(Follow._memberInitializerValue_in_memberInitializer13659);
			miv=memberInitializerValue();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1950, 9);
			if (state.backtracking == 0)
			{
				 value = new BinaryExpressionSyntax(operator_.Value, idn, miv, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberInitializer", 120);
			LeaveRule("memberInitializer", 120);
			LeaveRule_memberInitializer();
		}
		DebugLocation(1951, 4);
		} finally { DebugExitRule(GrammarFileName, "memberInitializer"); }
		return value;

	}
	// $ANTLR end "memberInitializer"

	partial void EnterRule_memberInitializerValue();
	partial void LeaveRule_memberInitializerValue();
	// $ANTLR start "memberInitializerValue"
	// Truss.g:1953:1: memberInitializerValue returns [ExpressionSyntax value] : (e1= expressionOrDeclaration |e2= objectOrCollectionInitializer );
	[GrammarRule("memberInitializerValue")]
	private ExpressionSyntax memberInitializerValue()
	{
		EnterRule_memberInitializerValue();
		EnterRule("memberInitializerValue", 121);
		TraceIn("memberInitializerValue", 121);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax e1 = default(ExpressionSyntax);
		InitializerExpressionSyntax e2 = default(InitializerExpressionSyntax);

		try { DebugEnterRule(GrammarFileName, "memberInitializerValue");
		DebugLocation(1953, 4);
		try
		{
			// Truss.g:1954:5: (e1= expressionOrDeclaration |e2= objectOrCollectionInitializer )
			int alt132=2;
			try { DebugEnterDecision(132, false);
			int LA132_1 = input.LA(1);

			if ((LA132_1==CHAR||LA132_1==FLOAT||(LA132_1>=HEX_INTEGER && LA132_1<=IDENTIFIER)||LA132_1==INTEGER||(LA132_1>=KW_ASYNC && LA132_1<=KW_BOOL)||LA132_1==KW_BYTE||LA132_1==KW_CHAR||(LA132_1>=KW_DECIMAL && LA132_1<=KW_DEFAULT)||LA132_1==KW_DOUBLE||LA132_1==KW_FALSE||LA132_1==KW_FLOAT||LA132_1==KW_INT||LA132_1==KW_LONG||(LA132_1>=KW_NEW && LA132_1<=KW_OBJECT)||LA132_1==KW_SBYTE||(LA132_1>=KW_SHORT && LA132_1<=KW_SIZEOF)||LA132_1==KW_STRING||LA132_1==KW_THIS||LA132_1==KW_TRUE||(LA132_1>=KW_TYPEOF && LA132_1<=KW_USHORT)||LA132_1==KW_VAR||LA132_1==KW_VOID||LA132_1==OP_AMPERSAND||LA132_1==OP_EXCLAMATION||LA132_1==OP_MINUS||LA132_1==OP_MINUS_MINUS||LA132_1==OP_PAREN_OPEN||LA132_1==OP_PLUS||LA132_1==OP_PLUS_PLUS||(LA132_1>=OP_TILDE && LA132_1<=STRING)))
			{
				alt132 = 1;
			}
			else if ((LA132_1==OP_BRACE_OPEN))
			{
				alt132 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 132, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(132); }
			switch (alt132)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1954:7: e1= expressionOrDeclaration
				{
				DebugLocation(1954, 9);
				PushFollow(Follow._expressionOrDeclaration_in_memberInitializerValue13692);
				e1=expressionOrDeclaration();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1954, 34);
				if (state.backtracking == 0)
				{
					 value = e1; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1955:7: e2= objectOrCollectionInitializer
				{
				DebugLocation(1955, 9);
				PushFollow(Follow._objectOrCollectionInitializer_in_memberInitializerValue13704);
				e2=objectOrCollectionInitializer();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1955, 40);
				if (state.backtracking == 0)
				{
					 value = e2; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberInitializerValue", 121);
			LeaveRule("memberInitializerValue", 121);
			LeaveRule_memberInitializerValue();
		}
		DebugLocation(1956, 4);
		} finally { DebugExitRule(GrammarFileName, "memberInitializerValue"); }
		return value;

	}
	// $ANTLR end "memberInitializerValue"

	partial void EnterRule_collectionInitializer();
	partial void LeaveRule_collectionInitializer();
	// $ANTLR start "collectionInitializer"
	// Truss.g:1958:1: collectionInitializer returns [InitializerExpressionSyntax value] : OP_BRACE_OPEN ei= elementInitializer ( OP_COMMA ei= elementInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE ;
	[GrammarRule("collectionInitializer")]
	private InitializerExpressionSyntax collectionInitializer()
	{
		EnterRule_collectionInitializer();
		EnterRule("collectionInitializer", 122);
		TraceIn("collectionInitializer", 122);
		InitializerExpressionSyntax value = default(InitializerExpressionSyntax);


		ExpressionSyntax ei = default(ExpressionSyntax);


		    var start = input.LT(1);
		    var builder = new ImmutableArray<ExpressionSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "collectionInitializer");
		DebugLocation(1958, 4);
		try
		{
			// Truss.g:1963:5: ( OP_BRACE_OPEN ei= elementInitializer ( OP_COMMA ei= elementInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:1964:9: OP_BRACE_OPEN ei= elementInitializer ( OP_COMMA ei= elementInitializer )* ( OP_COMMA )? OP_BRACE_CLOSE
			{
			DebugLocation(1964, 9);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_collectionInitializer13740); if (state.failed) return value;
			DebugLocation(1965, 11);
			PushFollow(Follow._elementInitializer_in_collectionInitializer13752);
			ei=elementInitializer();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(1966, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(ei); 
			}
			DebugLocation(1967, 9);
			// Truss.g:1967:9: ( OP_COMMA ei= elementInitializer )*
			try { DebugEnterSubRule(133);
			while (true)
			{
				int alt133=2;
				try { DebugEnterDecision(133, false);
				int LA133_1 = input.LA(1);

				if ((LA133_1==OP_COMMA))
				{
					int LA133_2 = input.LA(2);

					if ((LA133_2==CHAR||LA133_2==FLOAT||(LA133_2>=HEX_INTEGER && LA133_2<=IDENTIFIER)||LA133_2==INTEGER||(LA133_2>=KW_AWAIT && LA133_2<=KW_BASE)||LA133_2==KW_DEFAULT||LA133_2==KW_FALSE||(LA133_2>=KW_NEW && LA133_2<=KW_NIL)||LA133_2==KW_SIZEOF||LA133_2==KW_THIS||LA133_2==KW_TRUE||LA133_2==KW_TYPEOF||LA133_2==OP_AMPERSAND||LA133_2==OP_BRACE_OPEN||LA133_2==OP_EXCLAMATION||LA133_2==OP_MINUS||LA133_2==OP_MINUS_MINUS||LA133_2==OP_PAREN_OPEN||LA133_2==OP_PLUS||LA133_2==OP_PLUS_PLUS||(LA133_2>=OP_TILDE && LA133_2<=STRING)))
					{
						alt133 = 1;
					}


				}


				} finally { DebugExitDecision(133); }
				switch ( alt133 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:1968:13: OP_COMMA ei= elementInitializer
					{
					DebugLocation(1968, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_collectionInitializer13786); if (state.failed) return value;
					DebugLocation(1969, 15);
					PushFollow(Follow._elementInitializer_in_collectionInitializer13802);
					ei=elementInitializer();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(1970, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(ei); 
					}

					}
					break;

				default:
					goto loop133;
				}
			}

			loop133:
				;

			} finally { DebugExitSubRule(133); }

			DebugLocation(1972, 9);
			// Truss.g:1972:9: ( OP_COMMA )?
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_1 = input.LA(1);

			if ((LA134_1==OP_COMMA))
			{
				alt134 = 1;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1972:9: OP_COMMA
				{
				DebugLocation(1972, 9);
				Match(input,OP_COMMA,Follow._OP_COMMA_in_collectionInitializer13837); if (state.failed) return value;

				}
				break;

			}
			} finally { DebugExitSubRule(134); }

			DebugLocation(1973, 9);
			Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_collectionInitializer13848); if (state.failed) return value;
			DebugLocation(1974, 9);
			if (state.backtracking == 0)
			{

				            value = new InitializerExpressionSyntax(
				                builder.Build(),
				                Span(start)
				            );
				        
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("collectionInitializer", 122);
			LeaveRule("collectionInitializer", 122);
			LeaveRule_collectionInitializer();
		}
		DebugLocation(1980, 4);
		} finally { DebugExitRule(GrammarFileName, "collectionInitializer"); }
		return value;

	}
	// $ANTLR end "collectionInitializer"

	partial void EnterRule_elementInitializer();
	partial void LeaveRule_elementInitializer();
	// $ANTLR start "elementInitializer"
	// Truss.g:1982:1: elementInitializer returns [ExpressionSyntax value] : (nae= nonAssignmentExpression | OP_BRACE_OPEN eodl= expressionOrDeclarationList OP_BRACE_CLOSE );
	[GrammarRule("elementInitializer")]
	private ExpressionSyntax elementInitializer()
	{
		EnterRule_elementInitializer();
		EnterRule("elementInitializer", 123);
		TraceIn("elementInitializer", 123);
		ExpressionSyntax value = default(ExpressionSyntax);


		ExpressionSyntax nae = default(ExpressionSyntax);
		ImmutableArray<ExpressionSyntax> eodl = default(ImmutableArray<ExpressionSyntax>);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "elementInitializer");
		DebugLocation(1982, 4);
		try
		{
			// Truss.g:1986:5: (nae= nonAssignmentExpression | OP_BRACE_OPEN eodl= expressionOrDeclarationList OP_BRACE_CLOSE )
			int alt135=2;
			try { DebugEnterDecision(135, false);
			int LA135_1 = input.LA(1);

			if ((LA135_1==CHAR||LA135_1==FLOAT||(LA135_1>=HEX_INTEGER && LA135_1<=IDENTIFIER)||LA135_1==INTEGER||(LA135_1>=KW_AWAIT && LA135_1<=KW_BASE)||LA135_1==KW_DEFAULT||LA135_1==KW_FALSE||(LA135_1>=KW_NEW && LA135_1<=KW_NIL)||LA135_1==KW_SIZEOF||LA135_1==KW_THIS||LA135_1==KW_TRUE||LA135_1==KW_TYPEOF||LA135_1==OP_AMPERSAND||LA135_1==OP_EXCLAMATION||LA135_1==OP_MINUS||LA135_1==OP_MINUS_MINUS||LA135_1==OP_PAREN_OPEN||LA135_1==OP_PLUS||LA135_1==OP_PLUS_PLUS||(LA135_1>=OP_TILDE && LA135_1<=STRING)))
			{
				alt135 = 1;
			}
			else if ((LA135_1==OP_BRACE_OPEN))
			{
				alt135 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:1987:9: nae= nonAssignmentExpression
				{
				DebugLocation(1987, 12);
				PushFollow(Follow._nonAssignmentExpression_in_elementInitializer13894);
				nae=nonAssignmentExpression();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1988, 9);
				if (state.backtracking == 0)
				{
					 value = nae; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:1990:9: OP_BRACE_OPEN eodl= expressionOrDeclarationList OP_BRACE_CLOSE
				{
				DebugLocation(1990, 9);
				Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_elementInitializer13920); if (state.failed) return value;
				DebugLocation(1990, 27);
				PushFollow(Follow._expressionOrDeclarationList_in_elementInitializer13924);
				eodl=expressionOrDeclarationList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(1990, 56);
				Match(input,OP_BRACE_CLOSE,Follow._OP_BRACE_CLOSE_in_elementInitializer13926); if (state.failed) return value;
				DebugLocation(1991, 9);
				if (state.backtracking == 0)
				{

					            value = new InitializerExpressionSyntax(
					                eodl,
					                Span(start)
					            );
					        
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("elementInitializer", 123);
			LeaveRule("elementInitializer", 123);
			LeaveRule_elementInitializer();
		}
		DebugLocation(1997, 4);
		} finally { DebugExitRule(GrammarFileName, "elementInitializer"); }
		return value;

	}
	// $ANTLR end "elementInitializer"

	partial void EnterRule_variableDeclarationExpression();
	partial void LeaveRule_variableDeclarationExpression();
	// $ANTLR start "variableDeclarationExpression"
	// Truss.g:1999:1: variableDeclarationExpression returns [ExpressionSyntax value] : t= typeSyntax idn= identifierName ;
	[GrammarRule("variableDeclarationExpression")]
	private ExpressionSyntax variableDeclarationExpression()
	{
		EnterRule_variableDeclarationExpression();
		EnterRule("variableDeclarationExpression", 124);
		TraceIn("variableDeclarationExpression", 124);
		ExpressionSyntax value = default(ExpressionSyntax);


		TypeSyntax t = default(TypeSyntax);
		IdentifierNameSyntax idn = default(IdentifierNameSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "variableDeclarationExpression");
		DebugLocation(1999, 4);
		try
		{
			// Truss.g:2003:5: (t= typeSyntax idn= identifierName )
			DebugEnterAlt(1);
			// Truss.g:2004:9: t= typeSyntax idn= identifierName
			{
			DebugLocation(2004, 10);
			PushFollow(Follow._typeSyntax_in_variableDeclarationExpression13972);
			t=typeSyntax();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2005, 12);
			PushFollow(Follow._identifierName_in_variableDeclarationExpression13984);
			idn=identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2006, 9);
			if (state.backtracking == 0)
			{
				 value = new VariableDeclarationExpressionSyntax(t, idn, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("variableDeclarationExpression", 124);
			LeaveRule("variableDeclarationExpression", 124);
			LeaveRule_variableDeclarationExpression();
		}
		DebugLocation(2007, 4);
		} finally { DebugExitRule(GrammarFileName, "variableDeclarationExpression"); }
		return value;

	}
	// $ANTLR end "variableDeclarationExpression"

	partial void EnterRule_selector();
	partial void LeaveRule_selector();
	// $ANTLR start "selector"
	// Truss.g:2009:1: selector returns [ISelector value] : ( OP_DOT sn= simpleName |al= argumentList | OP_BRACKET_OPEN eodl= expressionOrDeclarationList OP_BRACKET_CLOSE );
	[GrammarRule("selector")]
	private ISelector selector()
	{
		EnterRule_selector();
		EnterRule("selector", 125);
		TraceIn("selector", 125);
		ISelector value = default(ISelector);


		SimpleNameSyntax sn = default(SimpleNameSyntax);
		ImmutableArray<ArgumentSyntax> al = default(ImmutableArray<ArgumentSyntax>);
		ImmutableArray<ExpressionSyntax> eodl = default(ImmutableArray<ExpressionSyntax>);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(2009, 4);
		try
		{
			// Truss.g:2013:5: ( OP_DOT sn= simpleName |al= argumentList | OP_BRACKET_OPEN eodl= expressionOrDeclarationList OP_BRACKET_CLOSE )
			int alt136=3;
			try { DebugEnterDecision(136, false);
			switch (input.LA(1))
			{
			case OP_DOT:
				{
				alt136 = 1;
				}
				break;
			case OP_PAREN_OPEN:
				{
				alt136 = 2;
				}
				break;
			case OP_BRACKET_OPEN:
				{
				alt136 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 136, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(136); }
			switch (alt136)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2013:7: OP_DOT sn= simpleName
				{
				DebugLocation(2013, 7);
				Match(input,OP_DOT,Follow._OP_DOT_in_selector14020); if (state.failed) return value;
				DebugLocation(2013, 16);
				PushFollow(Follow._simpleName_in_selector14024);
				sn=simpleName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2013, 28);
				if (state.backtracking == 0)
				{
					 return new MemberAccessSelector(sn, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2014:7: al= argumentList
				{
				DebugLocation(2014, 9);
				PushFollow(Follow._argumentList_in_selector14036);
				al=argumentList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2014, 23);
				if (state.backtracking == 0)
				{
					 return new ArgumentListSelector(al, Span(start)); 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:2015:7: OP_BRACKET_OPEN eodl= expressionOrDeclarationList OP_BRACKET_CLOSE
				{
				DebugLocation(2015, 7);
				Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_selector14046); if (state.failed) return value;
				DebugLocation(2015, 27);
				PushFollow(Follow._expressionOrDeclarationList_in_selector14050);
				eodl=expressionOrDeclarationList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2015, 56);
				Match(input,OP_BRACKET_CLOSE,Follow._OP_BRACKET_CLOSE_in_selector14052); if (state.failed) return value;
				DebugLocation(2015, 73);
				if (state.backtracking == 0)
				{
					 return new IndexSelector(eodl, Span(start)); 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("selector", 125);
			LeaveRule("selector", 125);
			LeaveRule_selector();
		}
		DebugLocation(2016, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return value;

	}
	// $ANTLR end "selector"

	partial void EnterRule_argumentList();
	partial void LeaveRule_argumentList();
	// $ANTLR start "argumentList"
	// Truss.g:2018:1: argumentList returns [ImmutableArray<ArgumentSyntax> value] : OP_PAREN_OPEN (a= argument ( OP_COMMA a= argument )* )? OP_PAREN_CLOSE ;
	[GrammarRule("argumentList")]
	private ImmutableArray<ArgumentSyntax> argumentList()
	{
		EnterRule_argumentList();
		EnterRule("argumentList", 126);
		TraceIn("argumentList", 126);
		ImmutableArray<ArgumentSyntax> value = default(ImmutableArray<ArgumentSyntax>);


		ArgumentSyntax a = default(ArgumentSyntax);


		    var arguments = new ImmutableArray<ArgumentSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "argumentList");
		DebugLocation(2018, 4);
		try
		{
			// Truss.g:2022:5: ( OP_PAREN_OPEN (a= argument ( OP_COMMA a= argument )* )? OP_PAREN_CLOSE )
			DebugEnterAlt(1);
			// Truss.g:2023:9: OP_PAREN_OPEN (a= argument ( OP_COMMA a= argument )* )? OP_PAREN_CLOSE
			{
			DebugLocation(2023, 9);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_argumentList14088); if (state.failed) return value;
			DebugLocation(2024, 9);
			// Truss.g:2024:9: (a= argument ( OP_COMMA a= argument )* )?
			int alt138=2;
			try { DebugEnterSubRule(138);
			try { DebugEnterDecision(138, false);
			int LA138_1 = input.LA(1);

			if ((LA138_1==CHAR||LA138_1==FLOAT||(LA138_1>=HEX_INTEGER && LA138_1<=IDENTIFIER)||LA138_1==INTEGER||(LA138_1>=KW_ASYNC && LA138_1<=KW_BOOL)||LA138_1==KW_BYTE||LA138_1==KW_CHAR||(LA138_1>=KW_DECIMAL && LA138_1<=KW_DEFAULT)||LA138_1==KW_DOUBLE||LA138_1==KW_FALSE||LA138_1==KW_FLOAT||LA138_1==KW_INT||LA138_1==KW_LONG||(LA138_1>=KW_NEW && LA138_1<=KW_OBJECT)||LA138_1==KW_OUT||LA138_1==KW_REF||LA138_1==KW_SBYTE||(LA138_1>=KW_SHORT && LA138_1<=KW_SIZEOF)||LA138_1==KW_STRING||LA138_1==KW_THIS||LA138_1==KW_TRUE||(LA138_1>=KW_TYPEOF && LA138_1<=KW_USHORT)||LA138_1==KW_VAR||LA138_1==KW_VOID||LA138_1==OP_AMPERSAND||LA138_1==OP_EXCLAMATION||LA138_1==OP_MINUS||LA138_1==OP_MINUS_MINUS||LA138_1==OP_PAREN_OPEN||LA138_1==OP_PLUS||LA138_1==OP_PLUS_PLUS||(LA138_1>=OP_TILDE && LA138_1<=STRING)))
			{
				alt138 = 1;
			}
			} finally { DebugExitDecision(138); }
			switch (alt138)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2025:13: a= argument ( OP_COMMA a= argument )*
				{
				DebugLocation(2025, 14);
				PushFollow(Follow._argument_in_argumentList14114);
				a=argument();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2026, 13);
				if (state.backtracking == 0)
				{
					 arguments.Add(a); 
				}
				DebugLocation(2027, 13);
				// Truss.g:2027:13: ( OP_COMMA a= argument )*
				try { DebugEnterSubRule(137);
				while (true)
				{
					int alt137=2;
					try { DebugEnterDecision(137, false);
					int LA137_1 = input.LA(1);

					if ((LA137_1==OP_COMMA))
					{
						alt137 = 1;
					}


					} finally { DebugExitDecision(137); }
					switch ( alt137 )
					{
					case 1:
						DebugEnterAlt(1);
						// Truss.g:2028:17: OP_COMMA a= argument
						{
						DebugLocation(2028, 17);
						Match(input,OP_COMMA,Follow._OP_COMMA_in_argumentList14160); if (state.failed) return value;
						DebugLocation(2029, 18);
						PushFollow(Follow._argument_in_argumentList14180);
						a=argument();
						PopFollow();
						if (state.failed) return value;
						DebugLocation(2030, 17);
						if (state.backtracking == 0)
						{
							 arguments.Add(a); 
						}

						}
						break;

					default:
						goto loop137;
					}
				}

				loop137:
					;

				} finally { DebugExitSubRule(137); }


				}
				break;

			}
			} finally { DebugExitSubRule(138); }

			DebugLocation(2033, 9);
			Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_argumentList14234); if (state.failed) return value;
			DebugLocation(2034, 9);
			if (state.backtracking == 0)
			{
				 value = arguments.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("argumentList", 126);
			LeaveRule("argumentList", 126);
			LeaveRule_argumentList();
		}
		DebugLocation(2035, 4);
		} finally { DebugExitRule(GrammarFileName, "argumentList"); }
		return value;

	}
	// $ANTLR end "argumentList"

	partial void EnterRule_literal();
	partial void LeaveRule_literal();
	// $ANTLR start "literal"
	// Truss.g:2037:1: literal returns [LiteralExpressionSyntax value] : ( KW_TRUE | KW_FALSE | KW_NIL |hi= HEX_INTEGER |i= INTEGER |f= FLOAT |c= CHAR |s= STRING );
	[GrammarRule("literal")]
	private LiteralExpressionSyntax literal()
	{
		EnterRule_literal();
		EnterRule("literal", 127);
		TraceIn("literal", 127);
		LiteralExpressionSyntax value = default(LiteralExpressionSyntax);


		IToken hi = default(IToken);
		IToken i = default(IToken);
		IToken f = default(IToken);
		IToken c = default(IToken);
		IToken s = default(IToken);


		    var start = input.LT(1);
		    LiteralType? type = null;
		    string text = null;

		try { DebugEnterRule(GrammarFileName, "literal");
		DebugLocation(2037, 4);
		try
		{
			// Truss.g:2046:5: ( KW_TRUE | KW_FALSE | KW_NIL |hi= HEX_INTEGER |i= INTEGER |f= FLOAT |c= CHAR |s= STRING )
			int alt139=8;
			try { DebugEnterDecision(139, false);
			switch (input.LA(1))
			{
			case KW_TRUE:
				{
				alt139 = 1;
				}
				break;
			case KW_FALSE:
				{
				alt139 = 2;
				}
				break;
			case KW_NIL:
				{
				alt139 = 3;
				}
				break;
			case HEX_INTEGER:
				{
				alt139 = 4;
				}
				break;
			case INTEGER:
				{
				alt139 = 5;
				}
				break;
			case FLOAT:
				{
				alt139 = 6;
				}
				break;
			case CHAR:
				{
				alt139 = 7;
				}
				break;
			case STRING:
				{
				alt139 = 8;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 139, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(139); }
			switch (alt139)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2046:7: KW_TRUE
				{
				DebugLocation(2046, 7);
				Match(input,KW_TRUE,Follow._KW_TRUE_in_literal14275); if (state.failed) return value;
				DebugLocation(2046, 15);
				if (state.backtracking == 0)
				{
					 type = LiteralType.True; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2047:7: KW_FALSE
				{
				DebugLocation(2047, 7);
				Match(input,KW_FALSE,Follow._KW_FALSE_in_literal14285); if (state.failed) return value;
				DebugLocation(2047, 16);
				if (state.backtracking == 0)
				{
					 type = LiteralType.False; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:2048:7: KW_NIL
				{
				DebugLocation(2048, 7);
				Match(input,KW_NIL,Follow._KW_NIL_in_literal14295); if (state.failed) return value;
				DebugLocation(2048, 14);
				if (state.backtracking == 0)
				{
					 type = LiteralType.Nil; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:2049:7: hi= HEX_INTEGER
				{
				DebugLocation(2049, 9);
				hi=(IToken)Match(input,HEX_INTEGER,Follow._HEX_INTEGER_in_literal14307); if (state.failed) return value;
				DebugLocation(2049, 22);
				if (state.backtracking == 0)
				{
					 text = hi.Text; type = LiteralType.Hex; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:2050:7: i= INTEGER
				{
				DebugLocation(2050, 8);
				i=(IToken)Match(input,INTEGER,Follow._INTEGER_in_literal14319); if (state.failed) return value;
				DebugLocation(2050, 17);
				if (state.backtracking == 0)
				{
					 text = i.Text; type = LiteralType.Integer; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:2051:7: f= FLOAT
				{
				DebugLocation(2051, 8);
				f=(IToken)Match(input,FLOAT,Follow._FLOAT_in_literal14331); if (state.failed) return value;
				DebugLocation(2051, 15);
				if (state.backtracking == 0)
				{
					 text = f.Text; type = LiteralType.Float; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:2052:7: c= CHAR
				{
				DebugLocation(2052, 8);
				c=(IToken)Match(input,CHAR,Follow._CHAR_in_literal14343); if (state.failed) return value;
				DebugLocation(2052, 14);
				if (state.backtracking == 0)
				{
					 text = c.Text; type = LiteralType.Char; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:2053:7: s= STRING
				{
				DebugLocation(2053, 8);
				s=(IToken)Match(input,STRING,Follow._STRING_in_literal14355); if (state.failed) return value;
				DebugLocation(2053, 16);
				if (state.backtracking == 0)
				{
					 text = s.Text; type = LiteralType.String; 
				}

				}
				break;

			}
			if (state.backtracking == 0)
			{

				    value = new LiteralExpressionSyntax(type.Value, text, Span(start));

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("literal", 127);
			LeaveRule("literal", 127);
			LeaveRule_literal();
		}
		DebugLocation(2054, 4);
		} finally { DebugExitRule(GrammarFileName, "literal"); }
		return value;

	}
	// $ANTLR end "literal"

	partial void EnterRule_identifierName();
	partial void LeaveRule_identifierName();
	// $ANTLR start "identifierName"
	// Truss.g:2073:1: identifierName returns [IdentifierNameSyntax value] : i= IDENTIFIER ;
	[GrammarRule("identifierName")]
	private IdentifierNameSyntax identifierName()
	{
		EnterRule_identifierName();
		EnterRule("identifierName", 128);
		TraceIn("identifierName", 128);
		IdentifierNameSyntax value = default(IdentifierNameSyntax);


		IToken i = default(IToken);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "identifierName");
		DebugLocation(2073, 4);
		try
		{
			// Truss.g:2077:5: (i= IDENTIFIER )
			DebugEnterAlt(1);
			// Truss.g:2078:9: i= IDENTIFIER
			{
			DebugLocation(2078, 10);
			i=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_identifierName14410); if (state.failed) return value;
			DebugLocation(2079, 9);
			if (state.backtracking == 0)
			{
				 value = new IdentifierNameSyntax(i.Text, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("identifierName", 128);
			LeaveRule("identifierName", 128);
			LeaveRule_identifierName();
		}
		DebugLocation(2080, 4);
		} finally { DebugExitRule(GrammarFileName, "identifierName"); }
		return value;

	}
	// $ANTLR end "identifierName"

	partial void EnterRule_castType();
	partial void LeaveRule_castType();
	// $ANTLR start "castType"
	// Truss.g:2084:1: castType returns [TypeSyntax value] : (n= nullable |t= typeSyntax );
	[GrammarRule("castType")]
	private TypeSyntax castType()
	{
		EnterRule_castType();
		EnterRule("castType", 129);
		TraceIn("castType", 129);
		TypeSyntax value = default(TypeSyntax);


		Nullability n = default(Nullability);
		TypeSyntax t = default(TypeSyntax);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "castType");
		DebugLocation(2084, 4);
		try
		{
			// Truss.g:2088:5: (n= nullable |t= typeSyntax )
			int alt140=2;
			try { DebugEnterDecision(140, false);
			int LA140_1 = input.LA(1);

			if ((LA140_1==OP_EXCLAMATION||LA140_1==OP_QUESTION))
			{
				alt140 = 1;
			}
			else if ((LA140_1==IDENTIFIER||LA140_1==KW_BOOL||LA140_1==KW_BYTE||LA140_1==KW_CHAR||LA140_1==KW_DECIMAL||LA140_1==KW_DOUBLE||LA140_1==KW_FLOAT||LA140_1==KW_INT||LA140_1==KW_LONG||LA140_1==KW_OBJECT||LA140_1==KW_SBYTE||LA140_1==KW_SHORT||LA140_1==KW_STRING||(LA140_1>=KW_UINT && LA140_1<=KW_USHORT)||LA140_1==KW_VAR||LA140_1==KW_VOID))
			{
				alt140 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 140, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2089:9: n= nullable
				{
				DebugLocation(2089, 10);
				PushFollow(Follow._nullable_in_castType14458);
				n=nullable();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2090, 9);
				if (state.backtracking == 0)
				{
					 value = new NakedNullableTypeSyntax(n, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2092:9: t= typeSyntax
				{
				DebugLocation(2092, 10);
				PushFollow(Follow._typeSyntax_in_castType14486);
				t=typeSyntax();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2093, 9);
				if (state.backtracking == 0)
				{
					 value = t; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("castType", 129);
			LeaveRule("castType", 129);
			LeaveRule_castType();
		}
		DebugLocation(2094, 4);
		} finally { DebugExitRule(GrammarFileName, "castType"); }
		return value;

	}
	// $ANTLR end "castType"

	partial void EnterRule_name();
	partial void LeaveRule_name();
	// $ANTLR start "name"
	// Truss.g:2098:1: name returns [NameSyntax value] : qn= np__qualifiedName ;
	[GrammarRule("name")]
	private NameSyntax name()
	{
		EnterRule_name();
		EnterRule("name", 130);
		TraceIn("name", 130);
		NameSyntax value = default(NameSyntax);


		NameParser qn = default(NameParser);

		try { DebugEnterRule(GrammarFileName, "name");
		DebugLocation(2098, 4);
		try
		{
			// Truss.g:2099:5: (qn= np__qualifiedName )
			DebugEnterAlt(1);
			// Truss.g:2100:9: qn= np__qualifiedName
			{
			DebugLocation(2100, 11);
			PushFollow(Follow._np__qualifiedName_in_name14529);
			qn=np__qualifiedName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2101, 9);
			if (state.backtracking == 0)
			{
				 value = qn.ToName(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("name", 130);
			LeaveRule("name", 130);
			LeaveRule_name();
		}
		DebugLocation(2102, 4);
		} finally { DebugExitRule(GrammarFileName, "name"); }
		return value;

	}
	// $ANTLR end "name"

	partial void EnterRule_typeSyntax();
	partial void LeaveRule_typeSyntax();
	// $ANTLR start "typeSyntax"
	// Truss.g:2104:1: typeSyntax returns [TypeSyntax value] : ( KW_VAR |t= np__type );
	[GrammarRule("typeSyntax")]
	private TypeSyntax typeSyntax()
	{
		EnterRule_typeSyntax();
		EnterRule("typeSyntax", 131);
		TraceIn("typeSyntax", 131);
		TypeSyntax value = default(TypeSyntax);


		TypeParser t = default(TypeParser);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "typeSyntax");
		DebugLocation(2104, 4);
		try
		{
			// Truss.g:2108:5: ( KW_VAR |t= np__type )
			int alt141=2;
			try { DebugEnterDecision(141, false);
			int LA141_1 = input.LA(1);

			if ((LA141_1==KW_VAR))
			{
				alt141 = 1;
			}
			else if ((LA141_1==IDENTIFIER||LA141_1==KW_BOOL||LA141_1==KW_BYTE||LA141_1==KW_CHAR||LA141_1==KW_DECIMAL||LA141_1==KW_DOUBLE||LA141_1==KW_FLOAT||LA141_1==KW_INT||LA141_1==KW_LONG||LA141_1==KW_OBJECT||LA141_1==KW_SBYTE||LA141_1==KW_SHORT||LA141_1==KW_STRING||(LA141_1>=KW_UINT && LA141_1<=KW_USHORT)||LA141_1==KW_VOID))
			{
				alt141 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 141, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(141); }
			switch (alt141)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2111:9: KW_VAR
				{
				DebugLocation(2111, 9);
				Match(input,KW_VAR,Follow._KW_VAR_in_typeSyntax14591); if (state.failed) return value;
				DebugLocation(2112, 9);
				if (state.backtracking == 0)
				{
					 value = new VarTypeSyntax(Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2114:9: t= np__type
				{
				DebugLocation(2114, 10);
				PushFollow(Follow._np__type_in_typeSyntax14619);
				t=np__type();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2115, 9);
				if (state.backtracking == 0)
				{
					 value = t.ToType(); 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("typeSyntax", 131);
			LeaveRule("typeSyntax", 131);
			LeaveRule_typeSyntax();
		}
		DebugLocation(2116, 4);
		} finally { DebugExitRule(GrammarFileName, "typeSyntax"); }
		return value;

	}
	// $ANTLR end "typeSyntax"

	partial void EnterRule_memberName();
	partial void LeaveRule_memberName();
	// $ANTLR start "memberName"
	// Truss.g:2118:1: memberName returns [MemberName value] : n= np__qualifiedName ;
	[GrammarRule("memberName")]
	private MemberName memberName()
	{
		EnterRule_memberName();
		EnterRule("memberName", 132);
		TraceIn("memberName", 132);
		MemberName value = default(MemberName);


		NameParser n = default(NameParser);

		try { DebugEnterRule(GrammarFileName, "memberName");
		DebugLocation(2118, 4);
		try
		{
			// Truss.g:2119:5: (n= np__qualifiedName )
			DebugEnterAlt(1);
			// Truss.g:2120:9: n= np__qualifiedName
			{
			DebugLocation(2120, 10);
			PushFollow(Follow._np__qualifiedName_in_memberName14660);
			n=np__qualifiedName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2121, 9);
			if (state.backtracking == 0)
			{
				 value = n.ToMemberName(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("memberName", 132);
			LeaveRule("memberName", 132);
			LeaveRule_memberName();
		}
		DebugLocation(2122, 4);
		} finally { DebugExitRule(GrammarFileName, "memberName"); }
		return value;

	}
	// $ANTLR end "memberName"

	partial void EnterRule_simpleName();
	partial void LeaveRule_simpleName();
	// $ANTLR start "simpleName"
	// Truss.g:2124:1: simpleName returns [SimpleNameSyntax value] : sn= np__simpleName ;
	[GrammarRule("simpleName")]
	private SimpleNameSyntax simpleName()
	{
		EnterRule_simpleName();
		EnterRule("simpleName", 133);
		TraceIn("simpleName", 133);
		SimpleNameSyntax value = default(SimpleNameSyntax);


		SimpleNameParser sn = default(SimpleNameParser);

		try { DebugEnterRule(GrammarFileName, "simpleName");
		DebugLocation(2124, 4);
		try
		{
			// Truss.g:2125:5: (sn= np__simpleName )
			DebugEnterAlt(1);
			// Truss.g:2126:9: sn= np__simpleName
			{
			DebugLocation(2126, 11);
			PushFollow(Follow._np__simpleName_in_simpleName14701);
			sn=np__simpleName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2127, 9);
			if (state.backtracking == 0)
			{
				 value = sn.ToSimpleName(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("simpleName", 133);
			LeaveRule("simpleName", 133);
			LeaveRule_simpleName();
		}
		DebugLocation(2128, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleName"); }
		return value;

	}
	// $ANTLR end "simpleName"

	partial void EnterRule_np__type();
	partial void LeaveRule_np__type();
	// $ANTLR start "np__type"
	// Truss.g:2135:1: np__type returns [TypeParser value] : bt= np__baseType ( ( OP_QUESTION )=> OP_QUESTION )? ( ( OP_CARET )=> OP_CARET )? ( ( rankSpecifier )=>rsl= rankSpecifierList )? ;
	[GrammarRule("np__type")]
	private TypeParser np__type()
	{
		EnterRule_np__type();
		EnterRule("np__type", 134);
		TraceIn("np__type", 134);
		TypeParser value = default(TypeParser);


		TypeParser bt = default(TypeParser);
		ImmutableArray<ArrayRankSpecifierSyntax> rsl = default(ImmutableArray<ArrayRankSpecifierSyntax>);


		    var start = input.LT(1);
		    var builder = new ImmutableArray<ArrayRankSpecifierSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "np__type");
		DebugLocation(2135, 4);
		try
		{
			// Truss.g:2140:5: (bt= np__baseType ( ( OP_QUESTION )=> OP_QUESTION )? ( ( OP_CARET )=> OP_CARET )? ( ( rankSpecifier )=>rsl= rankSpecifierList )? )
			DebugEnterAlt(1);
			// Truss.g:2141:9: bt= np__baseType ( ( OP_QUESTION )=> OP_QUESTION )? ( ( OP_CARET )=> OP_CARET )? ( ( rankSpecifier )=>rsl= rankSpecifierList )?
			{
			DebugLocation(2141, 11);
			PushFollow(Follow._np__baseType_in_np__type14752);
			bt=np__baseType();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2142, 9);
			if (state.backtracking == 0)
			{
				 value = bt; 
			}
			DebugLocation(2143, 9);
			// Truss.g:2143:9: ( ( OP_QUESTION )=> OP_QUESTION )?
			int alt142=2;
			try { DebugEnterSubRule(142);
			try { DebugEnterDecision(142, false);
			int LA142_1 = input.LA(1);

			if ((LA142_1==OP_QUESTION) && (EvaluatePredicate(synpred16_Truss_fragment)))
			{
				alt142 = 1;
			}
			} finally { DebugExitDecision(142); }
			switch (alt142)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2144:13: ( OP_QUESTION )=> OP_QUESTION
				{
				DebugLocation(2145, 13);
				Match(input,OP_QUESTION,Follow._OP_QUESTION_in_np__type14805); if (state.failed) return value;
				DebugLocation(2146, 13);
				if (state.backtracking == 0)
				{
					 value = new NullableTypeParser(value, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(142); }

			DebugLocation(2148, 9);
			// Truss.g:2148:9: ( ( OP_CARET )=> OP_CARET )?
			int alt143=2;
			try { DebugEnterSubRule(143);
			try { DebugEnterDecision(143, false);
			int LA143_1 = input.LA(1);

			if ((LA143_1==OP_CARET) && (EvaluatePredicate(synpred17_Truss_fragment)))
			{
				alt143 = 1;
			}
			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2149:13: ( OP_CARET )=> OP_CARET
				{
				DebugLocation(2150, 13);
				Match(input,OP_CARET,Follow._OP_CARET_in_np__type14873); if (state.failed) return value;
				DebugLocation(2151, 13);
				if (state.backtracking == 0)
				{
					 value = new TrackedTypeParser(value, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(143); }

			DebugLocation(2153, 9);
			// Truss.g:2153:9: ( ( rankSpecifier )=>rsl= rankSpecifierList )?
			int alt144=2;
			try { DebugEnterSubRule(144);
			try { DebugEnterDecision(144, false);
			int LA144_1 = input.LA(1);

			if ((LA144_1==OP_BRACKET_OPEN))
			{
				int LA144_2 = input.LA(2);

				if ((LA144_2==OP_BRACKET_CLOSE) && (EvaluatePredicate(synpred18_Truss_fragment)))
				{
					alt144 = 1;
				}
			}
			} finally { DebugExitDecision(144); }
			switch (alt144)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2154:13: ( rankSpecifier )=>rsl= rankSpecifierList
				{
				DebugLocation(2155, 16);
				PushFollow(Follow._rankSpecifierList_in_np__type14943);
				rsl=rankSpecifierList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2156, 13);
				if (state.backtracking == 0)
				{
					 value = new ArrayTypeParser(value, rsl, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(144); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__type", 134);
			LeaveRule("np__type", 134);
			LeaveRule_np__type();
		}
		DebugLocation(2158, 4);
		} finally { DebugExitRule(GrammarFileName, "np__type"); }
		return value;

	}
	// $ANTLR end "np__type"

	partial void EnterRule_rankSpecifierList();
	partial void LeaveRule_rankSpecifierList();
	// $ANTLR start "rankSpecifierList"
	// Truss.g:2160:1: rankSpecifierList returns [ImmutableArray<ArrayRankSpecifierSyntax> value] : ( ( rankSpecifier )=>rs= rankSpecifier )+ ;
	[GrammarRule("rankSpecifierList")]
	private ImmutableArray<ArrayRankSpecifierSyntax> rankSpecifierList()
	{
		EnterRule_rankSpecifierList();
		EnterRule("rankSpecifierList", 135);
		TraceIn("rankSpecifierList", 135);
		ImmutableArray<ArrayRankSpecifierSyntax> value = default(ImmutableArray<ArrayRankSpecifierSyntax>);


		ArrayRankSpecifierSyntax rs = default(ArrayRankSpecifierSyntax);


		    var builder = new ImmutableArray<ArrayRankSpecifierSyntax>.Builder();

		try { DebugEnterRule(GrammarFileName, "rankSpecifierList");
		DebugLocation(2160, 4);
		try
		{
			// Truss.g:2164:5: ( ( ( rankSpecifier )=>rs= rankSpecifier )+ )
			DebugEnterAlt(1);
			// Truss.g:2165:9: ( ( rankSpecifier )=>rs= rankSpecifier )+
			{
			DebugLocation(2165, 9);
			// Truss.g:2165:9: ( ( rankSpecifier )=>rs= rankSpecifier )+
			int cnt145=0;
			try { DebugEnterSubRule(145);
			while (true)
			{
				int alt145=2;
				try { DebugEnterDecision(145, false);
				int LA145_1 = input.LA(1);

				if ((LA145_1==OP_BRACKET_OPEN))
				{
					int LA145_2 = input.LA(2);

					if ((LA145_2==OP_BRACKET_CLOSE) && (EvaluatePredicate(synpred19_Truss_fragment)))
					{
						alt145 = 1;
					}


				}


				} finally { DebugExitDecision(145); }
				switch (alt145)
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:2166:13: ( rankSpecifier )=>rs= rankSpecifier
					{
					DebugLocation(2167, 15);
					PushFollow(Follow._rankSpecifier_in_rankSpecifierList15037);
					rs=rankSpecifier();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(2168, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(rs); 
					}

					}
					break;

				default:
					if (cnt145 >= 1)
						goto loop145;

					if (state.backtracking>0) {state.failed=true; return value;}
					EarlyExitException eee145 = new EarlyExitException( 145, input );
					DebugRecognitionException(eee145);
					throw eee145;
				}
				cnt145++;
			}
			loop145:
				;

			} finally { DebugExitSubRule(145); }

			DebugLocation(2170, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rankSpecifierList", 135);
			LeaveRule("rankSpecifierList", 135);
			LeaveRule_rankSpecifierList();
		}
		DebugLocation(2171, 4);
		} finally { DebugExitRule(GrammarFileName, "rankSpecifierList"); }
		return value;

	}
	// $ANTLR end "rankSpecifierList"

	partial void EnterRule_rankSpecifier();
	partial void LeaveRule_rankSpecifier();
	// $ANTLR start "rankSpecifier"
	// Truss.g:2173:1: rankSpecifier returns [ArrayRankSpecifierSyntax value] : OP_BRACKET_OPEN OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )? ;
	[GrammarRule("rankSpecifier")]
	private ArrayRankSpecifierSyntax rankSpecifier()
	{
		EnterRule_rankSpecifier();
		EnterRule("rankSpecifier", 136);
		TraceIn("rankSpecifier", 136);
		ArrayRankSpecifierSyntax value = default(ArrayRankSpecifierSyntax);



		    var start = input.LT(1);
		    bool isTracked = false;

		try { DebugEnterRule(GrammarFileName, "rankSpecifier");
		DebugLocation(2173, 4);
		try
		{
			// Truss.g:2178:5: ( OP_BRACKET_OPEN OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )? )
			DebugEnterAlt(1);
			// Truss.g:2179:9: OP_BRACKET_OPEN OP_BRACKET_CLOSE ( ( OP_CARET )=> OP_CARET )?
			{
			DebugLocation(2179, 9);
			Match(input,OP_BRACKET_OPEN,Follow._OP_BRACKET_OPEN_in_rankSpecifier15106); if (state.failed) return value;
			DebugLocation(2180, 9);
			Match(input,OP_BRACKET_CLOSE,Follow._OP_BRACKET_CLOSE_in_rankSpecifier15116); if (state.failed) return value;
			DebugLocation(2181, 9);
			// Truss.g:2181:9: ( ( OP_CARET )=> OP_CARET )?
			int alt146=2;
			try { DebugEnterSubRule(146);
			try { DebugEnterDecision(146, false);
			int LA146_1 = input.LA(1);

			if ((LA146_1==OP_CARET))
			{
				int LA146_2 = input.LA(2);

				if ((EvaluatePredicate(synpred20_Truss_fragment)))
				{
					alt146 = 1;
				}
			}
			} finally { DebugExitDecision(146); }
			switch (alt146)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2182:13: ( OP_CARET )=> OP_CARET
				{
				DebugLocation(2183, 13);
				Match(input,OP_CARET,Follow._OP_CARET_in_rankSpecifier15159); if (state.failed) return value;
				DebugLocation(2184, 13);
				if (state.backtracking == 0)
				{
					 isTracked = true; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(146); }

			DebugLocation(2186, 9);
			if (state.backtracking == 0)
			{
				 value = new ArrayRankSpecifierSyntax(new OmittedArraySizeExpressionSyntax(Span(start)), isTracked, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("rankSpecifier", 136);
			LeaveRule("rankSpecifier", 136);
			LeaveRule_rankSpecifier();
		}
		DebugLocation(2187, 4);
		} finally { DebugExitRule(GrammarFileName, "rankSpecifier"); }
		return value;

	}
	// $ANTLR end "rankSpecifier"

	partial void EnterRule_np__baseType();
	partial void LeaveRule_np__baseType();
	// $ANTLR start "np__baseType"
	// Truss.g:2189:1: np__baseType returns [TypeParser value] : (pt= np__predefinedType |qn= np__qualifiedName );
	[GrammarRule("np__baseType")]
	private TypeParser np__baseType()
	{
		EnterRule_np__baseType();
		EnterRule("np__baseType", 137);
		TraceIn("np__baseType", 137);
		TypeParser value = default(TypeParser);


		PredefinedType pt = default(PredefinedType);
		NameParser qn = default(NameParser);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "np__baseType");
		DebugLocation(2189, 4);
		try
		{
			// Truss.g:2193:5: (pt= np__predefinedType |qn= np__qualifiedName )
			int alt147=2;
			try { DebugEnterDecision(147, false);
			int LA147_1 = input.LA(1);

			if ((LA147_1==KW_BOOL||LA147_1==KW_BYTE||LA147_1==KW_CHAR||LA147_1==KW_DECIMAL||LA147_1==KW_DOUBLE||LA147_1==KW_FLOAT||LA147_1==KW_INT||LA147_1==KW_LONG||LA147_1==KW_OBJECT||LA147_1==KW_SBYTE||LA147_1==KW_SHORT||LA147_1==KW_STRING||(LA147_1>=KW_UINT && LA147_1<=KW_USHORT)||LA147_1==KW_VOID))
			{
				alt147 = 1;
			}
			else if ((LA147_1==IDENTIFIER))
			{
				alt147 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 147, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(147); }
			switch (alt147)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2194:9: pt= np__predefinedType
				{
				DebugLocation(2194, 11);
				PushFollow(Follow._np__predefinedType_in_np__baseType15230);
				pt=np__predefinedType();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2195, 9);
				if (state.backtracking == 0)
				{
					 value = new PredefinedTypeParser(pt, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2197:9: qn= np__qualifiedName
				{
				DebugLocation(2197, 11);
				PushFollow(Follow._np__qualifiedName_in_np__baseType15258);
				qn=np__qualifiedName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2198, 9);
				if (state.backtracking == 0)
				{
					 value = qn; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__baseType", 137);
			LeaveRule("np__baseType", 137);
			LeaveRule_np__baseType();
		}
		DebugLocation(2199, 4);
		} finally { DebugExitRule(GrammarFileName, "np__baseType"); }
		return value;

	}
	// $ANTLR end "np__baseType"

	partial void EnterRule_np__qualifiedName();
	partial void LeaveRule_np__qualifiedName();
	// $ANTLR start "np__qualifiedName"
	// Truss.g:2201:1: np__qualifiedName returns [NameParser value] : (idn= np__identifierName OP_COLON_COLON )? sn= np__simpleName ( OP_DOT sn= np__simpleName )* ;
	[GrammarRule("np__qualifiedName")]
	private NameParser np__qualifiedName()
	{
		EnterRule_np__qualifiedName();
		EnterRule("np__qualifiedName", 138);
		TraceIn("np__qualifiedName", 138);
		NameParser value = default(NameParser);


		IdentifierNameParser idn = default(IdentifierNameParser);
		SimpleNameParser sn = default(SimpleNameParser);


		    var start = input.LT(1);
		    IdentifierNameParser alias = null;

		try { DebugEnterRule(GrammarFileName, "np__qualifiedName");
		DebugLocation(2201, 4);
		try
		{
			// Truss.g:2206:5: ( (idn= np__identifierName OP_COLON_COLON )? sn= np__simpleName ( OP_DOT sn= np__simpleName )* )
			DebugEnterAlt(1);
			// Truss.g:2207:9: (idn= np__identifierName OP_COLON_COLON )? sn= np__simpleName ( OP_DOT sn= np__simpleName )*
			{
			DebugLocation(2207, 9);
			// Truss.g:2207:9: (idn= np__identifierName OP_COLON_COLON )?
			int alt148=2;
			try { DebugEnterSubRule(148);
			try { DebugEnterDecision(148, false);
			int LA148_1 = input.LA(1);

			if ((LA148_1==IDENTIFIER))
			{
				int LA148_2 = input.LA(2);

				if ((LA148_2==OP_COLON_COLON))
				{
					alt148 = 1;
				}
			}
			} finally { DebugExitDecision(148); }
			switch (alt148)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2208:13: idn= np__identifierName OP_COLON_COLON
				{
				DebugLocation(2208, 16);
				PushFollow(Follow._np__identifierName_in_np__qualifiedName15318);
				idn=np__identifierName();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2208, 36);
				Match(input,OP_COLON_COLON,Follow._OP_COLON_COLON_in_np__qualifiedName15320); if (state.failed) return value;
				DebugLocation(2209, 13);
				if (state.backtracking == 0)
				{
					 alias = idn; 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(148); }

			DebugLocation(2211, 11);
			PushFollow(Follow._np__simpleName_in_np__qualifiedName15357);
			sn=np__simpleName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2212, 9);
			if (state.backtracking == 0)
			{

				            if (alias != null) {
				                value = new AliasQualifiedNameParser(alias, sn, Span(start));
				            } else {
				                value = sn;
				            }
				        
			}
			DebugLocation(2219, 9);
			// Truss.g:2219:9: ( OP_DOT sn= np__simpleName )*
			try { DebugEnterSubRule(149);
			while (true)
			{
				int alt149=2;
				try { DebugEnterDecision(149, false);
				int LA149_1 = input.LA(1);

				if ((LA149_1==OP_DOT))
				{
					int LA149_2 = input.LA(2);

					if ((LA149_2==IDENTIFIER))
					{
						alt149 = 1;
					}


				}


				} finally { DebugExitDecision(149); }
				switch ( alt149 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:2220:13: OP_DOT sn= np__simpleName
					{
					DebugLocation(2220, 13);
					Match(input,OP_DOT,Follow._OP_DOT_in_np__qualifiedName15391); if (state.failed) return value;
					DebugLocation(2221, 15);
					PushFollow(Follow._np__simpleName_in_np__qualifiedName15407);
					sn=np__simpleName();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(2222, 13);
					if (state.backtracking == 0)
					{
						 value = new QualifiedNameParser(value, sn, Span(start)); 
					}

					}
					break;

				default:
					goto loop149;
				}
			}

			loop149:
				;

			} finally { DebugExitSubRule(149); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__qualifiedName", 138);
			LeaveRule("np__qualifiedName", 138);
			LeaveRule_np__qualifiedName();
		}
		DebugLocation(2224, 4);
		} finally { DebugExitRule(GrammarFileName, "np__qualifiedName"); }
		return value;

	}
	// $ANTLR end "np__qualifiedName"

	partial void EnterRule_np__simpleName();
	partial void LeaveRule_np__simpleName();
	// $ANTLR start "np__simpleName"
	// Truss.g:2226:1: np__simpleName returns [SimpleNameParser value] : idn= np__identifierName ( ( OP_LESS_THAN )=>gta= np__genericTypeArguments )? ;
	[GrammarRule("np__simpleName")]
	private SimpleNameParser np__simpleName()
	{
		EnterRule_np__simpleName();
		EnterRule("np__simpleName", 139);
		TraceIn("np__simpleName", 139);
		SimpleNameParser value = default(SimpleNameParser);


		IdentifierNameParser idn = default(IdentifierNameParser);
		ImmutableArray<TypeParser> gta = default(ImmutableArray<TypeParser>);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "np__simpleName");
		DebugLocation(2226, 4);
		try
		{
			// Truss.g:2230:5: (idn= np__identifierName ( ( OP_LESS_THAN )=>gta= np__genericTypeArguments )? )
			DebugEnterAlt(1);
			// Truss.g:2231:9: idn= np__identifierName ( ( OP_LESS_THAN )=>gta= np__genericTypeArguments )?
			{
			DebugLocation(2231, 12);
			PushFollow(Follow._np__identifierName_in_np__simpleName15468);
			idn=np__identifierName();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2232, 9);
			if (state.backtracking == 0)
			{
				 value = idn; 
			}
			DebugLocation(2233, 9);
			// Truss.g:2233:9: ( ( OP_LESS_THAN )=>gta= np__genericTypeArguments )?
			int alt150=2;
			try { DebugEnterSubRule(150);
			try { DebugEnterDecision(150, false);
			int LA150_1 = input.LA(1);

			if ((LA150_1==OP_LESS_THAN))
			{
				int LA150_2 = input.LA(2);

				if ((EvaluatePredicate(synpred21_Truss_fragment)))
				{
					alt150 = 1;
				}
			}
			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2234:13: ( OP_LESS_THAN )=>gta= np__genericTypeArguments
				{
				DebugLocation(2235, 16);
				PushFollow(Follow._np__genericTypeArguments_in_np__simpleName15523);
				gta=np__genericTypeArguments();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2236, 13);
				if (state.backtracking == 0)
				{
					 value = new GenericNameParser(Errors, idn.Identifier, gta, Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(150); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__simpleName", 139);
			LeaveRule("np__simpleName", 139);
			LeaveRule_np__simpleName();
		}
		DebugLocation(2238, 4);
		} finally { DebugExitRule(GrammarFileName, "np__simpleName"); }
		return value;

	}
	// $ANTLR end "np__simpleName"

	partial void EnterRule_np__genericTypeArguments();
	partial void LeaveRule_np__genericTypeArguments();
	// $ANTLR start "np__genericTypeArguments"
	// Truss.g:2240:1: np__genericTypeArguments returns [ImmutableArray<TypeParser> value] : OP_LESS_THAN gta= np__genericTypeArgument ( OP_COMMA gta= np__genericTypeArgument )* op_GREATER_THAN_ANY ;
	[GrammarRule("np__genericTypeArguments")]
	private ImmutableArray<TypeParser> np__genericTypeArguments()
	{
		EnterRule_np__genericTypeArguments();
		EnterRule("np__genericTypeArguments", 140);
		TraceIn("np__genericTypeArguments", 140);
		ImmutableArray<TypeParser> value = default(ImmutableArray<TypeParser>);


		TypeParser gta = default(TypeParser);


		    var builder = new ImmutableArray<TypeParser>.Builder();

		try { DebugEnterRule(GrammarFileName, "np__genericTypeArguments");
		DebugLocation(2240, 4);
		try
		{
			// Truss.g:2244:5: ( OP_LESS_THAN gta= np__genericTypeArgument ( OP_COMMA gta= np__genericTypeArgument )* op_GREATER_THAN_ANY )
			DebugEnterAlt(1);
			// Truss.g:2245:9: OP_LESS_THAN gta= np__genericTypeArgument ( OP_COMMA gta= np__genericTypeArgument )* op_GREATER_THAN_ANY
			{
			DebugLocation(2245, 9);
			Match(input,OP_LESS_THAN,Follow._OP_LESS_THAN_in_np__genericTypeArguments15582); if (state.failed) return value;
			DebugLocation(2246, 12);
			PushFollow(Follow._np__genericTypeArgument_in_np__genericTypeArguments15594);
			gta=np__genericTypeArgument();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2247, 9);
			if (state.backtracking == 0)
			{
				 builder.Add(gta); 
			}
			DebugLocation(2248, 9);
			// Truss.g:2248:9: ( OP_COMMA gta= np__genericTypeArgument )*
			try { DebugEnterSubRule(151);
			while (true)
			{
				int alt151=2;
				try { DebugEnterDecision(151, false);
				int LA151_1 = input.LA(1);

				if ((LA151_1==OP_COMMA))
				{
					alt151 = 1;
				}


				} finally { DebugExitDecision(151); }
				switch ( alt151 )
				{
				case 1:
					DebugEnterAlt(1);
					// Truss.g:2249:13: OP_COMMA gta= np__genericTypeArgument
					{
					DebugLocation(2249, 13);
					Match(input,OP_COMMA,Follow._OP_COMMA_in_np__genericTypeArguments15628); if (state.failed) return value;
					DebugLocation(2250, 16);
					PushFollow(Follow._np__genericTypeArgument_in_np__genericTypeArguments15644);
					gta=np__genericTypeArgument();
					PopFollow();
					if (state.failed) return value;
					DebugLocation(2251, 13);
					if (state.backtracking == 0)
					{
						 builder.Add(gta); 
					}

					}
					break;

				default:
					goto loop151;
				}
			}

			loop151:
				;

			} finally { DebugExitSubRule(151); }

			DebugLocation(2259, 9);
			PushFollow(Follow._op_GREATER_THAN_ANY_in_np__genericTypeArguments15733);
			op_GREATER_THAN_ANY();
			PopFollow();
			if (state.failed) return value;
			DebugLocation(2260, 9);
			if (state.backtracking == 0)
			{
				 value = builder.Build(); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__genericTypeArguments", 140);
			LeaveRule("np__genericTypeArguments", 140);
			LeaveRule_np__genericTypeArguments();
		}
		DebugLocation(2261, 4);
		} finally { DebugExitRule(GrammarFileName, "np__genericTypeArguments"); }
		return value;

	}
	// $ANTLR end "np__genericTypeArguments"

	partial void EnterRule_np__genericTypeArgument();
	partial void LeaveRule_np__genericTypeArgument();
	// $ANTLR start "np__genericTypeArgument"
	// Truss.g:2263:1: np__genericTypeArgument returns [TypeParser value] : (all= attributeListList tpv= typeParameterVariance t= np__type |) ;
	[GrammarRule("np__genericTypeArgument")]
	private TypeParser np__genericTypeArgument()
	{
		EnterRule_np__genericTypeArgument();
		EnterRule("np__genericTypeArgument", 141);
		TraceIn("np__genericTypeArgument", 141);
		TypeParser value = default(TypeParser);


		ImmutableArray<AttributeListSyntax> all = default(ImmutableArray<AttributeListSyntax>);
		Variance tpv = default(Variance);
		TypeParser t = default(TypeParser);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "np__genericTypeArgument");
		DebugLocation(2263, 4);
		try
		{
			// Truss.g:2267:5: ( (all= attributeListList tpv= typeParameterVariance t= np__type |) )
			DebugEnterAlt(1);
			// Truss.g:2268:9: (all= attributeListList tpv= typeParameterVariance t= np__type |)
			{
			DebugLocation(2268, 9);
			// Truss.g:2268:9: (all= attributeListList tpv= typeParameterVariance t= np__type |)
			int alt152=2;
			try { DebugEnterSubRule(152);
			try { DebugEnterDecision(152, false);
			int LA152_1 = input.LA(1);

			if ((LA152_1==IDENTIFIER||LA152_1==KW_ABSTRACT||LA152_1==KW_ASYNC||LA152_1==KW_BOOL||LA152_1==KW_BYTE||(LA152_1>=KW_CHAR && LA152_1<=KW_CONSUMES)||LA152_1==KW_DECIMAL||LA152_1==KW_DELEGATE||LA152_1==KW_DOUBLE||(LA152_1>=KW_ENUM && LA152_1<=KW_EXTERN)||LA152_1==KW_FLOAT||LA152_1==KW_IMPLICIT||(LA152_1>=KW_IN && LA152_1<=KW_INTERNAL)||LA152_1==KW_LONG||LA152_1==KW_NEW||LA152_1==KW_OBJECT||(LA152_1>=KW_OUT && LA152_1<=KW_REF)||(LA152_1>=KW_SBYTE && LA152_1<=KW_SHORT)||(LA152_1>=KW_STATIC && LA152_1<=KW_STRUCT)||LA152_1==KW_THIS||(LA152_1>=KW_UINT && LA152_1<=KW_USHORT)||(LA152_1>=KW_VAR && LA152_1<=KW_VOLATILE)||LA152_1==OP_BRACKET_OPEN||LA152_1==OP_TILDE))
			{
				alt152 = 1;
			}
			else if ((LA152_1==OP_COMMA||LA152_1==OP_GREATER_THAN||(LA152_1>=OP_GREATER_THAN_GREATER_THAN_FIRST && LA152_1<=OP_GREATER_THAN_GREATER_THAN_SECOND)))
			{
				alt152 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return value;}
				NoViableAltException nvae = new NoViableAltException("", 152, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(152); }
			switch (alt152)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2269:13: all= attributeListList tpv= typeParameterVariance t= np__type
				{
				DebugLocation(2269, 16);
				PushFollow(Follow._attributeListList_in_np__genericTypeArgument15793);
				all=attributeListList();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2270, 16);
				PushFollow(Follow._typeParameterVariance_in_np__genericTypeArgument15809);
				tpv=typeParameterVariance();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2271, 14);
				PushFollow(Follow._np__type_in_np__genericTypeArgument15825);
				t=np__type();
				PopFollow();
				if (state.failed) return value;
				DebugLocation(2272, 13);
				if (state.backtracking == 0)
				{
					 value = new TypeParameterParser(Errors, all, tpv, t, Span(start)); 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2274:13: 
				{
				DebugLocation(2274, 13);
				if (state.backtracking == 0)
				{
					 value = new OmittedTypeArgumentParser(Span(start)); 
				}

				}
				break;

			}
			} finally { DebugExitSubRule(152); }


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__genericTypeArgument", 141);
			LeaveRule("np__genericTypeArgument", 141);
			LeaveRule_np__genericTypeArgument();
		}
		DebugLocation(2276, 4);
		} finally { DebugExitRule(GrammarFileName, "np__genericTypeArgument"); }
		return value;

	}
	// $ANTLR end "np__genericTypeArgument"

	partial void EnterRule_np__identifierName();
	partial void LeaveRule_np__identifierName();
	// $ANTLR start "np__identifierName"
	// Truss.g:2278:1: np__identifierName returns [IdentifierNameParser value] : i= IDENTIFIER ;
	[GrammarRule("np__identifierName")]
	private IdentifierNameParser np__identifierName()
	{
		EnterRule_np__identifierName();
		EnterRule("np__identifierName", 142);
		TraceIn("np__identifierName", 142);
		IdentifierNameParser value = default(IdentifierNameParser);


		IToken i = default(IToken);


		    var start = input.LT(1);

		try { DebugEnterRule(GrammarFileName, "np__identifierName");
		DebugLocation(2278, 4);
		try
		{
			// Truss.g:2282:5: (i= IDENTIFIER )
			DebugEnterAlt(1);
			// Truss.g:2283:9: i= IDENTIFIER
			{
			DebugLocation(2283, 10);
			i=(IToken)Match(input,IDENTIFIER,Follow._IDENTIFIER_in_np__identifierName15909); if (state.failed) return value;
			DebugLocation(2284, 9);
			if (state.backtracking == 0)
			{
				 value = new IdentifierNameParser(i.Text, Span(start)); 
			}

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__identifierName", 142);
			LeaveRule("np__identifierName", 142);
			LeaveRule_np__identifierName();
		}
		DebugLocation(2285, 4);
		} finally { DebugExitRule(GrammarFileName, "np__identifierName"); }
		return value;

	}
	// $ANTLR end "np__identifierName"

	partial void EnterRule_np__predefinedType();
	partial void LeaveRule_np__predefinedType();
	// $ANTLR start "np__predefinedType"
	// Truss.g:2287:1: np__predefinedType returns [PredefinedType value] : ( KW_BOOL | KW_BYTE | KW_CHAR | KW_DECIMAL | KW_DOUBLE | KW_FLOAT | KW_INT | KW_LONG | KW_OBJECT | KW_SBYTE | KW_SHORT | KW_STRING | KW_UINT | KW_ULONG | KW_USHORT | KW_VOID );
	[GrammarRule("np__predefinedType")]
	private PredefinedType np__predefinedType()
	{
		EnterRule_np__predefinedType();
		EnterRule("np__predefinedType", 143);
		TraceIn("np__predefinedType", 143);
		PredefinedType value = default(PredefinedType);


		try { DebugEnterRule(GrammarFileName, "np__predefinedType");
		DebugLocation(2287, 4);
		try
		{
			// Truss.g:2288:5: ( KW_BOOL | KW_BYTE | KW_CHAR | KW_DECIMAL | KW_DOUBLE | KW_FLOAT | KW_INT | KW_LONG | KW_OBJECT | KW_SBYTE | KW_SHORT | KW_STRING | KW_UINT | KW_ULONG | KW_USHORT | KW_VOID )
			int alt153=16;
			try { DebugEnterDecision(153, false);
			switch (input.LA(1))
			{
			case KW_BOOL:
				{
				alt153 = 1;
				}
				break;
			case KW_BYTE:
				{
				alt153 = 2;
				}
				break;
			case KW_CHAR:
				{
				alt153 = 3;
				}
				break;
			case KW_DECIMAL:
				{
				alt153 = 4;
				}
				break;
			case KW_DOUBLE:
				{
				alt153 = 5;
				}
				break;
			case KW_FLOAT:
				{
				alt153 = 6;
				}
				break;
			case KW_INT:
				{
				alt153 = 7;
				}
				break;
			case KW_LONG:
				{
				alt153 = 8;
				}
				break;
			case KW_OBJECT:
				{
				alt153 = 9;
				}
				break;
			case KW_SBYTE:
				{
				alt153 = 10;
				}
				break;
			case KW_SHORT:
				{
				alt153 = 11;
				}
				break;
			case KW_STRING:
				{
				alt153 = 12;
				}
				break;
			case KW_UINT:
				{
				alt153 = 13;
				}
				break;
			case KW_ULONG:
				{
				alt153 = 14;
				}
				break;
			case KW_USHORT:
				{
				alt153 = 15;
				}
				break;
			case KW_VOID:
				{
				alt153 = 16;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return value;}
					NoViableAltException nvae = new NoViableAltException("", 153, 0, input, 1);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(153); }
			switch (alt153)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:2288:7: KW_BOOL
				{
				DebugLocation(2288, 7);
				Match(input,KW_BOOL,Follow._KW_BOOL_in_np__predefinedType15940); if (state.failed) return value;
				DebugLocation(2288, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Bool; 
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// Truss.g:2289:7: KW_BYTE
				{
				DebugLocation(2289, 7);
				Match(input,KW_BYTE,Follow._KW_BYTE_in_np__predefinedType15950); if (state.failed) return value;
				DebugLocation(2289, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Byte; 
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// Truss.g:2290:7: KW_CHAR
				{
				DebugLocation(2290, 7);
				Match(input,KW_CHAR,Follow._KW_CHAR_in_np__predefinedType15960); if (state.failed) return value;
				DebugLocation(2290, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Char; 
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// Truss.g:2291:7: KW_DECIMAL
				{
				DebugLocation(2291, 7);
				Match(input,KW_DECIMAL,Follow._KW_DECIMAL_in_np__predefinedType15970); if (state.failed) return value;
				DebugLocation(2291, 18);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Decimal; 
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// Truss.g:2292:7: KW_DOUBLE
				{
				DebugLocation(2292, 7);
				Match(input,KW_DOUBLE,Follow._KW_DOUBLE_in_np__predefinedType15980); if (state.failed) return value;
				DebugLocation(2292, 17);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Double; 
				}

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// Truss.g:2293:7: KW_FLOAT
				{
				DebugLocation(2293, 7);
				Match(input,KW_FLOAT,Follow._KW_FLOAT_in_np__predefinedType15990); if (state.failed) return value;
				DebugLocation(2293, 16);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Float; 
				}

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// Truss.g:2294:7: KW_INT
				{
				DebugLocation(2294, 7);
				Match(input,KW_INT,Follow._KW_INT_in_np__predefinedType16000); if (state.failed) return value;
				DebugLocation(2294, 14);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Int; 
				}

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// Truss.g:2295:7: KW_LONG
				{
				DebugLocation(2295, 7);
				Match(input,KW_LONG,Follow._KW_LONG_in_np__predefinedType16010); if (state.failed) return value;
				DebugLocation(2295, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Long; 
				}

				}
				break;
			case 9:
				DebugEnterAlt(9);
				// Truss.g:2296:7: KW_OBJECT
				{
				DebugLocation(2296, 7);
				Match(input,KW_OBJECT,Follow._KW_OBJECT_in_np__predefinedType16020); if (state.failed) return value;
				DebugLocation(2296, 17);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Object; 
				}

				}
				break;
			case 10:
				DebugEnterAlt(10);
				// Truss.g:2297:7: KW_SBYTE
				{
				DebugLocation(2297, 7);
				Match(input,KW_SBYTE,Follow._KW_SBYTE_in_np__predefinedType16030); if (state.failed) return value;
				DebugLocation(2297, 16);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.SByte; 
				}

				}
				break;
			case 11:
				DebugEnterAlt(11);
				// Truss.g:2298:7: KW_SHORT
				{
				DebugLocation(2298, 7);
				Match(input,KW_SHORT,Follow._KW_SHORT_in_np__predefinedType16040); if (state.failed) return value;
				DebugLocation(2298, 16);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Short; 
				}

				}
				break;
			case 12:
				DebugEnterAlt(12);
				// Truss.g:2299:7: KW_STRING
				{
				DebugLocation(2299, 7);
				Match(input,KW_STRING,Follow._KW_STRING_in_np__predefinedType16050); if (state.failed) return value;
				DebugLocation(2299, 17);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.String; 
				}

				}
				break;
			case 13:
				DebugEnterAlt(13);
				// Truss.g:2300:7: KW_UINT
				{
				DebugLocation(2300, 7);
				Match(input,KW_UINT,Follow._KW_UINT_in_np__predefinedType16060); if (state.failed) return value;
				DebugLocation(2300, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.UInt; 
				}

				}
				break;
			case 14:
				DebugEnterAlt(14);
				// Truss.g:2301:7: KW_ULONG
				{
				DebugLocation(2301, 7);
				Match(input,KW_ULONG,Follow._KW_ULONG_in_np__predefinedType16070); if (state.failed) return value;
				DebugLocation(2301, 16);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.ULong; 
				}

				}
				break;
			case 15:
				DebugEnterAlt(15);
				// Truss.g:2302:7: KW_USHORT
				{
				DebugLocation(2302, 7);
				Match(input,KW_USHORT,Follow._KW_USHORT_in_np__predefinedType16080); if (state.failed) return value;
				DebugLocation(2302, 17);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.UShort; 
				}

				}
				break;
			case 16:
				DebugEnterAlt(16);
				// Truss.g:2303:7: KW_VOID
				{
				DebugLocation(2303, 7);
				Match(input,KW_VOID,Follow._KW_VOID_in_np__predefinedType16090); if (state.failed) return value;
				DebugLocation(2303, 15);
				if (state.backtracking == 0)
				{
					 value = PredefinedType.Void; 
				}

				}
				break;

			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("np__predefinedType", 143);
			LeaveRule("np__predefinedType", 143);
			LeaveRule_np__predefinedType();
		}
		DebugLocation(2304, 4);
		} finally { DebugExitRule(GrammarFileName, "np__predefinedType"); }
		return value;

	}
	// $ANTLR end "np__predefinedType"

	partial void EnterRule_op_GREATER_THAN_GREATER_THAN();
	partial void LeaveRule_op_GREATER_THAN_GREATER_THAN();
	// $ANTLR start "op_GREATER_THAN_GREATER_THAN"
	// Truss.g:2452:1: op_GREATER_THAN_GREATER_THAN : OP_GREATER_THAN_GREATER_THAN_FIRST OP_GREATER_THAN_GREATER_THAN_SECOND ;
	[GrammarRule("op_GREATER_THAN_GREATER_THAN")]
	private void op_GREATER_THAN_GREATER_THAN()
	{
		EnterRule_op_GREATER_THAN_GREATER_THAN();
		EnterRule("op_GREATER_THAN_GREATER_THAN", 144);
		TraceIn("op_GREATER_THAN_GREATER_THAN", 144);
		try { DebugEnterRule(GrammarFileName, "op_GREATER_THAN_GREATER_THAN");
		DebugLocation(2452, 102);
		try
		{
			// Truss.g:2452:30: ( OP_GREATER_THAN_GREATER_THAN_FIRST OP_GREATER_THAN_GREATER_THAN_SECOND )
			DebugEnterAlt(1);
			// Truss.g:2452:32: OP_GREATER_THAN_GREATER_THAN_FIRST OP_GREATER_THAN_GREATER_THAN_SECOND
			{
			DebugLocation(2452, 32);
			Match(input,OP_GREATER_THAN_GREATER_THAN_FIRST,Follow._OP_GREATER_THAN_GREATER_THAN_FIRST_in_op_GREATER_THAN_GREATER_THAN17158); if (state.failed) return;
			DebugLocation(2452, 67);
			Match(input,OP_GREATER_THAN_GREATER_THAN_SECOND,Follow._OP_GREATER_THAN_GREATER_THAN_SECOND_in_op_GREATER_THAN_GREATER_THAN17160); if (state.failed) return;

			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("op_GREATER_THAN_GREATER_THAN", 144);
			LeaveRule("op_GREATER_THAN_GREATER_THAN", 144);
			LeaveRule_op_GREATER_THAN_GREATER_THAN();
		}
		DebugLocation(2452, 102);
		} finally { DebugExitRule(GrammarFileName, "op_GREATER_THAN_GREATER_THAN"); }
		return;

	}
	// $ANTLR end "op_GREATER_THAN_GREATER_THAN"

	partial void EnterRule_op_GREATER_THAN_ANY();
	partial void LeaveRule_op_GREATER_THAN_ANY();
	// $ANTLR start "op_GREATER_THAN_ANY"
	// Truss.g:2453:1: op_GREATER_THAN_ANY : ( OP_GREATER_THAN | OP_GREATER_THAN_GREATER_THAN_FIRST | OP_GREATER_THAN_GREATER_THAN_SECOND );
	[GrammarRule("op_GREATER_THAN_ANY")]
	private void op_GREATER_THAN_ANY()
	{
		EnterRule_op_GREATER_THAN_ANY();
		EnterRule("op_GREATER_THAN_ANY", 145);
		TraceIn("op_GREATER_THAN_ANY", 145);
		try { DebugEnterRule(GrammarFileName, "op_GREATER_THAN_ANY");
		DebugLocation(2453, 113);
		try
		{
			// Truss.g:2453:21: ( OP_GREATER_THAN | OP_GREATER_THAN_GREATER_THAN_FIRST | OP_GREATER_THAN_GREATER_THAN_SECOND )
			DebugEnterAlt(1);
			// Truss.g:
			{
			DebugLocation(2453, 21);
			if (input.LA(1)==OP_GREATER_THAN||(input.LA(1)>=OP_GREATER_THAN_GREATER_THAN_FIRST && input.LA(1)<=OP_GREATER_THAN_GREATER_THAN_SECOND))
			{
				input.Consume();
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		}
		finally
		{
			TraceOut("op_GREATER_THAN_ANY", 145);
			LeaveRule("op_GREATER_THAN_ANY", 145);
			LeaveRule_op_GREATER_THAN_ANY();
		}
		DebugLocation(2453, 113);
		} finally { DebugExitRule(GrammarFileName, "op_GREATER_THAN_ANY"); }
		return;

	}
	// $ANTLR end "op_GREATER_THAN_ANY"

	partial void EnterRule_synpred1_Truss_fragment();
	partial void LeaveRule_synpred1_Truss_fragment();

	// $ANTLR start synpred1_Truss
	public void synpred1_Truss_fragment()
	{
		EnterRule_synpred1_Truss_fragment();
		EnterRule("synpred1_Truss_fragment", 146);
		TraceIn("synpred1_Truss_fragment", 146);
		try
		{
			// Truss.g:47:13: ( assemblyAttributeHeadScan )
			DebugEnterAlt(1);
			// Truss.g:47:15: assemblyAttributeHeadScan
			{
			DebugLocation(47, 15);
			PushFollow(Follow._assemblyAttributeHeadScan_in_synpred1_Truss145);
			assemblyAttributeHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_Truss_fragment", 146);
			LeaveRule("synpred1_Truss_fragment", 146);
			LeaveRule_synpred1_Truss_fragment();
		}
	}
	// $ANTLR end synpred1_Truss

	partial void EnterRule_synpred2_Truss_fragment();
	partial void LeaveRule_synpred2_Truss_fragment();

	// $ANTLR start synpred2_Truss
	public void synpred2_Truss_fragment()
	{
		EnterRule_synpred2_Truss_fragment();
		EnterRule("synpred2_Truss_fragment", 147);
		TraceIn("synpred2_Truss_fragment", 147);
		try
		{
			// Truss.g:178:13: ( identifierName OP_EQUALS )
			DebugEnterAlt(1);
			// Truss.g:178:15: identifierName OP_EQUALS
			{
			DebugLocation(178, 15);
			PushFollow(Follow._identifierName_in_synpred2_Truss1282);
			identifierName();
			PopFollow();
			if (state.failed) return;
			DebugLocation(178, 30);
			Match(input,OP_EQUALS,Follow._OP_EQUALS_in_synpred2_Truss1284); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_Truss_fragment", 147);
			LeaveRule("synpred2_Truss_fragment", 147);
			LeaveRule_synpred2_Truss_fragment();
		}
	}
	// $ANTLR end synpred2_Truss

	partial void EnterRule_synpred3_Truss_fragment();
	partial void LeaveRule_synpred3_Truss_fragment();

	// $ANTLR start synpred3_Truss
	public void synpred3_Truss_fragment()
	{
		EnterRule_synpred3_Truss_fragment();
		EnterRule("synpred3_Truss_fragment", 148);
		TraceIn("synpred3_Truss_fragment", 148);
		try
		{
			// Truss.g:522:9: ( constructorDeclarationHeadScan )
			DebugEnterAlt(1);
			// Truss.g:522:11: constructorDeclarationHeadScan
			{
			DebugLocation(522, 11);
			PushFollow(Follow._constructorDeclarationHeadScan_in_synpred3_Truss3922);
			constructorDeclarationHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred3_Truss_fragment", 148);
			LeaveRule("synpred3_Truss_fragment", 148);
			LeaveRule_synpred3_Truss_fragment();
		}
	}
	// $ANTLR end synpred3_Truss

	partial void EnterRule_synpred4_Truss_fragment();
	partial void LeaveRule_synpred4_Truss_fragment();

	// $ANTLR start synpred4_Truss
	public void synpred4_Truss_fragment()
	{
		EnterRule_synpred4_Truss_fragment();
		EnterRule("synpred4_Truss_fragment", 149);
		TraceIn("synpred4_Truss_fragment", 149);
		try
		{
			// Truss.g:565:9: ( variableDeclarationWithoutType OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:565:11: variableDeclarationWithoutType OP_SEMICOLON
			{
			DebugLocation(565, 11);
			PushFollow(Follow._variableDeclarationWithoutType_in_synpred4_Truss4221);
			variableDeclarationWithoutType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(565, 42);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_synpred4_Truss4223); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred4_Truss_fragment", 149);
			LeaveRule("synpred4_Truss_fragment", 149);
			LeaveRule_synpred4_Truss_fragment();
		}
	}
	// $ANTLR end synpred4_Truss

	partial void EnterRule_synpred5_Truss_fragment();
	partial void LeaveRule_synpred5_Truss_fragment();

	// $ANTLR start synpred5_Truss
	public void synpred5_Truss_fragment()
	{
		EnterRule_synpred5_Truss_fragment();
		EnterRule("synpred5_Truss_fragment", 150);
		TraceIn("synpred5_Truss_fragment", 150);
		try
		{
			// Truss.g:577:9: ( ( name OP_DOT )? KW_THIS )
			DebugEnterAlt(1);
			// Truss.g:577:11: ( name OP_DOT )? KW_THIS
			{
			DebugLocation(577, 11);
			// Truss.g:577:11: ( name OP_DOT )?
			int alt154=2;
			try { DebugEnterSubRule(154);
			try { DebugEnterDecision(154, false);
			int LA154_1 = input.LA(1);

			if ((LA154_1==IDENTIFIER))
			{
				alt154 = 1;
			}
			} finally { DebugExitDecision(154); }
			switch (alt154)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:577:13: name OP_DOT
				{
				DebugLocation(577, 13);
				PushFollow(Follow._name_in_synpred5_Truss4278);
				name();
				PopFollow();
				if (state.failed) return;
				DebugLocation(577, 18);
				Match(input,OP_DOT,Follow._OP_DOT_in_synpred5_Truss4280); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(154); }

			DebugLocation(577, 28);
			Match(input,KW_THIS,Follow._KW_THIS_in_synpred5_Truss4285); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred5_Truss_fragment", 150);
			LeaveRule("synpred5_Truss_fragment", 150);
			LeaveRule_synpred5_Truss_fragment();
		}
	}
	// $ANTLR end synpred5_Truss

	partial void EnterRule_synpred6_Truss_fragment();
	partial void LeaveRule_synpred6_Truss_fragment();

	// $ANTLR start synpred6_Truss
	public void synpred6_Truss_fragment()
	{
		EnterRule_synpred6_Truss_fragment();
		EnterRule("synpred6_Truss_fragment", 151);
		TraceIn("synpred6_Truss_fragment", 151);
		try
		{
			// Truss.g:660:13: ( variableDeclaration OP_SEMICOLON )
			DebugEnterAlt(1);
			// Truss.g:660:15: variableDeclaration OP_SEMICOLON
			{
			DebugLocation(660, 15);
			PushFollow(Follow._variableDeclaration_in_synpred6_Truss4675);
			variableDeclaration();
			PopFollow();
			if (state.failed) return;
			DebugLocation(660, 35);
			Match(input,OP_SEMICOLON,Follow._OP_SEMICOLON_in_synpred6_Truss4677); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred6_Truss_fragment", 151);
			LeaveRule("synpred6_Truss_fragment", 151);
			LeaveRule_synpred6_Truss_fragment();
		}
	}
	// $ANTLR end synpred6_Truss

	partial void EnterRule_synpred7_Truss_fragment();
	partial void LeaveRule_synpred7_Truss_fragment();

	// $ANTLR start synpred7_Truss
	public void synpred7_Truss_fragment()
	{
		EnterRule_synpred7_Truss_fragment();
		EnterRule("synpred7_Truss_fragment", 152);
		TraceIn("synpred7_Truss_fragment", 152);
		try
		{
			// Truss.g:877:7: ( ( KW_READONLY )? variableDeclarationHeadScan )
			DebugEnterAlt(1);
			// Truss.g:877:9: ( KW_READONLY )? variableDeclarationHeadScan
			{
			DebugLocation(877, 9);
			// Truss.g:877:9: ( KW_READONLY )?
			int alt155=2;
			try { DebugEnterSubRule(155);
			try { DebugEnterDecision(155, false);
			int LA155_1 = input.LA(1);

			if ((LA155_1==KW_READONLY))
			{
				alt155 = 1;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// Truss.g:877:9: KW_READONLY
				{
				DebugLocation(877, 9);
				Match(input,KW_READONLY,Follow._KW_READONLY_in_synpred7_Truss5876); if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(155); }

			DebugLocation(877, 22);
			PushFollow(Follow._variableDeclarationHeadScan_in_synpred7_Truss5879);
			variableDeclarationHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred7_Truss_fragment", 152);
			LeaveRule("synpred7_Truss_fragment", 152);
			LeaveRule_synpred7_Truss_fragment();
		}
	}
	// $ANTLR end synpred7_Truss

	partial void EnterRule_synpred8_Truss_fragment();
	partial void LeaveRule_synpred8_Truss_fragment();

	// $ANTLR start synpred8_Truss
	public void synpred8_Truss_fragment()
	{
		EnterRule_synpred8_Truss_fragment();
		EnterRule("synpred8_Truss_fragment", 153);
		TraceIn("synpred8_Truss_fragment", 153);
		try
		{
			// Truss.g:972:13: ( variableDeclarationHeadScan )
			DebugEnterAlt(1);
			// Truss.g:972:15: variableDeclarationHeadScan
			{
			DebugLocation(972, 15);
			PushFollow(Follow._variableDeclarationHeadScan_in_synpred8_Truss6564);
			variableDeclarationHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred8_Truss_fragment", 153);
			LeaveRule("synpred8_Truss_fragment", 153);
			LeaveRule_synpred8_Truss_fragment();
		}
	}
	// $ANTLR end synpred8_Truss

	partial void EnterRule_synpred9_Truss_fragment();
	partial void LeaveRule_synpred9_Truss_fragment();

	// $ANTLR start synpred9_Truss
	public void synpred9_Truss_fragment()
	{
		EnterRule_synpred9_Truss_fragment();
		EnterRule("synpred9_Truss_fragment", 154);
		TraceIn("synpred9_Truss_fragment", 154);
		try
		{
			// Truss.g:1230:13: ( variableDeclarationHeadScan )
			DebugEnterAlt(1);
			// Truss.g:1230:15: variableDeclarationHeadScan
			{
			DebugLocation(1230, 15);
			PushFollow(Follow._variableDeclarationHeadScan_in_synpred9_Truss8430);
			variableDeclarationHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred9_Truss_fragment", 154);
			LeaveRule("synpred9_Truss_fragment", 154);
			LeaveRule_synpred9_Truss_fragment();
		}
	}
	// $ANTLR end synpred9_Truss

	partial void EnterRule_synpred10_Truss_fragment();
	partial void LeaveRule_synpred10_Truss_fragment();

	// $ANTLR start synpred10_Truss
	public void synpred10_Truss_fragment()
	{
		EnterRule_synpred10_Truss_fragment();
		EnterRule("synpred10_Truss_fragment", 155);
		TraceIn("synpred10_Truss_fragment", 155);
		try
		{
			// Truss.g:1263:7: ( variableDeclarationHeadScan )
			DebugEnterAlt(1);
			// Truss.g:1263:9: variableDeclarationHeadScan
			{
			DebugLocation(1263, 9);
			PushFollow(Follow._variableDeclarationHeadScan_in_synpred10_Truss8656);
			variableDeclarationHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred10_Truss_fragment", 155);
			LeaveRule("synpred10_Truss_fragment", 155);
			LeaveRule_synpred10_Truss_fragment();
		}
	}
	// $ANTLR end synpred10_Truss

	partial void EnterRule_synpred11_Truss_fragment();
	partial void LeaveRule_synpred11_Truss_fragment();

	// $ANTLR start synpred11_Truss
	public void synpred11_Truss_fragment()
	{
		EnterRule_synpred11_Truss_fragment();
		EnterRule("synpred11_Truss_fragment", 156);
		TraceIn("synpred11_Truss_fragment", 156);
		try
		{
			// Truss.g:1269:9: ( lambdaExpressionHeadScan )
			DebugEnterAlt(1);
			// Truss.g:1269:11: lambdaExpressionHeadScan
			{
			DebugLocation(1269, 11);
			PushFollow(Follow._lambdaExpressionHeadScan_in_synpred11_Truss8708);
			lambdaExpressionHeadScan();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred11_Truss_fragment", 156);
			LeaveRule("synpred11_Truss_fragment", 156);
			LeaveRule_synpred11_Truss_fragment();
		}
	}
	// $ANTLR end synpred11_Truss

	partial void EnterRule_synpred12_Truss_fragment();
	partial void LeaveRule_synpred12_Truss_fragment();

	// $ANTLR start synpred12_Truss
	public void synpred12_Truss_fragment()
	{
		EnterRule_synpred12_Truss_fragment();
		EnterRule("synpred12_Truss_fragment", 157);
		TraceIn("synpred12_Truss_fragment", 157);
		try
		{
			// Truss.g:1620:9: ( OP_PAREN_OPEN castType OP_PAREN_CLOSE expression )
			DebugEnterAlt(1);
			// Truss.g:1620:11: OP_PAREN_OPEN castType OP_PAREN_CLOSE expression
			{
			DebugLocation(1620, 11);
			Match(input,OP_PAREN_OPEN,Follow._OP_PAREN_OPEN_in_synpred12_Truss11376); if (state.failed) return;
			DebugLocation(1620, 25);
			PushFollow(Follow._castType_in_synpred12_Truss11378);
			castType();
			PopFollow();
			if (state.failed) return;
			DebugLocation(1620, 34);
			Match(input,OP_PAREN_CLOSE,Follow._OP_PAREN_CLOSE_in_synpred12_Truss11380); if (state.failed) return;
			DebugLocation(1620, 49);
			PushFollow(Follow._expression_in_synpred12_Truss11382);
			expression();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred12_Truss_fragment", 157);
			LeaveRule("synpred12_Truss_fragment", 157);
			LeaveRule_synpred12_Truss_fragment();
		}
	}
	// $ANTLR end synpred12_Truss

	partial void EnterRule_synpred13_Truss_fragment();
	partial void LeaveRule_synpred13_Truss_fragment();

	// $ANTLR start synpred13_Truss
	public void synpred13_Truss_fragment()
	{
		EnterRule_synpred13_Truss_fragment();
		EnterRule("synpred13_Truss_fragment", 158);
		TraceIn("synpred13_Truss_fragment", 158);
		try
		{
			// Truss.g:1768:13: ( OP_CARET )
			DebugEnterAlt(1);
			// Truss.g:1768:15: OP_CARET
			{
			DebugLocation(1768, 15);
			Match(input,OP_CARET,Follow._OP_CARET_in_synpred13_Truss12478); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred13_Truss_fragment", 158);
			LeaveRule("synpred13_Truss_fragment", 158);
			LeaveRule_synpred13_Truss_fragment();
		}
	}
	// $ANTLR end synpred13_Truss

	partial void EnterRule_synpred14_Truss_fragment();
	partial void LeaveRule_synpred14_Truss_fragment();

	// $ANTLR start synpred14_Truss
	public void synpred14_Truss_fragment()
	{
		EnterRule_synpred14_Truss_fragment();
		EnterRule("synpred14_Truss_fragment", 159);
		TraceIn("synpred14_Truss_fragment", 159);
		try
		{
			// Truss.g:1778:13: ( OP_BRACE_OPEN )
			DebugEnterAlt(1);
			// Truss.g:1778:15: OP_BRACE_OPEN
			{
			DebugLocation(1778, 15);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_synpred14_Truss12607); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred14_Truss_fragment", 159);
			LeaveRule("synpred14_Truss_fragment", 159);
			LeaveRule_synpred14_Truss_fragment();
		}
	}
	// $ANTLR end synpred14_Truss

	partial void EnterRule_synpred15_Truss_fragment();
	partial void LeaveRule_synpred15_Truss_fragment();

	// $ANTLR start synpred15_Truss
	public void synpred15_Truss_fragment()
	{
		EnterRule_synpred15_Truss_fragment();
		EnterRule("synpred15_Truss_fragment", 160);
		TraceIn("synpred15_Truss_fragment", 160);
		try
		{
			// Truss.g:1798:13: ( OP_BRACE_OPEN )
			DebugEnterAlt(1);
			// Truss.g:1798:15: OP_BRACE_OPEN
			{
			DebugLocation(1798, 15);
			Match(input,OP_BRACE_OPEN,Follow._OP_BRACE_OPEN_in_synpred15_Truss12704); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred15_Truss_fragment", 160);
			LeaveRule("synpred15_Truss_fragment", 160);
			LeaveRule_synpred15_Truss_fragment();
		}
	}
	// $ANTLR end synpred15_Truss

	partial void EnterRule_synpred16_Truss_fragment();
	partial void LeaveRule_synpred16_Truss_fragment();

	// $ANTLR start synpred16_Truss
	public void synpred16_Truss_fragment()
	{
		EnterRule_synpred16_Truss_fragment();
		EnterRule("synpred16_Truss_fragment", 161);
		TraceIn("synpred16_Truss_fragment", 161);
		try
		{
			// Truss.g:2144:13: ( OP_QUESTION )
			DebugEnterAlt(1);
			// Truss.g:2144:15: OP_QUESTION
			{
			DebugLocation(2144, 15);
			Match(input,OP_QUESTION,Follow._OP_QUESTION_in_synpred16_Truss14788); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred16_Truss_fragment", 161);
			LeaveRule("synpred16_Truss_fragment", 161);
			LeaveRule_synpred16_Truss_fragment();
		}
	}
	// $ANTLR end synpred16_Truss

	partial void EnterRule_synpred17_Truss_fragment();
	partial void LeaveRule_synpred17_Truss_fragment();

	// $ANTLR start synpred17_Truss
	public void synpred17_Truss_fragment()
	{
		EnterRule_synpred17_Truss_fragment();
		EnterRule("synpred17_Truss_fragment", 162);
		TraceIn("synpred17_Truss_fragment", 162);
		try
		{
			// Truss.g:2149:13: ( OP_CARET )
			DebugEnterAlt(1);
			// Truss.g:2149:15: OP_CARET
			{
			DebugLocation(2149, 15);
			Match(input,OP_CARET,Follow._OP_CARET_in_synpred17_Truss14856); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred17_Truss_fragment", 162);
			LeaveRule("synpred17_Truss_fragment", 162);
			LeaveRule_synpred17_Truss_fragment();
		}
	}
	// $ANTLR end synpred17_Truss

	partial void EnterRule_synpred18_Truss_fragment();
	partial void LeaveRule_synpred18_Truss_fragment();

	// $ANTLR start synpred18_Truss
	public void synpred18_Truss_fragment()
	{
		EnterRule_synpred18_Truss_fragment();
		EnterRule("synpred18_Truss_fragment", 163);
		TraceIn("synpred18_Truss_fragment", 163);
		try
		{
			// Truss.g:2154:13: ( rankSpecifier )
			DebugEnterAlt(1);
			// Truss.g:2154:15: rankSpecifier
			{
			DebugLocation(2154, 15);
			PushFollow(Follow._rankSpecifier_in_synpred18_Truss14924);
			rankSpecifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred18_Truss_fragment", 163);
			LeaveRule("synpred18_Truss_fragment", 163);
			LeaveRule_synpred18_Truss_fragment();
		}
	}
	// $ANTLR end synpred18_Truss

	partial void EnterRule_synpred19_Truss_fragment();
	partial void LeaveRule_synpred19_Truss_fragment();

	// $ANTLR start synpred19_Truss
	public void synpred19_Truss_fragment()
	{
		EnterRule_synpred19_Truss_fragment();
		EnterRule("synpred19_Truss_fragment", 164);
		TraceIn("synpred19_Truss_fragment", 164);
		try
		{
			// Truss.g:2166:13: ( rankSpecifier )
			DebugEnterAlt(1);
			// Truss.g:2166:15: rankSpecifier
			{
			DebugLocation(2166, 15);
			PushFollow(Follow._rankSpecifier_in_synpred19_Truss15018);
			rankSpecifier();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred19_Truss_fragment", 164);
			LeaveRule("synpred19_Truss_fragment", 164);
			LeaveRule_synpred19_Truss_fragment();
		}
	}
	// $ANTLR end synpred19_Truss

	partial void EnterRule_synpred20_Truss_fragment();
	partial void LeaveRule_synpred20_Truss_fragment();

	// $ANTLR start synpred20_Truss
	public void synpred20_Truss_fragment()
	{
		EnterRule_synpred20_Truss_fragment();
		EnterRule("synpred20_Truss_fragment", 165);
		TraceIn("synpred20_Truss_fragment", 165);
		try
		{
			// Truss.g:2182:13: ( OP_CARET )
			DebugEnterAlt(1);
			// Truss.g:2182:15: OP_CARET
			{
			DebugLocation(2182, 15);
			Match(input,OP_CARET,Follow._OP_CARET_in_synpred20_Truss15142); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred20_Truss_fragment", 165);
			LeaveRule("synpred20_Truss_fragment", 165);
			LeaveRule_synpred20_Truss_fragment();
		}
	}
	// $ANTLR end synpred20_Truss

	partial void EnterRule_synpred21_Truss_fragment();
	partial void LeaveRule_synpred21_Truss_fragment();

	// $ANTLR start synpred21_Truss
	public void synpred21_Truss_fragment()
	{
		EnterRule_synpred21_Truss_fragment();
		EnterRule("synpred21_Truss_fragment", 166);
		TraceIn("synpred21_Truss_fragment", 166);
		try
		{
			// Truss.g:2234:13: ( OP_LESS_THAN )
			DebugEnterAlt(1);
			// Truss.g:2234:15: OP_LESS_THAN
			{
			DebugLocation(2234, 15);
			Match(input,OP_LESS_THAN,Follow._OP_LESS_THAN_in_synpred21_Truss15504); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred21_Truss_fragment", 166);
			LeaveRule("synpred21_Truss_fragment", 166);
			LeaveRule_synpred21_Truss_fragment();
		}
	}
	// $ANTLR end synpred21_Truss
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA55 dfa55;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa55 = new DFA55( this, SpecialStateTransition55 );
	}

	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x3D\xFFFF";
		private const string DFA55_eofS =
			"\x3D\xFFFF";
		private const string DFA55_minS =
			"\x1\x5\x12\xFFFF\x1\x0\x29\xFFFF";
		private const string DFA55_maxS =
			"\x1\x97\x12\xFFFF\x1\x0\x29\xFFFF";
		private const string DFA55_acceptS =
			"\x1\xFFFF\x12\x1\x1\xFFFF\x1\x2\x1\x3\x1\x4\x1\xFFFF\x1\x5\x1\x6\x1\x7"+
			"\x17\xFFFF\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1\xF\x1\x10\x1"+
			"\x11\x1\x12";
		private const string DFA55_specialS =
			"\x1\x0\x12\xFFFF\x1\x1\x29\xFFFF}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\x1\x1A\x2\xFFFF\x1\x1A\x2\xFFFF\x1\x1A\x1\x13\x3\xFFFF\x1\x1A\x3\xFFFF"+
				"\x1\x14\x3\x1A\x1\x3\x1\x16\x1\x4\x2\xFFFF\x1\x5\x2\xFFFF\x1\x16\x1"+
				"\x6\x1\x1A\x1\xFFFF\x1\x3C\x1\x18\x1\x7\x6\xFFFF\x1\x1A\x1\xFFFF\x1"+
				"\x8\x1\x33\x1\x32\x1\x34\x3\xFFFF\x1\x9\x3\xFFFF\x1\xA\x1\x3A\x1\xFFFF"+
				"\x2\x1A\x1\xB\x8\xFFFF\x1\x1\x1\xFFFF\x1\x35\x1\xC\x1\xFFFF\x1\xD\x1"+
				"\x1A\x1\xFFFF\x1\xE\x1\xFFFF\x1\x36\x1\x1A\x1\x37\x1\x1A\x1\x38\x1\x1A"+
				"\x1\xF\x1\x10\x1\x11\x1\x39\x1\x2\x1\xFFFF\x1\x12\x2\xFFFF\x1\x3B\x4"+
				"\xFFFF\x1\x1A\x8\xFFFF\x1\x15\xB\xFFFF\x1\x1A\xB\xFFFF\x1\x1A\x1\xFFFF"+
				"\x1\x1A\x1\xFFFF\x1\x1A\x2\xFFFF\x1\x1A\x1\xFFFF\x1\x1A\x2\xFFFF\x1"+
				"\x19\x2\xFFFF\x2\x1A",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xFFFF",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				""
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "873:1: statement returns [StatementSyntax value] : ( ( ( KW_READONLY )? variableDeclarationHeadScan )=>e1= localDeclarationStatement |e4= assertStatement |e5= block |e6= breakContinueStatement |e7= doStatement |e8= emptyStatement |e9= expressionStatement |e10= forEachStatement |e11= forStatement |e12= ifStatement |e13= returnStatement |e14= switchStatement |e15= throwStatement |e16= tryStatement |e17= usingStatement |e18= loopStatement |e19= whileStatement |e20= deleteStatement );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition55(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		s = -1;
		int LA55_1 = input.LA(1);
		int index55_1 = input.Index;
		switch (_s)
		{
		case 0:
			{
				input.Rewind();
				if ((LA55_1==KW_READONLY) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 1;}

				else if ((LA55_1==KW_VAR) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 2;}

				else if ((LA55_1==KW_BOOL) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 3;}

				else if ((LA55_1==KW_BYTE) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 4;}

				else if ((LA55_1==KW_CHAR) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 5;}

				else if ((LA55_1==KW_DECIMAL) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 6;}

				else if ((LA55_1==KW_DOUBLE) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 7;}

				else if ((LA55_1==KW_FLOAT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 8;}

				else if ((LA55_1==KW_INT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 9;}

				else if ((LA55_1==KW_LONG) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 10;}

				else if ((LA55_1==KW_OBJECT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 11;}

				else if ((LA55_1==KW_SBYTE) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 12;}

				else if ((LA55_1==KW_SHORT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 13;}

				else if ((LA55_1==KW_STRING) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 14;}

				else if ((LA55_1==KW_UINT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 15;}

				else if ((LA55_1==KW_ULONG) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 16;}

				else if ((LA55_1==KW_USHORT) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 17;}

				else if ((LA55_1==KW_VOID) && (EvaluatePredicate(synpred7_Truss_fragment))) {s = 18;}

				else if ((LA55_1==IDENTIFIER)) {s = 19;}

				else if ((LA55_1==KW_ASSERT)) {s = 20;}

				else if ((LA55_1==OP_BRACE_OPEN)) {s = 21;}

				else if ((LA55_1==KW_BREAK||LA55_1==KW_CONTINUE)) {s = 22;}

				else if ((LA55_1==KW_DO)) {s = 24;}

				else if ((LA55_1==OP_SEMICOLON)) {s = 25;}

				else if ((LA55_1==CHAR||LA55_1==FLOAT||LA55_1==HEX_INTEGER||LA55_1==INTEGER||(LA55_1>=KW_ASYNC && LA55_1<=KW_BASE)||LA55_1==KW_DEFAULT||LA55_1==KW_FALSE||(LA55_1>=KW_NEW && LA55_1<=KW_NIL)||LA55_1==KW_SIZEOF||LA55_1==KW_THIS||LA55_1==KW_TRUE||LA55_1==KW_TYPEOF||LA55_1==OP_AMPERSAND||LA55_1==OP_EXCLAMATION||LA55_1==OP_MINUS||LA55_1==OP_MINUS_MINUS||LA55_1==OP_PAREN_OPEN||LA55_1==OP_PLUS||LA55_1==OP_PLUS_PLUS||(LA55_1>=OP_TILDE && LA55_1<=STRING))) {s = 26;}

				else if ((LA55_1==KW_FOREACH)) {s = 50;}

				else if ((LA55_1==KW_FOR)) {s = 51;}

				else if ((LA55_1==KW_IF)) {s = 52;}

				else if ((LA55_1==KW_RETURN)) {s = 53;}

				else if ((LA55_1==KW_SWITCH)) {s = 54;}

				else if ((LA55_1==KW_THROW)) {s = 55;}

				else if ((LA55_1==KW_TRY)) {s = 56;}

				else if ((LA55_1==KW_USING)) {s = 57;}

				else if ((LA55_1==KW_LOOP)) {s = 58;}

				else if ((LA55_1==KW_WHILE)) {s = 59;}

				else if ((LA55_1==KW_DELETE)) {s = 60;}

				input.Seek(index55_1);
				break;
			}
		case 1:
			{
				input.Rewind();
				if ((EvaluatePredicate(synpred7_Truss_fragment))) {s = 18;}

				else if ((true)) {s = 26;}

				input.Seek(index55_1);
				break;
			}

		default:
			break;
		}

		if (s >= 0)
			return s;

		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 55, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _attributeList_in_compilationUnit152 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _importDirective_in_compilationUnit180 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _namespaceScopeMemberDeclaration_in_compilationUnit208 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_compilationUnit241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_assemblyAttributeHeadScan266 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _IDENTIFIER_in_assemblyAttributeHeadScan278 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _OP_COLON_in_assemblyAttributeHeadScan301 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespaceDeclaration_in_namespaceScopeMemberDeclaration337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeListList_in_namespaceScopeMemberDeclaration357 = new BitSet(new ulong[]{0x2180120840240000UL,0xA00291F4UL});
		public static readonly BitSet _modifiers_in_namespaceScopeMemberDeclaration371 = new BitSet(new ulong[]{0x80020840000000UL,0x20000UL});
		public static readonly BitSet _delegateDeclaration_in_namespaceScopeMemberDeclaration387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_namespaceScopeMemberDeclaration403 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_namespaceScopeMemberDeclaration419 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_IMPORT_in_importDirective465 = new BitSet(new ulong[]{0x1000UL,0x8000UL});
		public static readonly BitSet _KW_STATIC_in_importDirective477 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_importDirective508 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_importDirective522 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _name_in_importDirective545 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_importDirective555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_NAMESPACE_in_namespaceDeclaration599 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _name_in_namespaceDeclaration611 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_namespaceDeclaration621 = new BitSet(new ulong[]{0x3190120840240000UL,0x24000A00291F4UL});
		public static readonly BitSet _importDirective_in_namespaceDeclaration635 = new BitSet(new ulong[]{0x3190120840240000UL,0x24000A00291F4UL});
		public static readonly BitSet _namespaceScopeMemberDeclaration_in_namespaceDeclaration651 = new BitSet(new ulong[]{0x3190120840240000UL,0x24000A00291F4UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_namespaceDeclaration684 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeList_in_attributeListList736 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_attributeList793 = new BitSet(new ulong[]{0x40000001000UL,0x400UL});
		public static readonly BitSet _attributeTarget_in_attributeList819 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _OP_COLON_in_attributeList847 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _attribute_in_attributeList870 = new BitSet(new ulong[]{0x0UL,0x41000000000000UL});
		public static readonly BitSet _OP_COMMA_in_attributeList904 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _attribute_in_attributeList920 = new BitSet(new ulong[]{0x0UL,0x41000000000000UL});
		public static readonly BitSet _OP_BRACKET_CLOSE_in_attributeList955 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_attribute1001 = new BitSet(new ulong[]{0x2UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_attribute1025 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14E80UL});
		public static readonly BitSet _attributeArgument_in_attribute1059 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x400UL});
		public static readonly BitSet _OP_COMMA_in_attribute1117 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _attributeArgument_in_attribute1141 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_attribute1211 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_attributeArgument1303 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_attributeArgument1317 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_attributeArgument1340 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_attributeTarget1386 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_EVENT_in_attributeTarget1412 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_RETURN_in_attributeTarget1438 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_parameterList1477 = new BitSet(new ulong[]{0x84408042A5001000UL,0x2000057092A0AUL,0x400UL});
		public static readonly BitSet _bareParameterList_in_parameterList1503 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_parameterList1561 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameter_in_bareParameterList1597 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_bareParameterList1631 = new BitSet(new ulong[]{0x84408042A5001000UL,0x2000057092A0AUL});
		public static readonly BitSet _parameter_in_bareParameterList1647 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _attributeListList_in_parameter1718 = new BitSet(new ulong[]{0x84408042A5001000UL,0x57092A0AUL});
		public static readonly BitSet _parameterModifier_in_parameter1744 = new BitSet(new ulong[]{0x84408042A5001000UL,0x57092A0AUL});
		public static readonly BitSet _typeSyntax_in_parameter1781 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_parameter1793 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_THIS_in_parameterModifier1824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_PARAMS_in_parameterModifier1834 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_CONSUMES_in_parameterModifier1844 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argumentModifier_in_parameterModifier1856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_REF_in_argumentModifier1879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_OUT_in_argumentModifier1889 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DELEGATE_in_delegateDeclaration1927 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_delegateDeclaration1939 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_delegateDeclaration1951 = new BitSet(new ulong[]{0x0UL,0x0UL,0x808UL});
		public static readonly BitSet _typeParameterList_in_delegateDeclaration1963 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _parameterList_in_delegateDeclaration1975 = new BitSet(new ulong[]{0x0UL,0x100000000UL,0x80000UL});
		public static readonly BitSet _typeParameterConstraintClauseList_in_delegateDeclaration1987 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_delegateDeclaration1997 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_in_typeParameterList2055 = new BitSet(new ulong[]{0x20000000001000UL,0x2000000000002UL});
		public static readonly BitSet _typeParameter_in_typeParameterList2071 = new BitSet(new ulong[]{0x0UL,0x2040000000000000UL});
		public static readonly BitSet _OP_COMMA_in_typeParameterList2117 = new BitSet(new ulong[]{0x20000000001000UL,0x2000000000002UL});
		public static readonly BitSet _typeParameter_in_typeParameterList2137 = new BitSet(new ulong[]{0x0UL,0x2040000000000000UL});
		public static readonly BitSet _OP_GREATER_THAN_in_typeParameterList2184 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeListList_in_typeParameter2241 = new BitSet(new ulong[]{0x20000000001000UL,0x2UL});
		public static readonly BitSet _typeParameterVariance_in_typeParameter2253 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_typeParameter2265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_IN_in_typeParameterVariance2296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_OUT_in_typeParameterVariance2306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_CLASS_in_typeDeclaration2359 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _KW_INTERFACE_in_typeDeclaration2373 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _KW_STRUCT_in_typeDeclaration2387 = new BitSet(new ulong[]{0x1000UL,0x4000000000000UL});
		public static readonly BitSet _OP_CARET_in_typeDeclaration2391 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_typeDeclaration2420 = new BitSet(new ulong[]{0x0UL,0x10800100000000UL,0x8UL});
		public static readonly BitSet _typeParameterList_in_typeDeclaration2432 = new BitSet(new ulong[]{0x0UL,0x10800100000000UL});
		public static readonly BitSet _OP_COLON_in_typeDeclaration2456 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_typeDeclaration2490 = new BitSet(new ulong[]{0x0UL,0x40800100000000UL});
		public static readonly BitSet _OP_COMMA_in_typeDeclaration2548 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_typeDeclaration2572 = new BitSet(new ulong[]{0x0UL,0x40800100000000UL});
		public static readonly BitSet _typeParameterConstraintClauseList_in_typeDeclaration2650 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_typeDeclaration2660 = new BitSet(new ulong[]{0xA5C89E4A65241000UL,0x24000F703B9F4UL,0x400000UL});
		public static readonly BitSet _memberDeclaration_in_typeDeclaration2686 = new BitSet(new ulong[]{0xA5C89E4A65241000UL,0x24000F703B9F4UL,0x400000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_typeDeclaration2721 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeParameterConstraintClause_in_typeParameterConstraintClauseList2771 = new BitSet(new ulong[]{0x2UL,0x100000000UL});
		public static readonly BitSet _KW_WHERE_in_typeParameterConstraintClause2853 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_typeParameterConstraintClause2865 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _OP_COLON_in_typeParameterConstraintClause2875 = new BitSet(new ulong[]{0xA440804265001000UL,0x800000057032800UL,0x20000UL});
		public static readonly BitSet _typeParameterConstraint_in_typeParameterConstraintClause2887 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_typeParameterConstraintClause2921 = new BitSet(new ulong[]{0xA440804265001000UL,0x800000057032800UL,0x20000UL});
		public static readonly BitSet _typeParameterConstraint_in_typeParameterConstraintClause2937 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _KW_NEW_in_typeParameterConstraint3006 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_typeParameterConstraint3008 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_typeParameterConstraint3010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullable_in_typeParameterConstraint3052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_CLASS_in_typeParameterConstraint3078 = new BitSet(new ulong[]{0x0UL,0x800000000000000UL,0x20000UL});
		public static readonly BitSet _nullable_in_typeParameterConstraint3082 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_STRUCT_in_typeParameterConstraint3108 = new BitSet(new ulong[]{0x0UL,0x804000000000000UL,0x20000UL});
		public static readonly BitSet _nullable_in_typeParameterConstraint3126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_in_typeParameterConstraint3144 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_typeParameterConstraint3198 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_QUESTION_in_nullable3229 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EXCLAMATION_in_nullable3239 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modifier_in_modifiers3283 = new BitSet(new ulong[]{0x2100100000240002UL,0xA00091F4UL});
		public static readonly BitSet _KW_ABSTRACT_in_modifier3327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ASYNC_in_modifier3337 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_EXTERN_in_modifier3347 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_INTERNAL_in_modifier3357 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_NEW_in_modifier3367 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_OVERRIDE_in_modifier3377 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_PARTIAL_in_modifier3387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_PRIVATE_in_modifier3397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_PROTECTED_in_modifier3407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_PUBLIC_in_modifier3417 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_READONLY_in_modifier3427 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_SEALED_in_modifier3437 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_STATIC_in_modifier3447 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_VIRTUAL_in_modifier3457 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_VOLATILE_in_modifier3467 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ENUM_in_enumDeclaration3505 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_enumDeclaration3517 = new BitSet(new ulong[]{0x0UL,0x10800000000000UL});
		public static readonly BitSet _OP_COLON_in_enumDeclaration3541 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_enumDeclaration3557 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_enumDeclaration3578 = new BitSet(new ulong[]{0x1000UL,0x2400000000000UL});
		public static readonly BitSet _enumMemberDeclaration_in_enumDeclaration3604 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_enumDeclaration3650 = new BitSet(new ulong[]{0x1000UL,0x2000000000000UL});
		public static readonly BitSet _enumMemberDeclaration_in_enumDeclaration3670 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_enumDeclaration3717 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_enumDeclaration3739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeListList_in_enumMemberDeclaration3785 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_enumMemberDeclaration3797 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_enumMemberDeclaration3821 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_enumMemberDeclaration3837 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeListList_in_memberDeclaration3892 = new BitSet(new ulong[]{0xA5C89E4A65241000UL,0xF703B9F4UL,0x400000UL});
		public static readonly BitSet _modifiers_in_memberDeclaration3902 = new BitSet(new ulong[]{0x84C88E4A65001000UL,0x57032800UL,0x400000UL});
		public static readonly BitSet _constructorDeclaration_in_memberDeclaration3929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_memberDeclaration3957 = new BitSet(new ulong[]{0x1000UL,0x80001UL});
		public static readonly BitSet _typedMemberDeclaration_in_memberDeclaration3971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conversionOperatorDeclaration_in_memberDeclaration3999 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _destructorDeclaration_in_memberDeclaration4019 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _eventDeclaration_in_memberDeclaration4039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _delegateDeclaration_in_memberDeclaration4059 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeDeclaration_in_memberDeclaration4079 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enumDeclaration_in_memberDeclaration4099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _operatorDeclaration_in_typedMemberDeclaration4140 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _fieldDeclaration_in_typedMemberDeclaration4168 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationWithoutType_in_fieldDeclaration4238 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_fieldDeclaration4258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_fieldDeclaration4302 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _OP_DOT_in_fieldDeclaration4304 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _KW_THIS_in_fieldDeclaration4317 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_fieldDeclaration4327 = new BitSet(new ulong[]{0x84408042A5001000UL,0x2000057092A0AUL});
		public static readonly BitSet _bareParameterList_in_fieldDeclaration4339 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _OP_BRACKET_CLOSE_in_fieldDeclaration4349 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _accessorList_in_fieldDeclaration4361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _memberName_in_fieldDeclaration4389 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x800UL});
		public static readonly BitSet _propertyDeclarationTail_in_fieldDeclaration4425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _methodDeclarationTail_in_fieldDeclaration4465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _accessorList_in_propertyDeclarationTail4525 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _parameterList_in_methodDeclarationTail4571 = new BitSet(new ulong[]{0x0UL,0x800100000000UL,0x80000UL});
		public static readonly BitSet _typeParameterConstraintClauseList_in_methodDeclarationTail4583 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x80000UL});
		public static readonly BitSet _block_in_methodDeclarationTail4597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_SEMICOLON_in_methodDeclarationTail4601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_EVENT_in_eventDeclaration4649 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _variableDeclaration_in_eventDeclaration4696 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_eventDeclaration4724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_eventDeclaration4750 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _memberName_in_eventDeclaration4766 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _accessorList_in_eventDeclaration4782 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_accessorList4840 = new BitSet(new ulong[]{0x2100100000241000UL,0x24000A00091F4UL});
		public static readonly BitSet _attributeListList_in_accessorList4880 = new BitSet(new ulong[]{0x2100100000241000UL,0xA00091F4UL});
		public static readonly BitSet _modifiers_in_accessorList4896 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _accessorDeclarationType_in_accessorList4912 = new BitSet(new ulong[]{0x0UL,0x800000000000UL,0x80000UL});
		public static readonly BitSet _block_in_accessorList4930 = new BitSet(new ulong[]{0x2100100000241000UL,0x24000A00091F4UL});
		public static readonly BitSet _OP_SEMICOLON_in_accessorList4934 = new BitSet(new ulong[]{0x2100100000241000UL,0x24000A00091F4UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_accessorList4971 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_accessorDeclarationType5012 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_constructorDeclarationHeadScan5037 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_constructorDeclarationHeadScan5039 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_constructorDeclaration5071 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _parameterList_in_constructorDeclaration5083 = new BitSet(new ulong[]{0x0UL,0x10800000000000UL});
		public static readonly BitSet _constructorInitializer_in_constructorDeclaration5097 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_constructorDeclaration5112 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_COLON_in_constructorInitializer5156 = new BitSet(new ulong[]{0x800000UL,0x80000UL});
		public static readonly BitSet _KW_THIS_in_constructorInitializer5168 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _KW_BASE_in_constructorInitializer5182 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _argumentList_in_constructorInitializer5206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_TILDE_in_destructorDeclaration5252 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_destructorDeclaration5264 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_destructorDeclaration5274 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_destructorDeclaration5284 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_destructorDeclaration5296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_EXPLICIT_in_conversionOperatorDeclaration5344 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _KW_IMPLICIT_in_conversionOperatorDeclaration5358 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _KW_OPERATOR_in_conversionOperatorDeclaration5380 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_conversionOperatorDeclaration5392 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _parameterList_in_conversionOperatorDeclaration5404 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_conversionOperatorDeclaration5416 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_OPERATOR_in_operatorDeclaration5462 = new BitSet(new ulong[]{0x200000000000UL,0x7A040A4000200000UL,0x5152BAUL});
		public static readonly BitSet _operator_in_operatorDeclaration5474 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _parameterList_in_operatorDeclaration5486 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_operatorDeclaration5498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_AMPERSAND_in_operator5529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_ASTERISK_in_operator5539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BAR_in_operator5549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_in_operator5559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EQUALS_EQUALS_in_operator5569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EXCLAMATION_in_operator5579 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EXCLAMATION_EQUALS_in_operator5589 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FALSE_in_operator5599 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_GREATER_THAN_in_operator5609 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_GREATER_THAN_EQUALS_in_operator5619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _op_GREATER_THAN_GREATER_THAN_in_operator5629 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_in_operator5639 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_EQUALS_in_operator5649 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_LESS_THAN_in_operator5659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_in_operator5669 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_MINUS_in_operator5679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PERCENT_in_operator5689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_in_operator5699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_PLUS_in_operator5709 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_SLASH_in_operator5719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_TILDE_in_operator5729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_TRUE_in_operator5739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_block5777 = new BitSet(new ulong[]{0xEC47A07727F11920UL,0x800C0425FFD6D00UL,0xC94A80UL});
		public static readonly BitSet _statement_in_block5803 = new BitSet(new ulong[]{0xEC47A07727F11920UL,0x800C0425FFD6D00UL,0xC94A80UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_block5838 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _localDeclarationStatement_in_statement5886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assertStatement_in_statement5898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_statement5910 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _breakContinueStatement_in_statement5922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _doStatement_in_statement5934 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _emptyStatement_in_statement5946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionStatement_in_statement5958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forEachStatement_in_statement5970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _forStatement_in_statement5982 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ifStatement_in_statement5994 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _returnStatement_in_statement6006 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _switchStatement_in_statement6018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _throwStatement_in_statement6030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _tryStatement_in_statement6042 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _usingStatement_in_statement6054 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _loopStatement_in_statement6066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _whileStatement_in_statement6078 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _deleteStatement_in_statement6090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ASSERT_in_assertStatement6126 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_assertStatement6138 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_assertStatement6148 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_BREAK_in_breakContinueStatement6190 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _KW_CONTINUE_in_breakContinueStatement6200 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_breakContinueStatement6214 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DO_in_doStatement6248 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_doStatement6260 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _KW_WHILE_in_doStatement6270 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_doStatement6282 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_doStatement6292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_SEMICOLON_in_emptyStatement6336 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionStatement6382 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_expressionStatement6392 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FOREACH_in_forEachStatement6436 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_forEachStatement6448 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_forEachStatement6460 = new BitSet(new ulong[]{0x20000000000000UL});
		public static readonly BitSet _KW_IN_in_forEachStatement6470 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_forEachStatement6482 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_forEachStatement6494 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FOR_in_forStatement6538 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC94A80UL});
		public static readonly BitSet _variableDeclaration_in_forStatement6583 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _expressionList_in_forStatement6609 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_forStatement6630 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC94A80UL});
		public static readonly BitSet _expression_in_forStatement6644 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_forStatement6657 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800804000A84000UL,0xC14A80UL});
		public static readonly BitSet _expressionList_in_forStatement6671 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_forStatement6686 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionList6732 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_expressionList6766 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_expressionList6782 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _expressionOrDeclaration_in_expressionOrDeclarationList6853 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_expressionOrDeclarationList6887 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_expressionOrDeclarationList6903 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _KW_IF_in_ifStatement6972 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_ifStatement6984 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_ifStatement6996 = new BitSet(new ulong[]{0x18000000002UL});
		public static readonly BitSet _elIfClause_in_ifStatement7010 = new BitSet(new ulong[]{0x18000000002UL});
		public static readonly BitSet _elseClause_in_ifStatement7029 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ELIF_in_elIfClause7078 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_elIfClause7090 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_elIfClause7102 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ELSE_in_elseClause7146 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_elseClause7158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_READONLY_in_localDeclarationStatement7216 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _variableDeclaration_in_localDeclarationStatement7253 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_localDeclarationStatement7263 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_variableDeclarationHeadScan7286 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_variableDeclarationHeadScan7288 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_variableDeclaration7320 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _variableDeclarationWithoutType_in_variableDeclaration7342 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarator_in_variableDeclarationWithoutType7388 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_variableDeclarationWithoutType7422 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _variableDeclarator_in_variableDeclarationWithoutType7438 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _identifierName_in_variableDeclarator7509 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_variableDeclarator7533 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_variableDeclarator7549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_RETURN_in_returnStatement7604 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC94A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_returnStatement7627 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_returnStatement7640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_SWITCH_in_switchStatement7684 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_switchStatement7696 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_switchStatement7706 = new BitSet(new ulong[]{0x408000000UL,0x400000000000UL});
		public static readonly BitSet _switchSection_in_switchStatement7732 = new BitSet(new ulong[]{0x408000000UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_switchStatement7767 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DEFAULT_in_switchSection7825 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _KW_CASE_in_switchSection7863 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expressionList_in_switchSection7893 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_switchSection7915 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_THROW_in_throwStatement7959 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC94A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_throwStatement7980 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_throwStatement7991 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DELETE_in_deleteStatement8035 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_deleteStatement8056 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_deleteStatement8066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_TRY_in_tryStatement8110 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_tryStatement8122 = new BitSet(new ulong[]{0x400010000002UL});
		public static readonly BitSet _catchClause_in_tryStatement8148 = new BitSet(new ulong[]{0x400010000002UL});
		public static readonly BitSet _finallyClause_in_tryStatement8187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_CATCH_in_catchClause8234 = new BitSet(new ulong[]{0x8440804225001000UL,0x800057012800UL});
		public static readonly BitSet _typeSyntax_in_catchClause8260 = new BitSet(new ulong[]{0x1000UL,0x800000000000UL});
		public static readonly BitSet _identifierName_in_catchClause8278 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_catchClause8304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FINALLY_in_finallyClause8348 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_finallyClause8360 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_USING_in_usingStatement8404 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _variableDeclaration_in_usingStatement8449 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _expression_in_usingStatement8475 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_usingStatement8497 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_LOOP_in_loopStatement8541 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_loopStatement8553 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_WHILE_in_whileStatement8597 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_whileStatement8609 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _block_in_whileStatement8621 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationExpression_in_expressionOrDeclaration8663 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expression_in_expressionOrDeclaration8675 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambdaExpression_in_expression8715 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assignmentExpression_in_expression8743 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonAssignmentExpression_in_assignmentExpression8789 = new BitSet(new ulong[]{0x2UL,0x108250000000000UL,0x20A141UL});
		public static readonly BitSet _assignmentOperator_in_assignmentExpression8825 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_assignmentExpression8841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _conditionalExpression_in_nonAssignmentExpression8897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EQUALS_in_assignmentOperator8928 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_EQUALS_in_assignmentOperator8938 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_EQUALS_in_assignmentOperator8948 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_ASTERISK_EQUALS_in_assignmentOperator8958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_SLASH_EQUALS_in_assignmentOperator8968 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PERCENT_EQUALS_in_assignmentOperator8978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_GREATER_THAN_GREATER_THAN_EQUALS_in_assignmentOperator8988 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_LESS_THAN_EQUALS_in_assignmentOperator8998 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_AMPERSAND_EQUALS_in_assignmentOperator9008 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BAR_EQUALS_in_assignmentOperator9018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_EQUALS_in_assignmentOperator9028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ASYNC_in_lambdaExpressionHeadScan9043 = new BitSet(new ulong[]{0x1000UL,0x0UL,0x800UL});
		public static readonly BitSet _lambdaParameterList_in_lambdaExpressionHeadScan9046 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _OP_EQUALS_GREATER_THAN_in_lambdaExpressionHeadScan9048 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ASYNC_in_lambdaExpression9093 = new BitSet(new ulong[]{0x1000UL,0x0UL,0x800UL});
		public static readonly BitSet _lambdaParameterList_in_lambdaExpression9130 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _OP_EQUALS_GREATER_THAN_in_lambdaExpression9140 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800804000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_lambdaExpression9166 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _block_in_lambdaExpression9206 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_lambdaParameterList9259 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012A02UL,0x400UL});
		public static readonly BitSet _explicitLambdaParameterList_in_lambdaParameterList9285 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _implicitLambdaParameterList_in_lambdaParameterList9325 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_lambdaParameterList9383 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicitLambdaParameter_in_lambdaParameterList9401 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _explicitLambdaParameter_in_explicitLambdaParameterList9447 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_explicitLambdaParameterList9481 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012A02UL});
		public static readonly BitSet _explicitLambdaParameter_in_explicitLambdaParameterList9497 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _argumentModifier_in_explicitLambdaParameter9570 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_explicitLambdaParameter9579 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_explicitLambdaParameter9583 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _implicitLambdaParameter_in_implicitLambdaParameterList9629 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _OP_COMMA_in_implicitLambdaParameterList9663 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _implicitLambdaParameter_in_implicitLambdaParameterList9679 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _identifierName_in_implicitLambdaParameter9750 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _coalescingExpression_in_conditionalExpression9796 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000UL});
		public static readonly BitSet _OP_QUESTION_in_conditionalExpression9830 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_conditionalExpression9834 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _OP_COLON_in_conditionalExpression9848 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _conditionalExpression_in_conditionalExpression9852 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalOrExpression_in_coalescingExpression9913 = new BitSet(new ulong[]{0x2UL,0x0UL,0x40000UL});
		public static readonly BitSet _OP_QUESTION_QUESTION_in_coalescingExpression9947 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _logicalOrExpression_in_coalescingExpression9963 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10024 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _OP_BAR_BAR_in_logicalOrExpression10058 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _logicalAndExpression_in_logicalOrExpression10062 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _bitwiseOrExpression_in_logicalAndExpression10123 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _OP_AMPERSAND_AMPERSAND_in_logicalAndExpression10157 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _bitwiseOrExpression_in_logicalAndExpression10161 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _bitwiseXorExpression_in_bitwiseOrExpression10222 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _OP_BAR_in_bitwiseOrExpression10256 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _bitwiseXorExpression_in_bitwiseOrExpression10260 = new BitSet(new ulong[]{0x2UL,0x80000000000UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXorExpression10321 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _OP_CARET_in_bitwiseXorExpression10355 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _bitwiseAndExpression_in_bitwiseXorExpression10359 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _equalityExpression_in_bitwiseAndExpression10420 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _OP_AMPERSAND_in_bitwiseAndExpression10454 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _equalityExpression_in_bitwiseAndExpression10458 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression10519 = new BitSet(new ulong[]{0x2UL,0x1200000000000000UL});
		public static readonly BitSet _equalityOperator_in_equalityExpression10555 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _relationalExpression_in_equalityExpression10559 = new BitSet(new ulong[]{0x2UL,0x1200000000000000UL});
		public static readonly BitSet _OP_EQUALS_EQUALS_in_equalityOperator10605 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EXCLAMATION_EQUALS_in_equalityOperator10615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression10653 = new BitSet(new ulong[]{0x200000000080002UL,0x6000000000000000UL,0x18UL});
		public static readonly BitSet _relationalOperator_in_relationalExpression10707 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _shiftExpression_in_relationalExpression10711 = new BitSet(new ulong[]{0x200000000080002UL,0x6000000000000000UL,0x18UL});
		public static readonly BitSet _isAsOperator_in_relationalExpression10763 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _name_in_relationalExpression10767 = new BitSet(new ulong[]{0x200000000080002UL,0x6000000000000000UL,0x18UL});
		public static readonly BitSet _OP_GREATER_THAN_in_relationalOperator10831 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_GREATER_THAN_EQUALS_in_relationalOperator10841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_in_relationalOperator10851 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_EQUALS_in_relationalOperator10861 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_IS_in_isAsOperator10884 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_AS_in_isAsOperator10894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression10932 = new BitSet(new ulong[]{0x2UL,0x0UL,0x22UL});
		public static readonly BitSet _shiftOperator_in_shiftExpression10968 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _additiveExpression_in_shiftExpression10972 = new BitSet(new ulong[]{0x2UL,0x0UL,0x22UL});
		public static readonly BitSet _op_GREATER_THAN_GREATER_THAN_in_shiftOperator11018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_LESS_THAN_in_shiftOperator11028 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11066 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4080UL});
		public static readonly BitSet _additiveOperator_in_additiveExpression11102 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _multiplicativeExpression_in_additiveExpression11106 = new BitSet(new ulong[]{0x2UL,0x0UL,0x4080UL});
		public static readonly BitSet _OP_PLUS_in_additiveOperator11152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_in_additiveOperator11162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11200 = new BitSet(new ulong[]{0x2UL,0x20000000000UL,0x101000UL});
		public static readonly BitSet _multiplicativeOperator_in_multiplicativeExpression11236 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _unaryExpression_in_multiplicativeExpression11240 = new BitSet(new ulong[]{0x2UL,0x20000000000UL,0x101000UL});
		public static readonly BitSet _OP_ASTERISK_in_multiplicativeOperator11286 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_SLASH_in_multiplicativeOperator11296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PERCENT_in_multiplicativeOperator11306 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefixUnaryOperator_in_unaryExpression11344 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _unaryExpression_in_unaryExpression11348 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _castExpression_in_unaryExpression11397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _awaitExpression_in_unaryExpression11425 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_unaryExpression11453 = new BitSet(new ulong[]{0x2UL,0x82000000000000UL,0x10A00UL});
		public static readonly BitSet _selector_in_unaryExpression11489 = new BitSet(new ulong[]{0x2UL,0x82000000000000UL,0x10A00UL});
		public static readonly BitSet _postfixUnaryOperator_in_unaryExpression11540 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_AWAIT_in_awaitExpression11599 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _unaryExpression_in_awaitExpression11611 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_AMPERSAND_in_prefixUnaryOperator11642 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_EXCLAMATION_in_prefixUnaryOperator11652 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_in_prefixUnaryOperator11662 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_MINUS_in_prefixUnaryOperator11672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_in_prefixUnaryOperator11682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_PLUS_in_prefixUnaryOperator11692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_TILDE_in_prefixUnaryOperator11702 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_MINUS_MINUS_in_postfixUnaryOperator11725 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PLUS_PLUS_in_postfixUnaryOperator11735 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_castExpression11771 = new BitSet(new ulong[]{0x8440804225001000UL,0x800000057012800UL,0x20000UL});
		public static readonly BitSet _castType_in_castExpression11775 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_castExpression11777 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _unaryExpression_in_castExpression11789 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argumentModifier_in_argument11849 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96A02UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_argument11886 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_THIS_in_primaryExpression11922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_BASE_in_primaryExpression11932 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _literal_in_primaryExpression11944 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_primaryExpression11954 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_primaryExpression11958 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_primaryExpression11960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_TYPEOF_in_primaryExpression11970 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_primaryExpression11972 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_primaryExpression11976 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_primaryExpression11978 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_SIZEOF_in_primaryExpression11988 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_primaryExpression11990 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_primaryExpression11994 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_primaryExpression11996 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DEFAULT_in_primaryExpression12006 = new BitSet(new ulong[]{0x0UL,0x0UL,0x800UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_primaryExpression12008 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _typeSyntax_in_primaryExpression12012 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_primaryExpression12014 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_primaryExpression12026 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryNewExpression_in_primaryExpression12038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_NEW_in_primaryNewExpression12078 = new BitSet(new ulong[]{0x8440804225001000UL,0x2800057012800UL});
		public static readonly BitSet _typeSyntax_in_primaryNewExpression12104 = new BitSet(new ulong[]{0x0UL,0x2800000000000UL,0x800UL});
		public static readonly BitSet _objectCreationExpression_in_primaryNewExpression12152 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectOrCollectionInitializer_in_primaryNewExpression12204 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayCreationExpression_in_primaryNewExpression12256 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _anonymousObjectInitializer_in_primaryNewExpression12314 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rankSpecifier_in_primaryNewExpression12354 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _arrayInitializer_in_primaryNewExpression12370 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_arrayCreationExpression12430 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_arrayCreationExpression12442 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _OP_BRACKET_CLOSE_in_arrayCreationExpression12452 = new BitSet(new ulong[]{0x2UL,0x6800000000000UL});
		public static readonly BitSet _OP_CARET_in_arrayCreationExpression12495 = new BitSet(new ulong[]{0x2UL,0x2800000000000UL});
		public static readonly BitSet _rankSpecifierList_in_arrayCreationExpression12556 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _arrayInitializer_in_arrayCreationExpression12626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argumentList_in_objectCreationExpression12678 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _objectOrCollectionInitializer_in_objectCreationExpression12723 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_arrayInitializer12778 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800C04057A96800UL,0xC14A80UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer12804 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_arrayInitializer12850 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800804057A96800UL,0xC14A80UL});
		public static readonly BitSet _variableInitializer_in_arrayInitializer12870 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_arrayInitializer12917 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_arrayInitializer12939 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionOrDeclaration_in_variableInitializer12972 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _arrayInitializer_in_variableInitializer12984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_anonymousObjectInitializer13020 = new BitSet(new ulong[]{0x6000200400811920UL,0x400000A84000UL,0x800800UL});
		public static readonly BitSet _memberDeclarator_in_anonymousObjectInitializer13046 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_anonymousObjectInitializer13092 = new BitSet(new ulong[]{0x6000200400811920UL,0xA84000UL,0x800800UL});
		public static readonly BitSet _memberDeclarator_in_anonymousObjectInitializer13112 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_anonymousObjectInitializer13159 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_anonymousObjectInitializer13181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _primaryExpression_in_memberDeclarator13227 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_memberDeclarator13255 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_memberDeclarator13257 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclaration_in_memberDeclarator13261 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_objectOrCollectionInitializer13305 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_objectOrCollectionInitializer13307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectInitializer_in_objectOrCollectionInitializer13335 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _collectionInitializer_in_objectOrCollectionInitializer13363 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_objectInitializer13407 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _memberInitializer_in_objectInitializer13419 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_objectInitializer13453 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _memberInitializer_in_objectInitializer13469 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_objectInitializer13504 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_objectInitializer13515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_memberInitializer13561 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL,0x8000UL});
		public static readonly BitSet _OP_EQUALS_in_memberInitializer13585 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800804057A96800UL,0xC14A80UL});
		public static readonly BitSet _OP_PLUS_EQUALS_in_memberInitializer13623 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800804057A96800UL,0xC14A80UL});
		public static readonly BitSet _memberInitializerValue_in_memberInitializer13659 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expressionOrDeclaration_in_memberInitializerValue13692 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _objectOrCollectionInitializer_in_memberInitializerValue13704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_collectionInitializer13740 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800804000A84000UL,0xC14A80UL});
		public static readonly BitSet _elementInitializer_in_collectionInitializer13752 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_collectionInitializer13786 = new BitSet(new ulong[]{0x6000200400C11920UL,0x800804000A84000UL,0xC14A80UL});
		public static readonly BitSet _elementInitializer_in_collectionInitializer13802 = new BitSet(new ulong[]{0x0UL,0x40400000000000UL});
		public static readonly BitSet _OP_COMMA_in_collectionInitializer13837 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_collectionInitializer13848 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nonAssignmentExpression_in_elementInitializer13894 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_elementInitializer13920 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclarationList_in_elementInitializer13924 = new BitSet(new ulong[]{0x0UL,0x400000000000UL});
		public static readonly BitSet _OP_BRACE_CLOSE_in_elementInitializer13926 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_variableDeclarationExpression13972 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _identifierName_in_variableDeclarationExpression13984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_DOT_in_selector14020 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _simpleName_in_selector14024 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _argumentList_in_selector14036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_selector14046 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96800UL,0xC14A80UL});
		public static readonly BitSet _expressionOrDeclarationList_in_selector14050 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _OP_BRACKET_CLOSE_in_selector14052 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_argumentList14088 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96A02UL,0xC14E80UL});
		public static readonly BitSet _argument_in_argumentList14114 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x400UL});
		public static readonly BitSet _OP_COMMA_in_argumentList14160 = new BitSet(new ulong[]{0xE440A04625E11920UL,0x800004057A96A02UL,0xC14A80UL});
		public static readonly BitSet _argument_in_argumentList14180 = new BitSet(new ulong[]{0x0UL,0x40000000000000UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_argumentList14234 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_TRUE_in_literal14275 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FALSE_in_literal14285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_NIL_in_literal14295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HEX_INTEGER_in_literal14307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INTEGER_in_literal14319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _FLOAT_in_literal14331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHAR_in_literal14343 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_literal14355 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_identifierName14410 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _nullable_in_castType14458 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _typeSyntax_in_castType14486 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__qualifiedName_in_name14529 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_VAR_in_typeSyntax14591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__type_in_typeSyntax14619 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__qualifiedName_in_memberName14660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__simpleName_in_simpleName14701 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__baseType_in_np__type14752 = new BitSet(new ulong[]{0x2UL,0x6000000000000UL,0x20000UL});
		public static readonly BitSet _OP_QUESTION_in_np__type14805 = new BitSet(new ulong[]{0x2UL,0x6000000000000UL});
		public static readonly BitSet _OP_CARET_in_np__type14873 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _rankSpecifierList_in_np__type14943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rankSpecifier_in_rankSpecifierList15037 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _OP_BRACKET_OPEN_in_rankSpecifier15106 = new BitSet(new ulong[]{0x0UL,0x1000000000000UL});
		public static readonly BitSet _OP_BRACKET_CLOSE_in_rankSpecifier15116 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _OP_CARET_in_rankSpecifier15159 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__predefinedType_in_np__baseType15230 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__qualifiedName_in_np__baseType15258 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _np__identifierName_in_np__qualifiedName15318 = new BitSet(new ulong[]{0x0UL,0x20000000000000UL});
		public static readonly BitSet _OP_COLON_COLON_in_np__qualifiedName15320 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _np__simpleName_in_np__qualifiedName15357 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _OP_DOT_in_np__qualifiedName15391 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _np__simpleName_in_np__qualifiedName15407 = new BitSet(new ulong[]{0x2UL,0x80000000000000UL});
		public static readonly BitSet _np__identifierName_in_np__simpleName15468 = new BitSet(new ulong[]{0x2UL,0x0UL,0x8UL});
		public static readonly BitSet _np__genericTypeArguments_in_np__simpleName15523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_in_np__genericTypeArguments15582 = new BitSet(new ulong[]{0x8460804225001000UL,0x2042000047012802UL,0x6UL});
		public static readonly BitSet _np__genericTypeArgument_in_np__genericTypeArguments15594 = new BitSet(new ulong[]{0x0UL,0x2040000000000000UL,0x6UL});
		public static readonly BitSet _OP_COMMA_in_np__genericTypeArguments15628 = new BitSet(new ulong[]{0x8460804225001000UL,0x2042000047012802UL,0x6UL});
		public static readonly BitSet _np__genericTypeArgument_in_np__genericTypeArguments15644 = new BitSet(new ulong[]{0x0UL,0x2040000000000000UL,0x6UL});
		public static readonly BitSet _op_GREATER_THAN_ANY_in_np__genericTypeArguments15733 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attributeListList_in_np__genericTypeArgument15793 = new BitSet(new ulong[]{0x8460804225001000UL,0x47012802UL});
		public static readonly BitSet _typeParameterVariance_in_np__genericTypeArgument15809 = new BitSet(new ulong[]{0x8440804225001000UL,0x47012800UL});
		public static readonly BitSet _np__type_in_np__genericTypeArgument15825 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENTIFIER_in_np__identifierName15909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_BOOL_in_np__predefinedType15940 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_BYTE_in_np__predefinedType15950 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_CHAR_in_np__predefinedType15960 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DECIMAL_in_np__predefinedType15970 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_DOUBLE_in_np__predefinedType15980 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_FLOAT_in_np__predefinedType15990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_INT_in_np__predefinedType16000 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_LONG_in_np__predefinedType16010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_OBJECT_in_np__predefinedType16020 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_SBYTE_in_np__predefinedType16030 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_SHORT_in_np__predefinedType16040 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_STRING_in_np__predefinedType16050 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_UINT_in_np__predefinedType16060 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_ULONG_in_np__predefinedType16070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_USHORT_in_np__predefinedType16080 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_VOID_in_np__predefinedType16090 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_GREATER_THAN_GREATER_THAN_FIRST_in_op_GREATER_THAN_GREATER_THAN17158 = new BitSet(new ulong[]{0x0UL,0x0UL,0x4UL});
		public static readonly BitSet _OP_GREATER_THAN_GREATER_THAN_SECOND_in_op_GREATER_THAN_GREATER_THAN17160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _assemblyAttributeHeadScan_in_synpred1_Truss145 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifierName_in_synpred2_Truss1282 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _OP_EQUALS_in_synpred2_Truss1284 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _constructorDeclarationHeadScan_in_synpred3_Truss3922 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationWithoutType_in_synpred4_Truss4221 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_synpred4_Truss4223 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _name_in_synpred5_Truss4278 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _OP_DOT_in_synpred5_Truss4280 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _KW_THIS_in_synpred5_Truss4285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclaration_in_synpred6_Truss4675 = new BitSet(new ulong[]{0x0UL,0x0UL,0x80000UL});
		public static readonly BitSet _OP_SEMICOLON_in_synpred6_Truss4677 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _KW_READONLY_in_synpred7_Truss5876 = new BitSet(new ulong[]{0x8440804225001000UL,0x57012800UL});
		public static readonly BitSet _variableDeclarationHeadScan_in_synpred7_Truss5879 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationHeadScan_in_synpred8_Truss6564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationHeadScan_in_synpred9_Truss8430 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _variableDeclarationHeadScan_in_synpred10_Truss8656 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambdaExpressionHeadScan_in_synpred11_Truss8708 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_PAREN_OPEN_in_synpred12_Truss11376 = new BitSet(new ulong[]{0x8440804225001000UL,0x800000057012800UL,0x20000UL});
		public static readonly BitSet _castType_in_synpred12_Truss11378 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _OP_PAREN_CLOSE_in_synpred12_Truss11380 = new BitSet(new ulong[]{0x6000200400E11920UL,0x800004000A84000UL,0xC14A80UL});
		public static readonly BitSet _expression_in_synpred12_Truss11382 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_in_synpred13_Truss12478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_synpred14_Truss12607 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_BRACE_OPEN_in_synpred15_Truss12704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_QUESTION_in_synpred16_Truss14788 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_in_synpred17_Truss14856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rankSpecifier_in_synpred18_Truss14924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _rankSpecifier_in_synpred19_Truss15018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_CARET_in_synpred20_Truss15142 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _OP_LESS_THAN_in_synpred21_Truss15504 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  Truss.Compiler.Parser 
